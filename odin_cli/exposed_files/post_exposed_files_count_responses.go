// Code generated by go-swagger; DO NOT EDIT.

package exposed_files

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cybledev/odin-cli/models"
)

// PostExposedFilesCountReader is a Reader for the PostExposedFilesCount structure.
type PostExposedFilesCountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostExposedFilesCountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostExposedFilesCountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400,402,401:
		result := NewPostExposedFilesCountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostExposedFilesCountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /exposed/files/count] PostExposedFilesCount", response, response.Code())
	}
}

// NewPostExposedFilesCountOK creates a PostExposedFilesCountOK with default headers values
func NewPostExposedFilesCountOK() *PostExposedFilesCountOK {
	return &PostExposedFilesCountOK{}
}

/*
PostExposedFilesCountOK describes a response with status code 200, with default header values.

OK
*/
type PostExposedFilesCountOK struct {
	Payload *PostExposedFilesCountOKBody
}

// IsSuccess returns true when this post exposed files count o k response has a 2xx status code
func (o *PostExposedFilesCountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post exposed files count o k response has a 3xx status code
func (o *PostExposedFilesCountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post exposed files count o k response has a 4xx status code
func (o *PostExposedFilesCountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post exposed files count o k response has a 5xx status code
func (o *PostExposedFilesCountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post exposed files count o k response a status code equal to that given
func (o *PostExposedFilesCountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post exposed files count o k response
func (o *PostExposedFilesCountOK) Code() int {
	return 200
}

func (o *PostExposedFilesCountOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /exposed/files/count][%d] postExposedFilesCountOK %s", 200, payload)
}

func (o *PostExposedFilesCountOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /exposed/files/count][%d] postExposedFilesCountOK %s", 200, payload)
}

func (o *PostExposedFilesCountOK) GetPayload() *PostExposedFilesCountOKBody {
	return o.Payload
}

func (o *PostExposedFilesCountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostExposedFilesCountOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostExposedFilesCountBadRequest creates a PostExposedFilesCountBadRequest with default headers values
func NewPostExposedFilesCountBadRequest() *PostExposedFilesCountBadRequest {
	return &PostExposedFilesCountBadRequest{}
}

/*
PostExposedFilesCountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostExposedFilesCountBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this post exposed files count bad request response has a 2xx status code
func (o *PostExposedFilesCountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post exposed files count bad request response has a 3xx status code
func (o *PostExposedFilesCountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post exposed files count bad request response has a 4xx status code
func (o *PostExposedFilesCountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post exposed files count bad request response has a 5xx status code
func (o *PostExposedFilesCountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post exposed files count bad request response a status code equal to that given
func (o *PostExposedFilesCountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post exposed files count bad request response
func (o *PostExposedFilesCountBadRequest) Code() int {
	return 400
}

func (o *PostExposedFilesCountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /exposed/files/count][%d] postExposedFilesCountBadRequest %s", 400, payload)
}

func (o *PostExposedFilesCountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /exposed/files/count][%d] postExposedFilesCountBadRequest %s", 400, payload)
}

func (o *PostExposedFilesCountBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *PostExposedFilesCountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostExposedFilesCountInternalServerError creates a PostExposedFilesCountInternalServerError with default headers values
func NewPostExposedFilesCountInternalServerError() *PostExposedFilesCountInternalServerError {
	return &PostExposedFilesCountInternalServerError{}
}

/*
PostExposedFilesCountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostExposedFilesCountInternalServerError struct {
	Payload interface{}
}

// IsSuccess returns true when this post exposed files count internal server error response has a 2xx status code
func (o *PostExposedFilesCountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post exposed files count internal server error response has a 3xx status code
func (o *PostExposedFilesCountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post exposed files count internal server error response has a 4xx status code
func (o *PostExposedFilesCountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post exposed files count internal server error response has a 5xx status code
func (o *PostExposedFilesCountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post exposed files count internal server error response a status code equal to that given
func (o *PostExposedFilesCountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post exposed files count internal server error response
func (o *PostExposedFilesCountInternalServerError) Code() int {
	return 500
}

func (o *PostExposedFilesCountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /exposed/files/count][%d] postExposedFilesCountInternalServerError %s", 500, payload)
}

func (o *PostExposedFilesCountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /exposed/files/count][%d] postExposedFilesCountInternalServerError %s", 500, payload)
}

func (o *PostExposedFilesCountInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *PostExposedFilesCountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostExposedFilesCountOKBody post exposed files count o k body
swagger:model PostExposedFilesCountOKBody
*/
type PostExposedFilesCountOKBody struct {
	models.ExposedAPIResponse

	// data
	Data *models.ExposedSearchCount `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostExposedFilesCountOKBody) UnmarshalJSON(raw []byte) error {
	// PostExposedFilesCountOKBodyAO0
	var postExposedFilesCountOKBodyAO0 models.ExposedAPIResponse
	if err := swag.ReadJSON(raw, &postExposedFilesCountOKBodyAO0); err != nil {
		return err
	}
	o.ExposedAPIResponse = postExposedFilesCountOKBodyAO0

	// PostExposedFilesCountOKBodyAO1
	var dataPostExposedFilesCountOKBodyAO1 struct {
		Data *models.ExposedSearchCount `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostExposedFilesCountOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostExposedFilesCountOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostExposedFilesCountOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postExposedFilesCountOKBodyAO0, err := swag.WriteJSON(o.ExposedAPIResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postExposedFilesCountOKBodyAO0)
	var dataPostExposedFilesCountOKBodyAO1 struct {
		Data *models.ExposedSearchCount `json:"data,omitempty"`
	}

	dataPostExposedFilesCountOKBodyAO1.Data = o.Data

	jsonDataPostExposedFilesCountOKBodyAO1, errPostExposedFilesCountOKBodyAO1 := swag.WriteJSON(dataPostExposedFilesCountOKBodyAO1)
	if errPostExposedFilesCountOKBodyAO1 != nil {
		return nil, errPostExposedFilesCountOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostExposedFilesCountOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post exposed files count o k body
func (o *PostExposedFilesCountOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ExposedAPIResponse
	if err := o.ExposedAPIResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostExposedFilesCountOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postExposedFilesCountOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postExposedFilesCountOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post exposed files count o k body based on the context it is used
func (o *PostExposedFilesCountOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ExposedAPIResponse
	if err := o.ExposedAPIResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostExposedFilesCountOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if swag.IsZero(o.Data) { // not required
			return nil
		}

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postExposedFilesCountOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postExposedFilesCountOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostExposedFilesCountOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostExposedFilesCountOKBody) UnmarshalBinary(b []byte) error {
	var res PostExposedFilesCountOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
