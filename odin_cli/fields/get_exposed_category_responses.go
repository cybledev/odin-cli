// Code generated by go-swagger; DO NOT EDIT.

package fields

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cybledev/odin-cli/models"
)

// GetExposedCategoryReader is a Reader for the GetExposedCategory structure.
type GetExposedCategoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetExposedCategoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetExposedCategoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400,402,401:
		result := NewGetExposedCategoryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetExposedCategoryRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetExposedCategoryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /exposed/{category}/] GetExposedCategory", response, response.Code())
	}
}

// NewGetExposedCategoryOK creates a GetExposedCategoryOK with default headers values
func NewGetExposedCategoryOK() *GetExposedCategoryOK {
	return &GetExposedCategoryOK{}
}

/*
GetExposedCategoryOK describes a response with status code 200, with default header values.

OK
*/
type GetExposedCategoryOK struct {
	Payload *GetExposedCategoryOKBody
}

// IsSuccess returns true when this get exposed category o k response has a 2xx status code
func (o *GetExposedCategoryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get exposed category o k response has a 3xx status code
func (o *GetExposedCategoryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get exposed category o k response has a 4xx status code
func (o *GetExposedCategoryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get exposed category o k response has a 5xx status code
func (o *GetExposedCategoryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get exposed category o k response a status code equal to that given
func (o *GetExposedCategoryOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get exposed category o k response
func (o *GetExposedCategoryOK) Code() int {
	return 200
}

func (o *GetExposedCategoryOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /exposed/{category}/][%d] getExposedCategoryOK %s", 200, payload)
}

func (o *GetExposedCategoryOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /exposed/{category}/][%d] getExposedCategoryOK %s", 200, payload)
}

func (o *GetExposedCategoryOK) GetPayload() *GetExposedCategoryOKBody {
	return o.Payload
}

func (o *GetExposedCategoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetExposedCategoryOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExposedCategoryBadRequest creates a GetExposedCategoryBadRequest with default headers values
func NewGetExposedCategoryBadRequest() *GetExposedCategoryBadRequest {
	return &GetExposedCategoryBadRequest{}
}

/*
GetExposedCategoryBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetExposedCategoryBadRequest struct {
	Payload *models.FieldsErrorResponse
}

// IsSuccess returns true when this get exposed category bad request response has a 2xx status code
func (o *GetExposedCategoryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get exposed category bad request response has a 3xx status code
func (o *GetExposedCategoryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get exposed category bad request response has a 4xx status code
func (o *GetExposedCategoryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get exposed category bad request response has a 5xx status code
func (o *GetExposedCategoryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get exposed category bad request response a status code equal to that given
func (o *GetExposedCategoryBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get exposed category bad request response
func (o *GetExposedCategoryBadRequest) Code() int {
	return 400
}

func (o *GetExposedCategoryBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /exposed/{category}/][%d] getExposedCategoryBadRequest %s", 400, payload)
}

func (o *GetExposedCategoryBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /exposed/{category}/][%d] getExposedCategoryBadRequest %s", 400, payload)
}

func (o *GetExposedCategoryBadRequest) GetPayload() *models.FieldsErrorResponse {
	return o.Payload
}

func (o *GetExposedCategoryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FieldsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExposedCategoryRequestTimeout creates a GetExposedCategoryRequestTimeout with default headers values
func NewGetExposedCategoryRequestTimeout() *GetExposedCategoryRequestTimeout {
	return &GetExposedCategoryRequestTimeout{}
}

/*
GetExposedCategoryRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type GetExposedCategoryRequestTimeout struct {
	Payload *models.FieldsErrorResponse
}

// IsSuccess returns true when this get exposed category request timeout response has a 2xx status code
func (o *GetExposedCategoryRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get exposed category request timeout response has a 3xx status code
func (o *GetExposedCategoryRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get exposed category request timeout response has a 4xx status code
func (o *GetExposedCategoryRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get exposed category request timeout response has a 5xx status code
func (o *GetExposedCategoryRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get exposed category request timeout response a status code equal to that given
func (o *GetExposedCategoryRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the get exposed category request timeout response
func (o *GetExposedCategoryRequestTimeout) Code() int {
	return 408
}

func (o *GetExposedCategoryRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /exposed/{category}/][%d] getExposedCategoryRequestTimeout %s", 408, payload)
}

func (o *GetExposedCategoryRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /exposed/{category}/][%d] getExposedCategoryRequestTimeout %s", 408, payload)
}

func (o *GetExposedCategoryRequestTimeout) GetPayload() *models.FieldsErrorResponse {
	return o.Payload
}

func (o *GetExposedCategoryRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FieldsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExposedCategoryInternalServerError creates a GetExposedCategoryInternalServerError with default headers values
func NewGetExposedCategoryInternalServerError() *GetExposedCategoryInternalServerError {
	return &GetExposedCategoryInternalServerError{}
}

/*
GetExposedCategoryInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetExposedCategoryInternalServerError struct {
	Payload *models.FieldsErrorResponse
}

// IsSuccess returns true when this get exposed category internal server error response has a 2xx status code
func (o *GetExposedCategoryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get exposed category internal server error response has a 3xx status code
func (o *GetExposedCategoryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get exposed category internal server error response has a 4xx status code
func (o *GetExposedCategoryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get exposed category internal server error response has a 5xx status code
func (o *GetExposedCategoryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get exposed category internal server error response a status code equal to that given
func (o *GetExposedCategoryInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get exposed category internal server error response
func (o *GetExposedCategoryInternalServerError) Code() int {
	return 500
}

func (o *GetExposedCategoryInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /exposed/{category}/][%d] getExposedCategoryInternalServerError %s", 500, payload)
}

func (o *GetExposedCategoryInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /exposed/{category}/][%d] getExposedCategoryInternalServerError %s", 500, payload)
}

func (o *GetExposedCategoryInternalServerError) GetPayload() *models.FieldsErrorResponse {
	return o.Payload
}

func (o *GetExposedCategoryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.FieldsErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetExposedCategoryOKBody get exposed category o k body
swagger:model GetExposedCategoryOKBody
*/
type GetExposedCategoryOKBody struct {
	models.FieldsAPIResponse

	// data
	Data []*models.FieldsField `json:"Data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetExposedCategoryOKBody) UnmarshalJSON(raw []byte) error {
	// GetExposedCategoryOKBodyAO0
	var getExposedCategoryOKBodyAO0 models.FieldsAPIResponse
	if err := swag.ReadJSON(raw, &getExposedCategoryOKBodyAO0); err != nil {
		return err
	}
	o.FieldsAPIResponse = getExposedCategoryOKBodyAO0

	// GetExposedCategoryOKBodyAO1
	var dataGetExposedCategoryOKBodyAO1 struct {
		Data []*models.FieldsField `json:"Data"`
	}
	if err := swag.ReadJSON(raw, &dataGetExposedCategoryOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetExposedCategoryOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetExposedCategoryOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getExposedCategoryOKBodyAO0, err := swag.WriteJSON(o.FieldsAPIResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getExposedCategoryOKBodyAO0)
	var dataGetExposedCategoryOKBodyAO1 struct {
		Data []*models.FieldsField `json:"Data"`
	}

	dataGetExposedCategoryOKBodyAO1.Data = o.Data

	jsonDataGetExposedCategoryOKBodyAO1, errGetExposedCategoryOKBodyAO1 := swag.WriteJSON(dataGetExposedCategoryOKBodyAO1)
	if errGetExposedCategoryOKBodyAO1 != nil {
		return nil, errGetExposedCategoryOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetExposedCategoryOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get exposed category o k body
func (o *GetExposedCategoryOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.FieldsAPIResponse
	if err := o.FieldsAPIResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetExposedCategoryOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getExposedCategoryOK" + "." + "Data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getExposedCategoryOK" + "." + "Data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get exposed category o k body based on the context it is used
func (o *GetExposedCategoryOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.FieldsAPIResponse
	if err := o.FieldsAPIResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetExposedCategoryOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {

			if swag.IsZero(o.Data[i]) { // not required
				return nil
			}

			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getExposedCategoryOK" + "." + "Data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getExposedCategoryOK" + "." + "Data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetExposedCategoryOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetExposedCategoryOKBody) UnmarshalBinary(b []byte) error {
	var res GetExposedCategoryOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
