// Code generated by go-swagger; DO NOT EDIT.

package certificate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new certificate API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new certificate API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new certificate API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for certificate API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetCertificatesHash(params *GetCertificatesHashParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCertificatesHashOK, error)

	PostCertificatesCount(params *PostCertificatesCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostCertificatesCountOK, error)

	PostCertificatesScroll(params *PostCertificatesScrollParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostCertificatesScrollOK, error)

	PostCertificatesScrollNext(params *PostCertificatesScrollNextParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostCertificatesScrollNextOK, error)

	PostCertificatesSearch(params *PostCertificatesSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostCertificatesSearchOK, error)

	PostCertificatesSummary(params *PostCertificatesSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostCertificatesSummaryOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetCertificatesHash fetches the complete certificate

Returns the complete certificate
*/
func (a *Client) GetCertificatesHash(params *GetCertificatesHashParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCertificatesHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCertificatesHashParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "hash",
		Method:             "GET",
		PathPattern:        "/certificates/{hash}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCertificatesHashReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCertificatesHashOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCertificatesHash: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostCertificatesCount fetches the record count

Returns the total no of records based on query
*/
func (a *Client) PostCertificatesCount(params *PostCertificatesCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostCertificatesCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCertificatesCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "count",
		Method:             "POST",
		PathPattern:        "/certificates/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCertificatesCountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCertificatesCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostCertificatesCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostCertificatesScroll fetches the record based on query

Returns the record based on query. It uses es scroll api for the pagination.
*/
func (a *Client) PostCertificatesScroll(params *PostCertificatesScrollParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostCertificatesScrollOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCertificatesScrollParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "scroll",
		Method:             "POST",
		PathPattern:        "/certificates/scroll",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCertificatesScrollReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCertificatesScrollOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostCertificatesScroll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostCertificatesScrollNext fetches the next batch of record

Returns the next batch of record based on query. It uses es scroll api for the pagination.
*/
func (a *Client) PostCertificatesScrollNext(params *PostCertificatesScrollNextParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostCertificatesScrollNextOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCertificatesScrollNextParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "next",
		Method:             "POST",
		PathPattern:        "/certificates/scroll/next",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCertificatesScrollNextReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCertificatesScrollNextOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostCertificatesScrollNext: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostCertificatesSearch fetches the record based on query

Returns the record based on query and blank query will return all records. It uses es searchafter for the pagination.
*/
func (a *Client) PostCertificatesSearch(params *PostCertificatesSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostCertificatesSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCertificatesSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "search",
		Method:             "POST",
		PathPattern:        "/certificates/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCertificatesSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCertificatesSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostCertificatesSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostCertificatesSummary creates the summary of the field based on query

Returns the summary of the field based on query
*/
func (a *Client) PostCertificatesSummary(params *PostCertificatesSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostCertificatesSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCertificatesSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "summary",
		Method:             "POST",
		PathPattern:        "/certificates/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostCertificatesSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCertificatesSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostCertificatesSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
