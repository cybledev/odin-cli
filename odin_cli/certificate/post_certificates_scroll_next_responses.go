// Code generated by go-swagger; DO NOT EDIT.

package certificate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cybledev/odin-cli/models"
)

// PostCertificatesScrollNextReader is a Reader for the PostCertificatesScrollNext structure.
type PostCertificatesScrollNextReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostCertificatesScrollNextReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostCertificatesScrollNextOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400,402,401:
		result := NewPostCertificatesScrollNextBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostCertificatesScrollNextRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostCertificatesScrollNextInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /certificates/scroll/next] PostCertificatesScrollNext", response, response.Code())
	}
}

// NewPostCertificatesScrollNextOK creates a PostCertificatesScrollNextOK with default headers values
func NewPostCertificatesScrollNextOK() *PostCertificatesScrollNextOK {
	return &PostCertificatesScrollNextOK{}
}

/*
PostCertificatesScrollNextOK describes a response with status code 200, with default header values.

OK
*/
type PostCertificatesScrollNextOK struct {
	Payload *PostCertificatesScrollNextOKBody
}

// IsSuccess returns true when this post certificates scroll next o k response has a 2xx status code
func (o *PostCertificatesScrollNextOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post certificates scroll next o k response has a 3xx status code
func (o *PostCertificatesScrollNextOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post certificates scroll next o k response has a 4xx status code
func (o *PostCertificatesScrollNextOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post certificates scroll next o k response has a 5xx status code
func (o *PostCertificatesScrollNextOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post certificates scroll next o k response a status code equal to that given
func (o *PostCertificatesScrollNextOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post certificates scroll next o k response
func (o *PostCertificatesScrollNextOK) Code() int {
	return 200
}

func (o *PostCertificatesScrollNextOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /certificates/scroll/next][%d] postCertificatesScrollNextOK %s", 200, payload)
}

func (o *PostCertificatesScrollNextOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /certificates/scroll/next][%d] postCertificatesScrollNextOK %s", 200, payload)
}

func (o *PostCertificatesScrollNextOK) GetPayload() *PostCertificatesScrollNextOKBody {
	return o.Payload
}

func (o *PostCertificatesScrollNextOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostCertificatesScrollNextOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCertificatesScrollNextBadRequest creates a PostCertificatesScrollNextBadRequest with default headers values
func NewPostCertificatesScrollNextBadRequest() *PostCertificatesScrollNextBadRequest {
	return &PostCertificatesScrollNextBadRequest{}
}

/*
PostCertificatesScrollNextBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostCertificatesScrollNextBadRequest struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this post certificates scroll next bad request response has a 2xx status code
func (o *PostCertificatesScrollNextBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post certificates scroll next bad request response has a 3xx status code
func (o *PostCertificatesScrollNextBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post certificates scroll next bad request response has a 4xx status code
func (o *PostCertificatesScrollNextBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post certificates scroll next bad request response has a 5xx status code
func (o *PostCertificatesScrollNextBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post certificates scroll next bad request response a status code equal to that given
func (o *PostCertificatesScrollNextBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post certificates scroll next bad request response
func (o *PostCertificatesScrollNextBadRequest) Code() int {
	return 400
}

func (o *PostCertificatesScrollNextBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /certificates/scroll/next][%d] postCertificatesScrollNextBadRequest %s", 400, payload)
}

func (o *PostCertificatesScrollNextBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /certificates/scroll/next][%d] postCertificatesScrollNextBadRequest %s", 400, payload)
}

func (o *PostCertificatesScrollNextBadRequest) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *PostCertificatesScrollNextBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCertificatesScrollNextRequestTimeout creates a PostCertificatesScrollNextRequestTimeout with default headers values
func NewPostCertificatesScrollNextRequestTimeout() *PostCertificatesScrollNextRequestTimeout {
	return &PostCertificatesScrollNextRequestTimeout{}
}

/*
PostCertificatesScrollNextRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type PostCertificatesScrollNextRequestTimeout struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this post certificates scroll next request timeout response has a 2xx status code
func (o *PostCertificatesScrollNextRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post certificates scroll next request timeout response has a 3xx status code
func (o *PostCertificatesScrollNextRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post certificates scroll next request timeout response has a 4xx status code
func (o *PostCertificatesScrollNextRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post certificates scroll next request timeout response has a 5xx status code
func (o *PostCertificatesScrollNextRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post certificates scroll next request timeout response a status code equal to that given
func (o *PostCertificatesScrollNextRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the post certificates scroll next request timeout response
func (o *PostCertificatesScrollNextRequestTimeout) Code() int {
	return 408
}

func (o *PostCertificatesScrollNextRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /certificates/scroll/next][%d] postCertificatesScrollNextRequestTimeout %s", 408, payload)
}

func (o *PostCertificatesScrollNextRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /certificates/scroll/next][%d] postCertificatesScrollNextRequestTimeout %s", 408, payload)
}

func (o *PostCertificatesScrollNextRequestTimeout) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *PostCertificatesScrollNextRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCertificatesScrollNextInternalServerError creates a PostCertificatesScrollNextInternalServerError with default headers values
func NewPostCertificatesScrollNextInternalServerError() *PostCertificatesScrollNextInternalServerError {
	return &PostCertificatesScrollNextInternalServerError{}
}

/*
PostCertificatesScrollNextInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostCertificatesScrollNextInternalServerError struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this post certificates scroll next internal server error response has a 2xx status code
func (o *PostCertificatesScrollNextInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post certificates scroll next internal server error response has a 3xx status code
func (o *PostCertificatesScrollNextInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post certificates scroll next internal server error response has a 4xx status code
func (o *PostCertificatesScrollNextInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post certificates scroll next internal server error response has a 5xx status code
func (o *PostCertificatesScrollNextInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post certificates scroll next internal server error response a status code equal to that given
func (o *PostCertificatesScrollNextInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post certificates scroll next internal server error response
func (o *PostCertificatesScrollNextInternalServerError) Code() int {
	return 500
}

func (o *PostCertificatesScrollNextInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /certificates/scroll/next][%d] postCertificatesScrollNextInternalServerError %s", 500, payload)
}

func (o *PostCertificatesScrollNextInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /certificates/scroll/next][%d] postCertificatesScrollNextInternalServerError %s", 500, payload)
}

func (o *PostCertificatesScrollNextInternalServerError) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *PostCertificatesScrollNextInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostCertificatesScrollNextOKBody post certificates scroll next o k body
swagger:model PostCertificatesScrollNextOKBody
*/
type PostCertificatesScrollNextOKBody struct {
	models.CertificateAPIResponse

	// data
	Data *models.CertificateCertScroll `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostCertificatesScrollNextOKBody) UnmarshalJSON(raw []byte) error {
	// PostCertificatesScrollNextOKBodyAO0
	var postCertificatesScrollNextOKBodyAO0 models.CertificateAPIResponse
	if err := swag.ReadJSON(raw, &postCertificatesScrollNextOKBodyAO0); err != nil {
		return err
	}
	o.CertificateAPIResponse = postCertificatesScrollNextOKBodyAO0

	// PostCertificatesScrollNextOKBodyAO1
	var dataPostCertificatesScrollNextOKBodyAO1 struct {
		Data *models.CertificateCertScroll `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostCertificatesScrollNextOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostCertificatesScrollNextOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostCertificatesScrollNextOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postCertificatesScrollNextOKBodyAO0, err := swag.WriteJSON(o.CertificateAPIResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postCertificatesScrollNextOKBodyAO0)
	var dataPostCertificatesScrollNextOKBodyAO1 struct {
		Data *models.CertificateCertScroll `json:"data,omitempty"`
	}

	dataPostCertificatesScrollNextOKBodyAO1.Data = o.Data

	jsonDataPostCertificatesScrollNextOKBodyAO1, errPostCertificatesScrollNextOKBodyAO1 := swag.WriteJSON(dataPostCertificatesScrollNextOKBodyAO1)
	if errPostCertificatesScrollNextOKBodyAO1 != nil {
		return nil, errPostCertificatesScrollNextOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostCertificatesScrollNextOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post certificates scroll next o k body
func (o *PostCertificatesScrollNextOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.CertificateAPIResponse
	if err := o.CertificateAPIResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostCertificatesScrollNextOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postCertificatesScrollNextOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postCertificatesScrollNextOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post certificates scroll next o k body based on the context it is used
func (o *PostCertificatesScrollNextOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.CertificateAPIResponse
	if err := o.CertificateAPIResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostCertificatesScrollNextOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if swag.IsZero(o.Data) { // not required
			return nil
		}

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postCertificatesScrollNextOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postCertificatesScrollNextOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostCertificatesScrollNextOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostCertificatesScrollNextOKBody) UnmarshalBinary(b []byte) error {
	var res PostCertificatesScrollNextOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
