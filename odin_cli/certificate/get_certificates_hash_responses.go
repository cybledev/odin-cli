// Code generated by go-swagger; DO NOT EDIT.

package certificate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cybledev/odin-cli/models"
)

// GetCertificatesHashReader is a Reader for the GetCertificatesHash structure.
type GetCertificatesHashReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCertificatesHashReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCertificatesHashOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400,402,401:
		result := NewGetCertificatesHashBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetCertificatesHashRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCertificatesHashInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /certificates/{hash}] GetCertificatesHash", response, response.Code())
	}
}

// NewGetCertificatesHashOK creates a GetCertificatesHashOK with default headers values
func NewGetCertificatesHashOK() *GetCertificatesHashOK {
	return &GetCertificatesHashOK{}
}

/*
GetCertificatesHashOK describes a response with status code 200, with default header values.

OK
*/
type GetCertificatesHashOK struct {
	Payload *models.CertificateAPIResponse
}

// IsSuccess returns true when this get certificates hash o k response has a 2xx status code
func (o *GetCertificatesHashOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get certificates hash o k response has a 3xx status code
func (o *GetCertificatesHashOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get certificates hash o k response has a 4xx status code
func (o *GetCertificatesHashOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get certificates hash o k response has a 5xx status code
func (o *GetCertificatesHashOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get certificates hash o k response a status code equal to that given
func (o *GetCertificatesHashOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get certificates hash o k response
func (o *GetCertificatesHashOK) Code() int {
	return 200
}

func (o *GetCertificatesHashOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /certificates/{hash}][%d] getCertificatesHashOK %s", 200, payload)
}

func (o *GetCertificatesHashOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /certificates/{hash}][%d] getCertificatesHashOK %s", 200, payload)
}

func (o *GetCertificatesHashOK) GetPayload() *models.CertificateAPIResponse {
	return o.Payload
}

func (o *GetCertificatesHashOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateAPIResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCertificatesHashBadRequest creates a GetCertificatesHashBadRequest with default headers values
func NewGetCertificatesHashBadRequest() *GetCertificatesHashBadRequest {
	return &GetCertificatesHashBadRequest{}
}

/*
GetCertificatesHashBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetCertificatesHashBadRequest struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this get certificates hash bad request response has a 2xx status code
func (o *GetCertificatesHashBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get certificates hash bad request response has a 3xx status code
func (o *GetCertificatesHashBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get certificates hash bad request response has a 4xx status code
func (o *GetCertificatesHashBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get certificates hash bad request response has a 5xx status code
func (o *GetCertificatesHashBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get certificates hash bad request response a status code equal to that given
func (o *GetCertificatesHashBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get certificates hash bad request response
func (o *GetCertificatesHashBadRequest) Code() int {
	return 400
}

func (o *GetCertificatesHashBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /certificates/{hash}][%d] getCertificatesHashBadRequest %s", 400, payload)
}

func (o *GetCertificatesHashBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /certificates/{hash}][%d] getCertificatesHashBadRequest %s", 400, payload)
}

func (o *GetCertificatesHashBadRequest) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *GetCertificatesHashBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCertificatesHashRequestTimeout creates a GetCertificatesHashRequestTimeout with default headers values
func NewGetCertificatesHashRequestTimeout() *GetCertificatesHashRequestTimeout {
	return &GetCertificatesHashRequestTimeout{}
}

/*
GetCertificatesHashRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type GetCertificatesHashRequestTimeout struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this get certificates hash request timeout response has a 2xx status code
func (o *GetCertificatesHashRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get certificates hash request timeout response has a 3xx status code
func (o *GetCertificatesHashRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get certificates hash request timeout response has a 4xx status code
func (o *GetCertificatesHashRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get certificates hash request timeout response has a 5xx status code
func (o *GetCertificatesHashRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get certificates hash request timeout response a status code equal to that given
func (o *GetCertificatesHashRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the get certificates hash request timeout response
func (o *GetCertificatesHashRequestTimeout) Code() int {
	return 408
}

func (o *GetCertificatesHashRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /certificates/{hash}][%d] getCertificatesHashRequestTimeout %s", 408, payload)
}

func (o *GetCertificatesHashRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /certificates/{hash}][%d] getCertificatesHashRequestTimeout %s", 408, payload)
}

func (o *GetCertificatesHashRequestTimeout) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *GetCertificatesHashRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCertificatesHashInternalServerError creates a GetCertificatesHashInternalServerError with default headers values
func NewGetCertificatesHashInternalServerError() *GetCertificatesHashInternalServerError {
	return &GetCertificatesHashInternalServerError{}
}

/*
GetCertificatesHashInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetCertificatesHashInternalServerError struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this get certificates hash internal server error response has a 2xx status code
func (o *GetCertificatesHashInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get certificates hash internal server error response has a 3xx status code
func (o *GetCertificatesHashInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get certificates hash internal server error response has a 4xx status code
func (o *GetCertificatesHashInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get certificates hash internal server error response has a 5xx status code
func (o *GetCertificatesHashInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get certificates hash internal server error response a status code equal to that given
func (o *GetCertificatesHashInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get certificates hash internal server error response
func (o *GetCertificatesHashInternalServerError) Code() int {
	return 500
}

func (o *GetCertificatesHashInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /certificates/{hash}][%d] getCertificatesHashInternalServerError %s", 500, payload)
}

func (o *GetCertificatesHashInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /certificates/{hash}][%d] getCertificatesHashInternalServerError %s", 500, payload)
}

func (o *GetCertificatesHashInternalServerError) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *GetCertificatesHashInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
