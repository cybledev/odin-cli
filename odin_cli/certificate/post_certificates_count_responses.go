// Code generated by go-swagger; DO NOT EDIT.

package certificate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cybledev/odin-cli/models"
)

// PostCertificatesCountReader is a Reader for the PostCertificatesCount structure.
type PostCertificatesCountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostCertificatesCountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostCertificatesCountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400,402,401:
		result := NewPostCertificatesCountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostCertificatesCountRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostCertificatesCountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /certificates/count] PostCertificatesCount", response, response.Code())
	}
}

// NewPostCertificatesCountOK creates a PostCertificatesCountOK with default headers values
func NewPostCertificatesCountOK() *PostCertificatesCountOK {
	return &PostCertificatesCountOK{}
}

/*
PostCertificatesCountOK describes a response with status code 200, with default header values.

OK
*/
type PostCertificatesCountOK struct {
	Payload *PostCertificatesCountOKBody
}

// IsSuccess returns true when this post certificates count o k response has a 2xx status code
func (o *PostCertificatesCountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post certificates count o k response has a 3xx status code
func (o *PostCertificatesCountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post certificates count o k response has a 4xx status code
func (o *PostCertificatesCountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post certificates count o k response has a 5xx status code
func (o *PostCertificatesCountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post certificates count o k response a status code equal to that given
func (o *PostCertificatesCountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post certificates count o k response
func (o *PostCertificatesCountOK) Code() int {
	return 200
}

func (o *PostCertificatesCountOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /certificates/count][%d] postCertificatesCountOK %s", 200, payload)
}

func (o *PostCertificatesCountOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /certificates/count][%d] postCertificatesCountOK %s", 200, payload)
}

func (o *PostCertificatesCountOK) GetPayload() *PostCertificatesCountOKBody {
	return o.Payload
}

func (o *PostCertificatesCountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostCertificatesCountOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCertificatesCountBadRequest creates a PostCertificatesCountBadRequest with default headers values
func NewPostCertificatesCountBadRequest() *PostCertificatesCountBadRequest {
	return &PostCertificatesCountBadRequest{}
}

/*
PostCertificatesCountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostCertificatesCountBadRequest struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this post certificates count bad request response has a 2xx status code
func (o *PostCertificatesCountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post certificates count bad request response has a 3xx status code
func (o *PostCertificatesCountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post certificates count bad request response has a 4xx status code
func (o *PostCertificatesCountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post certificates count bad request response has a 5xx status code
func (o *PostCertificatesCountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post certificates count bad request response a status code equal to that given
func (o *PostCertificatesCountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post certificates count bad request response
func (o *PostCertificatesCountBadRequest) Code() int {
	return 400
}

func (o *PostCertificatesCountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /certificates/count][%d] postCertificatesCountBadRequest %s", 400, payload)
}

func (o *PostCertificatesCountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /certificates/count][%d] postCertificatesCountBadRequest %s", 400, payload)
}

func (o *PostCertificatesCountBadRequest) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *PostCertificatesCountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCertificatesCountRequestTimeout creates a PostCertificatesCountRequestTimeout with default headers values
func NewPostCertificatesCountRequestTimeout() *PostCertificatesCountRequestTimeout {
	return &PostCertificatesCountRequestTimeout{}
}

/*
PostCertificatesCountRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type PostCertificatesCountRequestTimeout struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this post certificates count request timeout response has a 2xx status code
func (o *PostCertificatesCountRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post certificates count request timeout response has a 3xx status code
func (o *PostCertificatesCountRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post certificates count request timeout response has a 4xx status code
func (o *PostCertificatesCountRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post certificates count request timeout response has a 5xx status code
func (o *PostCertificatesCountRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post certificates count request timeout response a status code equal to that given
func (o *PostCertificatesCountRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the post certificates count request timeout response
func (o *PostCertificatesCountRequestTimeout) Code() int {
	return 408
}

func (o *PostCertificatesCountRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /certificates/count][%d] postCertificatesCountRequestTimeout %s", 408, payload)
}

func (o *PostCertificatesCountRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /certificates/count][%d] postCertificatesCountRequestTimeout %s", 408, payload)
}

func (o *PostCertificatesCountRequestTimeout) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *PostCertificatesCountRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCertificatesCountInternalServerError creates a PostCertificatesCountInternalServerError with default headers values
func NewPostCertificatesCountInternalServerError() *PostCertificatesCountInternalServerError {
	return &PostCertificatesCountInternalServerError{}
}

/*
PostCertificatesCountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostCertificatesCountInternalServerError struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this post certificates count internal server error response has a 2xx status code
func (o *PostCertificatesCountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post certificates count internal server error response has a 3xx status code
func (o *PostCertificatesCountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post certificates count internal server error response has a 4xx status code
func (o *PostCertificatesCountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post certificates count internal server error response has a 5xx status code
func (o *PostCertificatesCountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post certificates count internal server error response a status code equal to that given
func (o *PostCertificatesCountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post certificates count internal server error response
func (o *PostCertificatesCountInternalServerError) Code() int {
	return 500
}

func (o *PostCertificatesCountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /certificates/count][%d] postCertificatesCountInternalServerError %s", 500, payload)
}

func (o *PostCertificatesCountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /certificates/count][%d] postCertificatesCountInternalServerError %s", 500, payload)
}

func (o *PostCertificatesCountInternalServerError) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *PostCertificatesCountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostCertificatesCountOKBody post certificates count o k body
swagger:model PostCertificatesCountOKBody
*/
type PostCertificatesCountOKBody struct {
	models.CertificateAPIResponse

	// data
	Data *models.CertificateCertCount `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostCertificatesCountOKBody) UnmarshalJSON(raw []byte) error {
	// PostCertificatesCountOKBodyAO0
	var postCertificatesCountOKBodyAO0 models.CertificateAPIResponse
	if err := swag.ReadJSON(raw, &postCertificatesCountOKBodyAO0); err != nil {
		return err
	}
	o.CertificateAPIResponse = postCertificatesCountOKBodyAO0

	// PostCertificatesCountOKBodyAO1
	var dataPostCertificatesCountOKBodyAO1 struct {
		Data *models.CertificateCertCount `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostCertificatesCountOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostCertificatesCountOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostCertificatesCountOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postCertificatesCountOKBodyAO0, err := swag.WriteJSON(o.CertificateAPIResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postCertificatesCountOKBodyAO0)
	var dataPostCertificatesCountOKBodyAO1 struct {
		Data *models.CertificateCertCount `json:"data,omitempty"`
	}

	dataPostCertificatesCountOKBodyAO1.Data = o.Data

	jsonDataPostCertificatesCountOKBodyAO1, errPostCertificatesCountOKBodyAO1 := swag.WriteJSON(dataPostCertificatesCountOKBodyAO1)
	if errPostCertificatesCountOKBodyAO1 != nil {
		return nil, errPostCertificatesCountOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostCertificatesCountOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post certificates count o k body
func (o *PostCertificatesCountOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.CertificateAPIResponse
	if err := o.CertificateAPIResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostCertificatesCountOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postCertificatesCountOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postCertificatesCountOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post certificates count o k body based on the context it is used
func (o *PostCertificatesCountOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.CertificateAPIResponse
	if err := o.CertificateAPIResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostCertificatesCountOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if swag.IsZero(o.Data) { // not required
			return nil
		}

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postCertificatesCountOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postCertificatesCountOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostCertificatesCountOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostCertificatesCountOKBody) UnmarshalBinary(b []byte) error {
	var res PostCertificatesCountOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
