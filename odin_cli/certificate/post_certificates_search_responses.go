// Code generated by go-swagger; DO NOT EDIT.

package certificate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cybledev/odin-cli/models"
)

// PostCertificatesSearchReader is a Reader for the PostCertificatesSearch structure.
type PostCertificatesSearchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostCertificatesSearchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostCertificatesSearchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400,402,401:
		result := NewPostCertificatesSearchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostCertificatesSearchRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostCertificatesSearchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /certificates/search] PostCertificatesSearch", response, response.Code())
	}
}

// NewPostCertificatesSearchOK creates a PostCertificatesSearchOK with default headers values
func NewPostCertificatesSearchOK() *PostCertificatesSearchOK {
	return &PostCertificatesSearchOK{}
}

/*
PostCertificatesSearchOK describes a response with status code 200, with default header values.

OK
*/
type PostCertificatesSearchOK struct {
	Payload *PostCertificatesSearchOKBody
}

// IsSuccess returns true when this post certificates search o k response has a 2xx status code
func (o *PostCertificatesSearchOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post certificates search o k response has a 3xx status code
func (o *PostCertificatesSearchOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post certificates search o k response has a 4xx status code
func (o *PostCertificatesSearchOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post certificates search o k response has a 5xx status code
func (o *PostCertificatesSearchOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post certificates search o k response a status code equal to that given
func (o *PostCertificatesSearchOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post certificates search o k response
func (o *PostCertificatesSearchOK) Code() int {
	return 200
}

func (o *PostCertificatesSearchOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /certificates/search][%d] postCertificatesSearchOK %s", 200, payload)
}

func (o *PostCertificatesSearchOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /certificates/search][%d] postCertificatesSearchOK %s", 200, payload)
}

func (o *PostCertificatesSearchOK) GetPayload() *PostCertificatesSearchOKBody {
	return o.Payload
}

func (o *PostCertificatesSearchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostCertificatesSearchOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCertificatesSearchBadRequest creates a PostCertificatesSearchBadRequest with default headers values
func NewPostCertificatesSearchBadRequest() *PostCertificatesSearchBadRequest {
	return &PostCertificatesSearchBadRequest{}
}

/*
PostCertificatesSearchBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostCertificatesSearchBadRequest struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this post certificates search bad request response has a 2xx status code
func (o *PostCertificatesSearchBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post certificates search bad request response has a 3xx status code
func (o *PostCertificatesSearchBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post certificates search bad request response has a 4xx status code
func (o *PostCertificatesSearchBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post certificates search bad request response has a 5xx status code
func (o *PostCertificatesSearchBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post certificates search bad request response a status code equal to that given
func (o *PostCertificatesSearchBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post certificates search bad request response
func (o *PostCertificatesSearchBadRequest) Code() int {
	return 400
}

func (o *PostCertificatesSearchBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /certificates/search][%d] postCertificatesSearchBadRequest %s", 400, payload)
}

func (o *PostCertificatesSearchBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /certificates/search][%d] postCertificatesSearchBadRequest %s", 400, payload)
}

func (o *PostCertificatesSearchBadRequest) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *PostCertificatesSearchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCertificatesSearchRequestTimeout creates a PostCertificatesSearchRequestTimeout with default headers values
func NewPostCertificatesSearchRequestTimeout() *PostCertificatesSearchRequestTimeout {
	return &PostCertificatesSearchRequestTimeout{}
}

/*
PostCertificatesSearchRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type PostCertificatesSearchRequestTimeout struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this post certificates search request timeout response has a 2xx status code
func (o *PostCertificatesSearchRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post certificates search request timeout response has a 3xx status code
func (o *PostCertificatesSearchRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post certificates search request timeout response has a 4xx status code
func (o *PostCertificatesSearchRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post certificates search request timeout response has a 5xx status code
func (o *PostCertificatesSearchRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post certificates search request timeout response a status code equal to that given
func (o *PostCertificatesSearchRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the post certificates search request timeout response
func (o *PostCertificatesSearchRequestTimeout) Code() int {
	return 408
}

func (o *PostCertificatesSearchRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /certificates/search][%d] postCertificatesSearchRequestTimeout %s", 408, payload)
}

func (o *PostCertificatesSearchRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /certificates/search][%d] postCertificatesSearchRequestTimeout %s", 408, payload)
}

func (o *PostCertificatesSearchRequestTimeout) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *PostCertificatesSearchRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostCertificatesSearchInternalServerError creates a PostCertificatesSearchInternalServerError with default headers values
func NewPostCertificatesSearchInternalServerError() *PostCertificatesSearchInternalServerError {
	return &PostCertificatesSearchInternalServerError{}
}

/*
PostCertificatesSearchInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostCertificatesSearchInternalServerError struct {
	Payload *models.CertificateErrorResponse
}

// IsSuccess returns true when this post certificates search internal server error response has a 2xx status code
func (o *PostCertificatesSearchInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post certificates search internal server error response has a 3xx status code
func (o *PostCertificatesSearchInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post certificates search internal server error response has a 4xx status code
func (o *PostCertificatesSearchInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post certificates search internal server error response has a 5xx status code
func (o *PostCertificatesSearchInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post certificates search internal server error response a status code equal to that given
func (o *PostCertificatesSearchInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post certificates search internal server error response
func (o *PostCertificatesSearchInternalServerError) Code() int {
	return 500
}

func (o *PostCertificatesSearchInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /certificates/search][%d] postCertificatesSearchInternalServerError %s", 500, payload)
}

func (o *PostCertificatesSearchInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /certificates/search][%d] postCertificatesSearchInternalServerError %s", 500, payload)
}

func (o *PostCertificatesSearchInternalServerError) GetPayload() *models.CertificateErrorResponse {
	return o.Payload
}

func (o *PostCertificatesSearchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CertificateErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostCertificatesSearchOKBody post certificates search o k body
swagger:model PostCertificatesSearchOKBody
*/
type PostCertificatesSearchOKBody struct {
	models.CertificateAPIResponse

	// data
	Data []interface{} `json:"data"`

	// pagination
	Pagination *models.CertificateSearchPagination `json:"pagination,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostCertificatesSearchOKBody) UnmarshalJSON(raw []byte) error {
	// PostCertificatesSearchOKBodyAO0
	var postCertificatesSearchOKBodyAO0 models.CertificateAPIResponse
	if err := swag.ReadJSON(raw, &postCertificatesSearchOKBodyAO0); err != nil {
		return err
	}
	o.CertificateAPIResponse = postCertificatesSearchOKBodyAO0

	// PostCertificatesSearchOKBodyAO1
	var dataPostCertificatesSearchOKBodyAO1 struct {
		Data []interface{} `json:"data"`

		Pagination *models.CertificateSearchPagination `json:"pagination,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostCertificatesSearchOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostCertificatesSearchOKBodyAO1.Data

	o.Pagination = dataPostCertificatesSearchOKBodyAO1.Pagination

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostCertificatesSearchOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postCertificatesSearchOKBodyAO0, err := swag.WriteJSON(o.CertificateAPIResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postCertificatesSearchOKBodyAO0)
	var dataPostCertificatesSearchOKBodyAO1 struct {
		Data []interface{} `json:"data"`

		Pagination *models.CertificateSearchPagination `json:"pagination,omitempty"`
	}

	dataPostCertificatesSearchOKBodyAO1.Data = o.Data

	dataPostCertificatesSearchOKBodyAO1.Pagination = o.Pagination

	jsonDataPostCertificatesSearchOKBodyAO1, errPostCertificatesSearchOKBodyAO1 := swag.WriteJSON(dataPostCertificatesSearchOKBodyAO1)
	if errPostCertificatesSearchOKBodyAO1 != nil {
		return nil, errPostCertificatesSearchOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostCertificatesSearchOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post certificates search o k body
func (o *PostCertificatesSearchOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.CertificateAPIResponse
	if err := o.CertificateAPIResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostCertificatesSearchOKBody) validatePagination(formats strfmt.Registry) error {

	if swag.IsZero(o.Pagination) { // not required
		return nil
	}

	if o.Pagination != nil {
		if err := o.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postCertificatesSearchOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postCertificatesSearchOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post certificates search o k body based on the context it is used
func (o *PostCertificatesSearchOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.CertificateAPIResponse
	if err := o.CertificateAPIResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostCertificatesSearchOKBody) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if o.Pagination != nil {

		if swag.IsZero(o.Pagination) { // not required
			return nil
		}

		if err := o.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postCertificatesSearchOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postCertificatesSearchOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostCertificatesSearchOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostCertificatesSearchOKBody) UnmarshalBinary(b []byte) error {
	var res PostCertificatesSearchOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
