// Code generated by go-swagger; DO NOT EDIT.

package credits

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cybledev/odin-cli/models"
)

// GetCreditsUsageReader is a Reader for the GetCreditsUsage structure.
type GetCreditsUsageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCreditsUsageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCreditsUsageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400,402,401:
		result := NewGetCreditsUsageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetCreditsUsageRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCreditsUsageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /credits/usage] GetCreditsUsage", response, response.Code())
	}
}

// NewGetCreditsUsageOK creates a GetCreditsUsageOK with default headers values
func NewGetCreditsUsageOK() *GetCreditsUsageOK {
	return &GetCreditsUsageOK{}
}

/*
GetCreditsUsageOK describes a response with status code 200, with default header values.

OK
*/
type GetCreditsUsageOK struct {
	Payload *models.TokensUserTokenStats
}

// IsSuccess returns true when this get credits usage o k response has a 2xx status code
func (o *GetCreditsUsageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get credits usage o k response has a 3xx status code
func (o *GetCreditsUsageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get credits usage o k response has a 4xx status code
func (o *GetCreditsUsageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get credits usage o k response has a 5xx status code
func (o *GetCreditsUsageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get credits usage o k response a status code equal to that given
func (o *GetCreditsUsageOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get credits usage o k response
func (o *GetCreditsUsageOK) Code() int {
	return 200
}

func (o *GetCreditsUsageOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /credits/usage][%d] getCreditsUsageOK %s", 200, payload)
}

func (o *GetCreditsUsageOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /credits/usage][%d] getCreditsUsageOK %s", 200, payload)
}

func (o *GetCreditsUsageOK) GetPayload() *models.TokensUserTokenStats {
	return o.Payload
}

func (o *GetCreditsUsageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TokensUserTokenStats)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCreditsUsageBadRequest creates a GetCreditsUsageBadRequest with default headers values
func NewGetCreditsUsageBadRequest() *GetCreditsUsageBadRequest {
	return &GetCreditsUsageBadRequest{}
}

/*
GetCreditsUsageBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetCreditsUsageBadRequest struct {
	Payload *models.TokensErrorResponse
}

// IsSuccess returns true when this get credits usage bad request response has a 2xx status code
func (o *GetCreditsUsageBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get credits usage bad request response has a 3xx status code
func (o *GetCreditsUsageBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get credits usage bad request response has a 4xx status code
func (o *GetCreditsUsageBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get credits usage bad request response has a 5xx status code
func (o *GetCreditsUsageBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get credits usage bad request response a status code equal to that given
func (o *GetCreditsUsageBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get credits usage bad request response
func (o *GetCreditsUsageBadRequest) Code() int {
	return 400
}

func (o *GetCreditsUsageBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /credits/usage][%d] getCreditsUsageBadRequest %s", 400, payload)
}

func (o *GetCreditsUsageBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /credits/usage][%d] getCreditsUsageBadRequest %s", 400, payload)
}

func (o *GetCreditsUsageBadRequest) GetPayload() *models.TokensErrorResponse {
	return o.Payload
}

func (o *GetCreditsUsageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TokensErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCreditsUsageRequestTimeout creates a GetCreditsUsageRequestTimeout with default headers values
func NewGetCreditsUsageRequestTimeout() *GetCreditsUsageRequestTimeout {
	return &GetCreditsUsageRequestTimeout{}
}

/*
GetCreditsUsageRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type GetCreditsUsageRequestTimeout struct {
	Payload *models.TokensErrorResponse
}

// IsSuccess returns true when this get credits usage request timeout response has a 2xx status code
func (o *GetCreditsUsageRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get credits usage request timeout response has a 3xx status code
func (o *GetCreditsUsageRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get credits usage request timeout response has a 4xx status code
func (o *GetCreditsUsageRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get credits usage request timeout response has a 5xx status code
func (o *GetCreditsUsageRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get credits usage request timeout response a status code equal to that given
func (o *GetCreditsUsageRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the get credits usage request timeout response
func (o *GetCreditsUsageRequestTimeout) Code() int {
	return 408
}

func (o *GetCreditsUsageRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /credits/usage][%d] getCreditsUsageRequestTimeout %s", 408, payload)
}

func (o *GetCreditsUsageRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /credits/usage][%d] getCreditsUsageRequestTimeout %s", 408, payload)
}

func (o *GetCreditsUsageRequestTimeout) GetPayload() *models.TokensErrorResponse {
	return o.Payload
}

func (o *GetCreditsUsageRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TokensErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCreditsUsageInternalServerError creates a GetCreditsUsageInternalServerError with default headers values
func NewGetCreditsUsageInternalServerError() *GetCreditsUsageInternalServerError {
	return &GetCreditsUsageInternalServerError{}
}

/*
GetCreditsUsageInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetCreditsUsageInternalServerError struct {
	Payload *models.TokensErrorResponse
}

// IsSuccess returns true when this get credits usage internal server error response has a 2xx status code
func (o *GetCreditsUsageInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get credits usage internal server error response has a 3xx status code
func (o *GetCreditsUsageInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get credits usage internal server error response has a 4xx status code
func (o *GetCreditsUsageInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get credits usage internal server error response has a 5xx status code
func (o *GetCreditsUsageInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get credits usage internal server error response a status code equal to that given
func (o *GetCreditsUsageInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get credits usage internal server error response
func (o *GetCreditsUsageInternalServerError) Code() int {
	return 500
}

func (o *GetCreditsUsageInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /credits/usage][%d] getCreditsUsageInternalServerError %s", 500, payload)
}

func (o *GetCreditsUsageInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /credits/usage][%d] getCreditsUsageInternalServerError %s", 500, payload)
}

func (o *GetCreditsUsageInternalServerError) GetPayload() *models.TokensErrorResponse {
	return o.Payload
}

func (o *GetCreditsUsageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TokensErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
