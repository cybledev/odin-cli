// Code generated by go-swagger; DO NOT EDIT.

package hosts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cybledev/odin-cli/models"
)

// PostV2HostsSearchReader is a Reader for the PostV2HostsSearch structure.
type PostV2HostsSearchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostV2HostsSearchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostV2HostsSearchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400,401:
		result := NewPostV2HostsSearchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 402:
		result := NewPostV2HostsSearchPaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostV2HostsSearchRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostV2HostsSearchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v2/hosts/search] PostV2HostsSearch", response, response.Code())
	}
}

// NewPostV2HostsSearchOK creates a PostV2HostsSearchOK with default headers values
func NewPostV2HostsSearchOK() *PostV2HostsSearchOK {
	return &PostV2HostsSearchOK{}
}

/*
PostV2HostsSearchOK describes a response with status code 200, with default header values.

OK
*/
type PostV2HostsSearchOK struct {
	Payload *PostV2HostsSearchOKBody
}

// IsSuccess returns true when this post v2 hosts search o k response has a 2xx status code
func (o *PostV2HostsSearchOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post v2 hosts search o k response has a 3xx status code
func (o *PostV2HostsSearchOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v2 hosts search o k response has a 4xx status code
func (o *PostV2HostsSearchOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v2 hosts search o k response has a 5xx status code
func (o *PostV2HostsSearchOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post v2 hosts search o k response a status code equal to that given
func (o *PostV2HostsSearchOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post v2 hosts search o k response
func (o *PostV2HostsSearchOK) Code() int {
	return 200
}

func (o *PostV2HostsSearchOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/hosts/search][%d] postV2HostsSearchOK %s", 200, payload)
}

func (o *PostV2HostsSearchOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/hosts/search][%d] postV2HostsSearchOK %s", 200, payload)
}

func (o *PostV2HostsSearchOK) GetPayload() *PostV2HostsSearchOKBody {
	return o.Payload
}

func (o *PostV2HostsSearchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostV2HostsSearchOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV2HostsSearchBadRequest creates a PostV2HostsSearchBadRequest with default headers values
func NewPostV2HostsSearchBadRequest() *PostV2HostsSearchBadRequest {
	return &PostV2HostsSearchBadRequest{}
}

/*
PostV2HostsSearchBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostV2HostsSearchBadRequest struct {
	Payload *models.CybleComOdinAPIControllersV2IpservicesErrorResponse
}

// IsSuccess returns true when this post v2 hosts search bad request response has a 2xx status code
func (o *PostV2HostsSearchBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v2 hosts search bad request response has a 3xx status code
func (o *PostV2HostsSearchBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v2 hosts search bad request response has a 4xx status code
func (o *PostV2HostsSearchBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v2 hosts search bad request response has a 5xx status code
func (o *PostV2HostsSearchBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post v2 hosts search bad request response a status code equal to that given
func (o *PostV2HostsSearchBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post v2 hosts search bad request response
func (o *PostV2HostsSearchBadRequest) Code() int {
	return 400
}

func (o *PostV2HostsSearchBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/hosts/search][%d] postV2HostsSearchBadRequest %s", 400, payload)
}

func (o *PostV2HostsSearchBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/hosts/search][%d] postV2HostsSearchBadRequest %s", 400, payload)
}

func (o *PostV2HostsSearchBadRequest) GetPayload() *models.CybleComOdinAPIControllersV2IpservicesErrorResponse {
	return o.Payload
}

func (o *PostV2HostsSearchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CybleComOdinAPIControllersV2IpservicesErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV2HostsSearchPaymentRequired creates a PostV2HostsSearchPaymentRequired with default headers values
func NewPostV2HostsSearchPaymentRequired() *PostV2HostsSearchPaymentRequired {
	return &PostV2HostsSearchPaymentRequired{}
}

/*
PostV2HostsSearchPaymentRequired describes a response with status code 402, with default header values.

Payment Required
*/
type PostV2HostsSearchPaymentRequired struct {
	Payload *models.CybleComOdinAPIControllersV2IpservicesErrorResponse
}

// IsSuccess returns true when this post v2 hosts search payment required response has a 2xx status code
func (o *PostV2HostsSearchPaymentRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v2 hosts search payment required response has a 3xx status code
func (o *PostV2HostsSearchPaymentRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v2 hosts search payment required response has a 4xx status code
func (o *PostV2HostsSearchPaymentRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v2 hosts search payment required response has a 5xx status code
func (o *PostV2HostsSearchPaymentRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this post v2 hosts search payment required response a status code equal to that given
func (o *PostV2HostsSearchPaymentRequired) IsCode(code int) bool {
	return code == 402
}

// Code gets the status code for the post v2 hosts search payment required response
func (o *PostV2HostsSearchPaymentRequired) Code() int {
	return 402
}

func (o *PostV2HostsSearchPaymentRequired) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/hosts/search][%d] postV2HostsSearchPaymentRequired %s", 402, payload)
}

func (o *PostV2HostsSearchPaymentRequired) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/hosts/search][%d] postV2HostsSearchPaymentRequired %s", 402, payload)
}

func (o *PostV2HostsSearchPaymentRequired) GetPayload() *models.CybleComOdinAPIControllersV2IpservicesErrorResponse {
	return o.Payload
}

func (o *PostV2HostsSearchPaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CybleComOdinAPIControllersV2IpservicesErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV2HostsSearchRequestTimeout creates a PostV2HostsSearchRequestTimeout with default headers values
func NewPostV2HostsSearchRequestTimeout() *PostV2HostsSearchRequestTimeout {
	return &PostV2HostsSearchRequestTimeout{}
}

/*
PostV2HostsSearchRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type PostV2HostsSearchRequestTimeout struct {
	Payload *models.CybleComOdinAPIControllersV2IpservicesErrorResponse
}

// IsSuccess returns true when this post v2 hosts search request timeout response has a 2xx status code
func (o *PostV2HostsSearchRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v2 hosts search request timeout response has a 3xx status code
func (o *PostV2HostsSearchRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v2 hosts search request timeout response has a 4xx status code
func (o *PostV2HostsSearchRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v2 hosts search request timeout response has a 5xx status code
func (o *PostV2HostsSearchRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post v2 hosts search request timeout response a status code equal to that given
func (o *PostV2HostsSearchRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the post v2 hosts search request timeout response
func (o *PostV2HostsSearchRequestTimeout) Code() int {
	return 408
}

func (o *PostV2HostsSearchRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/hosts/search][%d] postV2HostsSearchRequestTimeout %s", 408, payload)
}

func (o *PostV2HostsSearchRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/hosts/search][%d] postV2HostsSearchRequestTimeout %s", 408, payload)
}

func (o *PostV2HostsSearchRequestTimeout) GetPayload() *models.CybleComOdinAPIControllersV2IpservicesErrorResponse {
	return o.Payload
}

func (o *PostV2HostsSearchRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CybleComOdinAPIControllersV2IpservicesErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV2HostsSearchInternalServerError creates a PostV2HostsSearchInternalServerError with default headers values
func NewPostV2HostsSearchInternalServerError() *PostV2HostsSearchInternalServerError {
	return &PostV2HostsSearchInternalServerError{}
}

/*
PostV2HostsSearchInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostV2HostsSearchInternalServerError struct {
	Payload *models.CybleComOdinAPIControllersV2IpservicesErrorResponse
}

// IsSuccess returns true when this post v2 hosts search internal server error response has a 2xx status code
func (o *PostV2HostsSearchInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v2 hosts search internal server error response has a 3xx status code
func (o *PostV2HostsSearchInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v2 hosts search internal server error response has a 4xx status code
func (o *PostV2HostsSearchInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v2 hosts search internal server error response has a 5xx status code
func (o *PostV2HostsSearchInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post v2 hosts search internal server error response a status code equal to that given
func (o *PostV2HostsSearchInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post v2 hosts search internal server error response
func (o *PostV2HostsSearchInternalServerError) Code() int {
	return 500
}

func (o *PostV2HostsSearchInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/hosts/search][%d] postV2HostsSearchInternalServerError %s", 500, payload)
}

func (o *PostV2HostsSearchInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/hosts/search][%d] postV2HostsSearchInternalServerError %s", 500, payload)
}

func (o *PostV2HostsSearchInternalServerError) GetPayload() *models.CybleComOdinAPIControllersV2IpservicesErrorResponse {
	return o.Payload
}

func (o *PostV2HostsSearchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CybleComOdinAPIControllersV2IpservicesErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostV2HostsSearchOKBody post v2 hosts search o k body
swagger:model PostV2HostsSearchOKBody
*/
type PostV2HostsSearchOKBody struct {
	models.CybleComOdinAPIControllersV2IpservicesAPIResponse

	// pagination
	Pagination *models.CybleComOdinAPIControllersV2IpservicesSearchPagination `json:" pagination,omitempty"`

	// data
	Data []*models.ServiceService `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostV2HostsSearchOKBody) UnmarshalJSON(raw []byte) error {
	// PostV2HostsSearchOKBodyAO0
	var postV2HostsSearchOKBodyAO0 models.CybleComOdinAPIControllersV2IpservicesAPIResponse
	if err := swag.ReadJSON(raw, &postV2HostsSearchOKBodyAO0); err != nil {
		return err
	}
	o.CybleComOdinAPIControllersV2IpservicesAPIResponse = postV2HostsSearchOKBodyAO0

	// PostV2HostsSearchOKBodyAO1
	var dataPostV2HostsSearchOKBodyAO1 struct {
		Pagination *models.CybleComOdinAPIControllersV2IpservicesSearchPagination `json:" pagination,omitempty"`

		Data []*models.ServiceService `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataPostV2HostsSearchOKBodyAO1); err != nil {
		return err
	}

	o.Pagination = dataPostV2HostsSearchOKBodyAO1.Pagination

	o.Data = dataPostV2HostsSearchOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostV2HostsSearchOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postV2HostsSearchOKBodyAO0, err := swag.WriteJSON(o.CybleComOdinAPIControllersV2IpservicesAPIResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postV2HostsSearchOKBodyAO0)
	var dataPostV2HostsSearchOKBodyAO1 struct {
		Pagination *models.CybleComOdinAPIControllersV2IpservicesSearchPagination `json:" pagination,omitempty"`

		Data []*models.ServiceService `json:"data"`
	}

	dataPostV2HostsSearchOKBodyAO1.Pagination = o.Pagination

	dataPostV2HostsSearchOKBodyAO1.Data = o.Data

	jsonDataPostV2HostsSearchOKBodyAO1, errPostV2HostsSearchOKBodyAO1 := swag.WriteJSON(dataPostV2HostsSearchOKBodyAO1)
	if errPostV2HostsSearchOKBodyAO1 != nil {
		return nil, errPostV2HostsSearchOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostV2HostsSearchOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post v2 hosts search o k body
func (o *PostV2HostsSearchOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.CybleComOdinAPIControllersV2IpservicesAPIResponse
	if err := o.CybleComOdinAPIControllersV2IpservicesAPIResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostV2HostsSearchOKBody) validatePagination(formats strfmt.Registry) error {

	if swag.IsZero(o.Pagination) { // not required
		return nil
	}

	if o.Pagination != nil {
		if err := o.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postV2HostsSearchOK" + "." + " pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postV2HostsSearchOK" + "." + " pagination")
			}
			return err
		}
	}

	return nil
}

func (o *PostV2HostsSearchOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postV2HostsSearchOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postV2HostsSearchOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this post v2 hosts search o k body based on the context it is used
func (o *PostV2HostsSearchOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.CybleComOdinAPIControllersV2IpservicesAPIResponse
	if err := o.CybleComOdinAPIControllersV2IpservicesAPIResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostV2HostsSearchOKBody) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if o.Pagination != nil {

		if swag.IsZero(o.Pagination) { // not required
			return nil
		}

		if err := o.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postV2HostsSearchOK" + "." + " pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postV2HostsSearchOK" + "." + " pagination")
			}
			return err
		}
	}

	return nil
}

func (o *PostV2HostsSearchOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {

			if swag.IsZero(o.Data[i]) { // not required
				return nil
			}

			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postV2HostsSearchOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postV2HostsSearchOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostV2HostsSearchOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostV2HostsSearchOKBody) UnmarshalBinary(b []byte) error {
	var res PostV2HostsSearchOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
