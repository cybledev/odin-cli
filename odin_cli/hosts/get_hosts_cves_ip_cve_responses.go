// Code generated by go-swagger; DO NOT EDIT.

package hosts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cybledev/odin-cli/models"
)

// GetHostsCvesIPCveReader is a Reader for the GetHostsCvesIPCve structure.
type GetHostsCvesIPCveReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetHostsCvesIPCveReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetHostsCvesIPCveOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400,402,401:
		result := NewGetHostsCvesIPCveBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetHostsCvesIPCveRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetHostsCvesIPCveInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /hosts/cves/{ip}/{cve}] GetHostsCvesIPCve", response, response.Code())
	}
}

// NewGetHostsCvesIPCveOK creates a GetHostsCvesIPCveOK with default headers values
func NewGetHostsCvesIPCveOK() *GetHostsCvesIPCveOK {
	return &GetHostsCvesIPCveOK{}
}

/*
GetHostsCvesIPCveOK describes a response with status code 200, with default header values.

OK
*/
type GetHostsCvesIPCveOK struct {
	Payload *models.IpservicesIPCveResponse
}

// IsSuccess returns true when this get hosts cves Ip cve o k response has a 2xx status code
func (o *GetHostsCvesIPCveOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get hosts cves Ip cve o k response has a 3xx status code
func (o *GetHostsCvesIPCveOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get hosts cves Ip cve o k response has a 4xx status code
func (o *GetHostsCvesIPCveOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get hosts cves Ip cve o k response has a 5xx status code
func (o *GetHostsCvesIPCveOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get hosts cves Ip cve o k response a status code equal to that given
func (o *GetHostsCvesIPCveOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get hosts cves Ip cve o k response
func (o *GetHostsCvesIPCveOK) Code() int {
	return 200
}

func (o *GetHostsCvesIPCveOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /hosts/cves/{ip}/{cve}][%d] getHostsCvesIpCveOK %s", 200, payload)
}

func (o *GetHostsCvesIPCveOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /hosts/cves/{ip}/{cve}][%d] getHostsCvesIpCveOK %s", 200, payload)
}

func (o *GetHostsCvesIPCveOK) GetPayload() *models.IpservicesIPCveResponse {
	return o.Payload
}

func (o *GetHostsCvesIPCveOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IpservicesIPCveResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHostsCvesIPCveBadRequest creates a GetHostsCvesIPCveBadRequest with default headers values
func NewGetHostsCvesIPCveBadRequest() *GetHostsCvesIPCveBadRequest {
	return &GetHostsCvesIPCveBadRequest{}
}

/*
GetHostsCvesIPCveBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetHostsCvesIPCveBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get hosts cves Ip cve bad request response has a 2xx status code
func (o *GetHostsCvesIPCveBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get hosts cves Ip cve bad request response has a 3xx status code
func (o *GetHostsCvesIPCveBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get hosts cves Ip cve bad request response has a 4xx status code
func (o *GetHostsCvesIPCveBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get hosts cves Ip cve bad request response has a 5xx status code
func (o *GetHostsCvesIPCveBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get hosts cves Ip cve bad request response a status code equal to that given
func (o *GetHostsCvesIPCveBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get hosts cves Ip cve bad request response
func (o *GetHostsCvesIPCveBadRequest) Code() int {
	return 400
}

func (o *GetHostsCvesIPCveBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /hosts/cves/{ip}/{cve}][%d] getHostsCvesIpCveBadRequest %s", 400, payload)
}

func (o *GetHostsCvesIPCveBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /hosts/cves/{ip}/{cve}][%d] getHostsCvesIpCveBadRequest %s", 400, payload)
}

func (o *GetHostsCvesIPCveBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetHostsCvesIPCveBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHostsCvesIPCveRequestTimeout creates a GetHostsCvesIPCveRequestTimeout with default headers values
func NewGetHostsCvesIPCveRequestTimeout() *GetHostsCvesIPCveRequestTimeout {
	return &GetHostsCvesIPCveRequestTimeout{}
}

/*
GetHostsCvesIPCveRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type GetHostsCvesIPCveRequestTimeout struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get hosts cves Ip cve request timeout response has a 2xx status code
func (o *GetHostsCvesIPCveRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get hosts cves Ip cve request timeout response has a 3xx status code
func (o *GetHostsCvesIPCveRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get hosts cves Ip cve request timeout response has a 4xx status code
func (o *GetHostsCvesIPCveRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get hosts cves Ip cve request timeout response has a 5xx status code
func (o *GetHostsCvesIPCveRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get hosts cves Ip cve request timeout response a status code equal to that given
func (o *GetHostsCvesIPCveRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the get hosts cves Ip cve request timeout response
func (o *GetHostsCvesIPCveRequestTimeout) Code() int {
	return 408
}

func (o *GetHostsCvesIPCveRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /hosts/cves/{ip}/{cve}][%d] getHostsCvesIpCveRequestTimeout %s", 408, payload)
}

func (o *GetHostsCvesIPCveRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /hosts/cves/{ip}/{cve}][%d] getHostsCvesIpCveRequestTimeout %s", 408, payload)
}

func (o *GetHostsCvesIPCveRequestTimeout) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetHostsCvesIPCveRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHostsCvesIPCveInternalServerError creates a GetHostsCvesIPCveInternalServerError with default headers values
func NewGetHostsCvesIPCveInternalServerError() *GetHostsCvesIPCveInternalServerError {
	return &GetHostsCvesIPCveInternalServerError{}
}

/*
GetHostsCvesIPCveInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetHostsCvesIPCveInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get hosts cves Ip cve internal server error response has a 2xx status code
func (o *GetHostsCvesIPCveInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get hosts cves Ip cve internal server error response has a 3xx status code
func (o *GetHostsCvesIPCveInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get hosts cves Ip cve internal server error response has a 4xx status code
func (o *GetHostsCvesIPCveInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get hosts cves Ip cve internal server error response has a 5xx status code
func (o *GetHostsCvesIPCveInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get hosts cves Ip cve internal server error response a status code equal to that given
func (o *GetHostsCvesIPCveInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get hosts cves Ip cve internal server error response
func (o *GetHostsCvesIPCveInternalServerError) Code() int {
	return 500
}

func (o *GetHostsCvesIPCveInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /hosts/cves/{ip}/{cve}][%d] getHostsCvesIpCveInternalServerError %s", 500, payload)
}

func (o *GetHostsCvesIPCveInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /hosts/cves/{ip}/{cve}][%d] getHostsCvesIpCveInternalServerError %s", 500, payload)
}

func (o *GetHostsCvesIPCveInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetHostsCvesIPCveInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
