// Code generated by go-swagger; DO NOT EDIT.

package hosts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/cybledev/odin-cli/models"
)

// GetCvesAllIPPageReader is a Reader for the GetCvesAllIPPage structure.
type GetCvesAllIPPageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCvesAllIPPageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCvesAllIPPageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400,401:
		result := NewGetCvesAllIPPageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 402:
		result := NewGetCvesAllIPPagePaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetCvesAllIPPageRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCvesAllIPPageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /cves/all/{ip}/{page}] GetCvesAllIPPage", response, response.Code())
	}
}

// NewGetCvesAllIPPageOK creates a GetCvesAllIPPageOK with default headers values
func NewGetCvesAllIPPageOK() *GetCvesAllIPPageOK {
	return &GetCvesAllIPPageOK{}
}

/*
GetCvesAllIPPageOK describes a response with status code 200, with default header values.

OK
*/
type GetCvesAllIPPageOK struct {
	Payload *models.IpservicesIPCveResponse
}

// IsSuccess returns true when this get cves all Ip page o k response has a 2xx status code
func (o *GetCvesAllIPPageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get cves all Ip page o k response has a 3xx status code
func (o *GetCvesAllIPPageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cves all Ip page o k response has a 4xx status code
func (o *GetCvesAllIPPageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get cves all Ip page o k response has a 5xx status code
func (o *GetCvesAllIPPageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get cves all Ip page o k response a status code equal to that given
func (o *GetCvesAllIPPageOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get cves all Ip page o k response
func (o *GetCvesAllIPPageOK) Code() int {
	return 200
}

func (o *GetCvesAllIPPageOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cves/all/{ip}/{page}][%d] getCvesAllIpPageOK %s", 200, payload)
}

func (o *GetCvesAllIPPageOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cves/all/{ip}/{page}][%d] getCvesAllIpPageOK %s", 200, payload)
}

func (o *GetCvesAllIPPageOK) GetPayload() *models.IpservicesIPCveResponse {
	return o.Payload
}

func (o *GetCvesAllIPPageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IpservicesIPCveResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCvesAllIPPageBadRequest creates a GetCvesAllIPPageBadRequest with default headers values
func NewGetCvesAllIPPageBadRequest() *GetCvesAllIPPageBadRequest {
	return &GetCvesAllIPPageBadRequest{}
}

/*
GetCvesAllIPPageBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetCvesAllIPPageBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get cves all Ip page bad request response has a 2xx status code
func (o *GetCvesAllIPPageBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get cves all Ip page bad request response has a 3xx status code
func (o *GetCvesAllIPPageBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cves all Ip page bad request response has a 4xx status code
func (o *GetCvesAllIPPageBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get cves all Ip page bad request response has a 5xx status code
func (o *GetCvesAllIPPageBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get cves all Ip page bad request response a status code equal to that given
func (o *GetCvesAllIPPageBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get cves all Ip page bad request response
func (o *GetCvesAllIPPageBadRequest) Code() int {
	return 400
}

func (o *GetCvesAllIPPageBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cves/all/{ip}/{page}][%d] getCvesAllIpPageBadRequest %s", 400, payload)
}

func (o *GetCvesAllIPPageBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cves/all/{ip}/{page}][%d] getCvesAllIpPageBadRequest %s", 400, payload)
}

func (o *GetCvesAllIPPageBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetCvesAllIPPageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCvesAllIPPagePaymentRequired creates a GetCvesAllIPPagePaymentRequired with default headers values
func NewGetCvesAllIPPagePaymentRequired() *GetCvesAllIPPagePaymentRequired {
	return &GetCvesAllIPPagePaymentRequired{}
}

/*
GetCvesAllIPPagePaymentRequired describes a response with status code 402, with default header values.

Payment Required
*/
type GetCvesAllIPPagePaymentRequired struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get cves all Ip page payment required response has a 2xx status code
func (o *GetCvesAllIPPagePaymentRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get cves all Ip page payment required response has a 3xx status code
func (o *GetCvesAllIPPagePaymentRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cves all Ip page payment required response has a 4xx status code
func (o *GetCvesAllIPPagePaymentRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this get cves all Ip page payment required response has a 5xx status code
func (o *GetCvesAllIPPagePaymentRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this get cves all Ip page payment required response a status code equal to that given
func (o *GetCvesAllIPPagePaymentRequired) IsCode(code int) bool {
	return code == 402
}

// Code gets the status code for the get cves all Ip page payment required response
func (o *GetCvesAllIPPagePaymentRequired) Code() int {
	return 402
}

func (o *GetCvesAllIPPagePaymentRequired) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cves/all/{ip}/{page}][%d] getCvesAllIpPagePaymentRequired %s", 402, payload)
}

func (o *GetCvesAllIPPagePaymentRequired) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cves/all/{ip}/{page}][%d] getCvesAllIpPagePaymentRequired %s", 402, payload)
}

func (o *GetCvesAllIPPagePaymentRequired) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetCvesAllIPPagePaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCvesAllIPPageRequestTimeout creates a GetCvesAllIPPageRequestTimeout with default headers values
func NewGetCvesAllIPPageRequestTimeout() *GetCvesAllIPPageRequestTimeout {
	return &GetCvesAllIPPageRequestTimeout{}
}

/*
GetCvesAllIPPageRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type GetCvesAllIPPageRequestTimeout struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get cves all Ip page request timeout response has a 2xx status code
func (o *GetCvesAllIPPageRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get cves all Ip page request timeout response has a 3xx status code
func (o *GetCvesAllIPPageRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cves all Ip page request timeout response has a 4xx status code
func (o *GetCvesAllIPPageRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get cves all Ip page request timeout response has a 5xx status code
func (o *GetCvesAllIPPageRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get cves all Ip page request timeout response a status code equal to that given
func (o *GetCvesAllIPPageRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the get cves all Ip page request timeout response
func (o *GetCvesAllIPPageRequestTimeout) Code() int {
	return 408
}

func (o *GetCvesAllIPPageRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cves/all/{ip}/{page}][%d] getCvesAllIpPageRequestTimeout %s", 408, payload)
}

func (o *GetCvesAllIPPageRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cves/all/{ip}/{page}][%d] getCvesAllIpPageRequestTimeout %s", 408, payload)
}

func (o *GetCvesAllIPPageRequestTimeout) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetCvesAllIPPageRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCvesAllIPPageInternalServerError creates a GetCvesAllIPPageInternalServerError with default headers values
func NewGetCvesAllIPPageInternalServerError() *GetCvesAllIPPageInternalServerError {
	return &GetCvesAllIPPageInternalServerError{}
}

/*
GetCvesAllIPPageInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetCvesAllIPPageInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get cves all Ip page internal server error response has a 2xx status code
func (o *GetCvesAllIPPageInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get cves all Ip page internal server error response has a 3xx status code
func (o *GetCvesAllIPPageInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cves all Ip page internal server error response has a 4xx status code
func (o *GetCvesAllIPPageInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get cves all Ip page internal server error response has a 5xx status code
func (o *GetCvesAllIPPageInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get cves all Ip page internal server error response a status code equal to that given
func (o *GetCvesAllIPPageInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get cves all Ip page internal server error response
func (o *GetCvesAllIPPageInternalServerError) Code() int {
	return 500
}

func (o *GetCvesAllIPPageInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cves/all/{ip}/{page}][%d] getCvesAllIpPageInternalServerError %s", 500, payload)
}

func (o *GetCvesAllIPPageInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /cves/all/{ip}/{page}][%d] getCvesAllIpPageInternalServerError %s", 500, payload)
}

func (o *GetCvesAllIPPageInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetCvesAllIPPageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
