// Code generated by go-swagger; DO NOT EDIT.

package hosts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cybledev/odin-cli/models"
)

// PostV2HostsCountReader is a Reader for the PostV2HostsCount structure.
type PostV2HostsCountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostV2HostsCountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostV2HostsCountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400,401:
		result := NewPostV2HostsCountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 402:
		result := NewPostV2HostsCountPaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostV2HostsCountRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostV2HostsCountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /v2/hosts/count] PostV2HostsCount", response, response.Code())
	}
}

// NewPostV2HostsCountOK creates a PostV2HostsCountOK with default headers values
func NewPostV2HostsCountOK() *PostV2HostsCountOK {
	return &PostV2HostsCountOK{}
}

/*
PostV2HostsCountOK describes a response with status code 200, with default header values.

OK
*/
type PostV2HostsCountOK struct {
	Payload *PostV2HostsCountOKBody
}

// IsSuccess returns true when this post v2 hosts count o k response has a 2xx status code
func (o *PostV2HostsCountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post v2 hosts count o k response has a 3xx status code
func (o *PostV2HostsCountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v2 hosts count o k response has a 4xx status code
func (o *PostV2HostsCountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v2 hosts count o k response has a 5xx status code
func (o *PostV2HostsCountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post v2 hosts count o k response a status code equal to that given
func (o *PostV2HostsCountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post v2 hosts count o k response
func (o *PostV2HostsCountOK) Code() int {
	return 200
}

func (o *PostV2HostsCountOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/hosts/count][%d] postV2HostsCountOK %s", 200, payload)
}

func (o *PostV2HostsCountOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/hosts/count][%d] postV2HostsCountOK %s", 200, payload)
}

func (o *PostV2HostsCountOK) GetPayload() *PostV2HostsCountOKBody {
	return o.Payload
}

func (o *PostV2HostsCountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostV2HostsCountOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV2HostsCountBadRequest creates a PostV2HostsCountBadRequest with default headers values
func NewPostV2HostsCountBadRequest() *PostV2HostsCountBadRequest {
	return &PostV2HostsCountBadRequest{}
}

/*
PostV2HostsCountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostV2HostsCountBadRequest struct {
	Payload *models.CybleComOdinAPIControllersV2IpservicesErrorResponse
}

// IsSuccess returns true when this post v2 hosts count bad request response has a 2xx status code
func (o *PostV2HostsCountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v2 hosts count bad request response has a 3xx status code
func (o *PostV2HostsCountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v2 hosts count bad request response has a 4xx status code
func (o *PostV2HostsCountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v2 hosts count bad request response has a 5xx status code
func (o *PostV2HostsCountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post v2 hosts count bad request response a status code equal to that given
func (o *PostV2HostsCountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post v2 hosts count bad request response
func (o *PostV2HostsCountBadRequest) Code() int {
	return 400
}

func (o *PostV2HostsCountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/hosts/count][%d] postV2HostsCountBadRequest %s", 400, payload)
}

func (o *PostV2HostsCountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/hosts/count][%d] postV2HostsCountBadRequest %s", 400, payload)
}

func (o *PostV2HostsCountBadRequest) GetPayload() *models.CybleComOdinAPIControllersV2IpservicesErrorResponse {
	return o.Payload
}

func (o *PostV2HostsCountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CybleComOdinAPIControllersV2IpservicesErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV2HostsCountPaymentRequired creates a PostV2HostsCountPaymentRequired with default headers values
func NewPostV2HostsCountPaymentRequired() *PostV2HostsCountPaymentRequired {
	return &PostV2HostsCountPaymentRequired{}
}

/*
PostV2HostsCountPaymentRequired describes a response with status code 402, with default header values.

Payment Required
*/
type PostV2HostsCountPaymentRequired struct {
	Payload *models.CybleComOdinAPIControllersV2IpservicesErrorResponse
}

// IsSuccess returns true when this post v2 hosts count payment required response has a 2xx status code
func (o *PostV2HostsCountPaymentRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v2 hosts count payment required response has a 3xx status code
func (o *PostV2HostsCountPaymentRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v2 hosts count payment required response has a 4xx status code
func (o *PostV2HostsCountPaymentRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v2 hosts count payment required response has a 5xx status code
func (o *PostV2HostsCountPaymentRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this post v2 hosts count payment required response a status code equal to that given
func (o *PostV2HostsCountPaymentRequired) IsCode(code int) bool {
	return code == 402
}

// Code gets the status code for the post v2 hosts count payment required response
func (o *PostV2HostsCountPaymentRequired) Code() int {
	return 402
}

func (o *PostV2HostsCountPaymentRequired) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/hosts/count][%d] postV2HostsCountPaymentRequired %s", 402, payload)
}

func (o *PostV2HostsCountPaymentRequired) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/hosts/count][%d] postV2HostsCountPaymentRequired %s", 402, payload)
}

func (o *PostV2HostsCountPaymentRequired) GetPayload() *models.CybleComOdinAPIControllersV2IpservicesErrorResponse {
	return o.Payload
}

func (o *PostV2HostsCountPaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CybleComOdinAPIControllersV2IpservicesErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV2HostsCountRequestTimeout creates a PostV2HostsCountRequestTimeout with default headers values
func NewPostV2HostsCountRequestTimeout() *PostV2HostsCountRequestTimeout {
	return &PostV2HostsCountRequestTimeout{}
}

/*
PostV2HostsCountRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type PostV2HostsCountRequestTimeout struct {
	Payload *models.CybleComOdinAPIControllersV2IpservicesErrorResponse
}

// IsSuccess returns true when this post v2 hosts count request timeout response has a 2xx status code
func (o *PostV2HostsCountRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v2 hosts count request timeout response has a 3xx status code
func (o *PostV2HostsCountRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v2 hosts count request timeout response has a 4xx status code
func (o *PostV2HostsCountRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post v2 hosts count request timeout response has a 5xx status code
func (o *PostV2HostsCountRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post v2 hosts count request timeout response a status code equal to that given
func (o *PostV2HostsCountRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the post v2 hosts count request timeout response
func (o *PostV2HostsCountRequestTimeout) Code() int {
	return 408
}

func (o *PostV2HostsCountRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/hosts/count][%d] postV2HostsCountRequestTimeout %s", 408, payload)
}

func (o *PostV2HostsCountRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/hosts/count][%d] postV2HostsCountRequestTimeout %s", 408, payload)
}

func (o *PostV2HostsCountRequestTimeout) GetPayload() *models.CybleComOdinAPIControllersV2IpservicesErrorResponse {
	return o.Payload
}

func (o *PostV2HostsCountRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CybleComOdinAPIControllersV2IpservicesErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostV2HostsCountInternalServerError creates a PostV2HostsCountInternalServerError with default headers values
func NewPostV2HostsCountInternalServerError() *PostV2HostsCountInternalServerError {
	return &PostV2HostsCountInternalServerError{}
}

/*
PostV2HostsCountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostV2HostsCountInternalServerError struct {
	Payload *models.CybleComOdinAPIControllersV2IpservicesErrorResponse
}

// IsSuccess returns true when this post v2 hosts count internal server error response has a 2xx status code
func (o *PostV2HostsCountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post v2 hosts count internal server error response has a 3xx status code
func (o *PostV2HostsCountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post v2 hosts count internal server error response has a 4xx status code
func (o *PostV2HostsCountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post v2 hosts count internal server error response has a 5xx status code
func (o *PostV2HostsCountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post v2 hosts count internal server error response a status code equal to that given
func (o *PostV2HostsCountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post v2 hosts count internal server error response
func (o *PostV2HostsCountInternalServerError) Code() int {
	return 500
}

func (o *PostV2HostsCountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/hosts/count][%d] postV2HostsCountInternalServerError %s", 500, payload)
}

func (o *PostV2HostsCountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v2/hosts/count][%d] postV2HostsCountInternalServerError %s", 500, payload)
}

func (o *PostV2HostsCountInternalServerError) GetPayload() *models.CybleComOdinAPIControllersV2IpservicesErrorResponse {
	return o.Payload
}

func (o *PostV2HostsCountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CybleComOdinAPIControllersV2IpservicesErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostV2HostsCountOKBody post v2 hosts count o k body
swagger:model PostV2HostsCountOKBody
*/
type PostV2HostsCountOKBody struct {
	models.CybleComOdinAPIControllersV2IpservicesAPIResponse

	// data
	Data *models.CybleComOdinAPIControllersV2IpservicesCertCount `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostV2HostsCountOKBody) UnmarshalJSON(raw []byte) error {
	// PostV2HostsCountOKBodyAO0
	var postV2HostsCountOKBodyAO0 models.CybleComOdinAPIControllersV2IpservicesAPIResponse
	if err := swag.ReadJSON(raw, &postV2HostsCountOKBodyAO0); err != nil {
		return err
	}
	o.CybleComOdinAPIControllersV2IpservicesAPIResponse = postV2HostsCountOKBodyAO0

	// PostV2HostsCountOKBodyAO1
	var dataPostV2HostsCountOKBodyAO1 struct {
		Data *models.CybleComOdinAPIControllersV2IpservicesCertCount `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostV2HostsCountOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostV2HostsCountOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostV2HostsCountOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postV2HostsCountOKBodyAO0, err := swag.WriteJSON(o.CybleComOdinAPIControllersV2IpservicesAPIResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postV2HostsCountOKBodyAO0)
	var dataPostV2HostsCountOKBodyAO1 struct {
		Data *models.CybleComOdinAPIControllersV2IpservicesCertCount `json:"data,omitempty"`
	}

	dataPostV2HostsCountOKBodyAO1.Data = o.Data

	jsonDataPostV2HostsCountOKBodyAO1, errPostV2HostsCountOKBodyAO1 := swag.WriteJSON(dataPostV2HostsCountOKBodyAO1)
	if errPostV2HostsCountOKBodyAO1 != nil {
		return nil, errPostV2HostsCountOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostV2HostsCountOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post v2 hosts count o k body
func (o *PostV2HostsCountOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.CybleComOdinAPIControllersV2IpservicesAPIResponse
	if err := o.CybleComOdinAPIControllersV2IpservicesAPIResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostV2HostsCountOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postV2HostsCountOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postV2HostsCountOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post v2 hosts count o k body based on the context it is used
func (o *PostV2HostsCountOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.CybleComOdinAPIControllersV2IpservicesAPIResponse
	if err := o.CybleComOdinAPIControllersV2IpservicesAPIResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostV2HostsCountOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if swag.IsZero(o.Data) { // not required
			return nil
		}

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postV2HostsCountOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postV2HostsCountOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostV2HostsCountOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostV2HostsCountOKBody) UnmarshalBinary(b []byte) error {
	var res PostV2HostsCountOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
