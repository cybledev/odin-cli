// Code generated by go-swagger; DO NOT EDIT.

package hosts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cybledev/odin-cli/models"
)

// PostHostsSearchReader is a Reader for the PostHostsSearch structure.
type PostHostsSearchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostHostsSearchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostHostsSearchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400,402,401:
		result := NewPostHostsSearchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostHostsSearchRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostHostsSearchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /hosts/search] PostHostsSearch", response, response.Code())
	}
}

// NewPostHostsSearchOK creates a PostHostsSearchOK with default headers values
func NewPostHostsSearchOK() *PostHostsSearchOK {
	return &PostHostsSearchOK{}
}

/*
PostHostsSearchOK describes a response with status code 200, with default header values.

OK
*/
type PostHostsSearchOK struct {
	Payload *PostHostsSearchOKBody
}

// IsSuccess returns true when this post hosts search o k response has a 2xx status code
func (o *PostHostsSearchOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post hosts search o k response has a 3xx status code
func (o *PostHostsSearchOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post hosts search o k response has a 4xx status code
func (o *PostHostsSearchOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post hosts search o k response has a 5xx status code
func (o *PostHostsSearchOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post hosts search o k response a status code equal to that given
func (o *PostHostsSearchOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post hosts search o k response
func (o *PostHostsSearchOK) Code() int {
	return 200
}

func (o *PostHostsSearchOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /hosts/search][%d] postHostsSearchOK %s", 200, payload)
}

func (o *PostHostsSearchOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /hosts/search][%d] postHostsSearchOK %s", 200, payload)
}

func (o *PostHostsSearchOK) GetPayload() *PostHostsSearchOKBody {
	return o.Payload
}

func (o *PostHostsSearchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostHostsSearchOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostHostsSearchBadRequest creates a PostHostsSearchBadRequest with default headers values
func NewPostHostsSearchBadRequest() *PostHostsSearchBadRequest {
	return &PostHostsSearchBadRequest{}
}

/*
PostHostsSearchBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostHostsSearchBadRequest struct {
	Payload *models.IpservicesErrorResponse
}

// IsSuccess returns true when this post hosts search bad request response has a 2xx status code
func (o *PostHostsSearchBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post hosts search bad request response has a 3xx status code
func (o *PostHostsSearchBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post hosts search bad request response has a 4xx status code
func (o *PostHostsSearchBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post hosts search bad request response has a 5xx status code
func (o *PostHostsSearchBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post hosts search bad request response a status code equal to that given
func (o *PostHostsSearchBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post hosts search bad request response
func (o *PostHostsSearchBadRequest) Code() int {
	return 400
}

func (o *PostHostsSearchBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /hosts/search][%d] postHostsSearchBadRequest %s", 400, payload)
}

func (o *PostHostsSearchBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /hosts/search][%d] postHostsSearchBadRequest %s", 400, payload)
}

func (o *PostHostsSearchBadRequest) GetPayload() *models.IpservicesErrorResponse {
	return o.Payload
}

func (o *PostHostsSearchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IpservicesErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostHostsSearchRequestTimeout creates a PostHostsSearchRequestTimeout with default headers values
func NewPostHostsSearchRequestTimeout() *PostHostsSearchRequestTimeout {
	return &PostHostsSearchRequestTimeout{}
}

/*
PostHostsSearchRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type PostHostsSearchRequestTimeout struct {
	Payload *models.IpservicesErrorResponse
}

// IsSuccess returns true when this post hosts search request timeout response has a 2xx status code
func (o *PostHostsSearchRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post hosts search request timeout response has a 3xx status code
func (o *PostHostsSearchRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post hosts search request timeout response has a 4xx status code
func (o *PostHostsSearchRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post hosts search request timeout response has a 5xx status code
func (o *PostHostsSearchRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post hosts search request timeout response a status code equal to that given
func (o *PostHostsSearchRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the post hosts search request timeout response
func (o *PostHostsSearchRequestTimeout) Code() int {
	return 408
}

func (o *PostHostsSearchRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /hosts/search][%d] postHostsSearchRequestTimeout %s", 408, payload)
}

func (o *PostHostsSearchRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /hosts/search][%d] postHostsSearchRequestTimeout %s", 408, payload)
}

func (o *PostHostsSearchRequestTimeout) GetPayload() *models.IpservicesErrorResponse {
	return o.Payload
}

func (o *PostHostsSearchRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IpservicesErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostHostsSearchInternalServerError creates a PostHostsSearchInternalServerError with default headers values
func NewPostHostsSearchInternalServerError() *PostHostsSearchInternalServerError {
	return &PostHostsSearchInternalServerError{}
}

/*
PostHostsSearchInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostHostsSearchInternalServerError struct {
	Payload *models.IpservicesErrorResponse
}

// IsSuccess returns true when this post hosts search internal server error response has a 2xx status code
func (o *PostHostsSearchInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post hosts search internal server error response has a 3xx status code
func (o *PostHostsSearchInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post hosts search internal server error response has a 4xx status code
func (o *PostHostsSearchInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post hosts search internal server error response has a 5xx status code
func (o *PostHostsSearchInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post hosts search internal server error response a status code equal to that given
func (o *PostHostsSearchInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post hosts search internal server error response
func (o *PostHostsSearchInternalServerError) Code() int {
	return 500
}

func (o *PostHostsSearchInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /hosts/search][%d] postHostsSearchInternalServerError %s", 500, payload)
}

func (o *PostHostsSearchInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /hosts/search][%d] postHostsSearchInternalServerError %s", 500, payload)
}

func (o *PostHostsSearchInternalServerError) GetPayload() *models.IpservicesErrorResponse {
	return o.Payload
}

func (o *PostHostsSearchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IpservicesErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostHostsSearchOKBody post hosts search o k body
swagger:model PostHostsSearchOKBody
*/
type PostHostsSearchOKBody struct {
	models.IpservicesAPIResponse

	// data
	Data []interface{} `json:"data"`

	// pagination
	Pagination *models.IpservicesSearchPagination `json:"pagination,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostHostsSearchOKBody) UnmarshalJSON(raw []byte) error {
	// PostHostsSearchOKBodyAO0
	var postHostsSearchOKBodyAO0 models.IpservicesAPIResponse
	if err := swag.ReadJSON(raw, &postHostsSearchOKBodyAO0); err != nil {
		return err
	}
	o.IpservicesAPIResponse = postHostsSearchOKBodyAO0

	// PostHostsSearchOKBodyAO1
	var dataPostHostsSearchOKBodyAO1 struct {
		Data []interface{} `json:"data"`

		Pagination *models.IpservicesSearchPagination `json:"pagination,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostHostsSearchOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostHostsSearchOKBodyAO1.Data

	o.Pagination = dataPostHostsSearchOKBodyAO1.Pagination

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostHostsSearchOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postHostsSearchOKBodyAO0, err := swag.WriteJSON(o.IpservicesAPIResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postHostsSearchOKBodyAO0)
	var dataPostHostsSearchOKBodyAO1 struct {
		Data []interface{} `json:"data"`

		Pagination *models.IpservicesSearchPagination `json:"pagination,omitempty"`
	}

	dataPostHostsSearchOKBodyAO1.Data = o.Data

	dataPostHostsSearchOKBodyAO1.Pagination = o.Pagination

	jsonDataPostHostsSearchOKBodyAO1, errPostHostsSearchOKBodyAO1 := swag.WriteJSON(dataPostHostsSearchOKBodyAO1)
	if errPostHostsSearchOKBodyAO1 != nil {
		return nil, errPostHostsSearchOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostHostsSearchOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post hosts search o k body
func (o *PostHostsSearchOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.IpservicesAPIResponse
	if err := o.IpservicesAPIResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostHostsSearchOKBody) validatePagination(formats strfmt.Registry) error {

	if swag.IsZero(o.Pagination) { // not required
		return nil
	}

	if o.Pagination != nil {
		if err := o.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postHostsSearchOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postHostsSearchOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post hosts search o k body based on the context it is used
func (o *PostHostsSearchOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.IpservicesAPIResponse
	if err := o.IpservicesAPIResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostHostsSearchOKBody) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if o.Pagination != nil {

		if swag.IsZero(o.Pagination) { // not required
			return nil
		}

		if err := o.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postHostsSearchOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postHostsSearchOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostHostsSearchOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostHostsSearchOKBody) UnmarshalBinary(b []byte) error {
	var res PostHostsSearchOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
