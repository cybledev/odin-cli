// Code generated by go-swagger; DO NOT EDIT.

package hosts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cybledev/odin-cli/models"
)

// PostHostsSummaryReader is a Reader for the PostHostsSummary structure.
type PostHostsSummaryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostHostsSummaryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostHostsSummaryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400,402,401:
		result := NewPostHostsSummaryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewPostHostsSummaryRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostHostsSummaryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /hosts/summary] PostHostsSummary", response, response.Code())
	}
}

// NewPostHostsSummaryOK creates a PostHostsSummaryOK with default headers values
func NewPostHostsSummaryOK() *PostHostsSummaryOK {
	return &PostHostsSummaryOK{}
}

/*
PostHostsSummaryOK describes a response with status code 200, with default header values.

OK
*/
type PostHostsSummaryOK struct {
	Payload *PostHostsSummaryOKBody
}

// IsSuccess returns true when this post hosts summary o k response has a 2xx status code
func (o *PostHostsSummaryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post hosts summary o k response has a 3xx status code
func (o *PostHostsSummaryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post hosts summary o k response has a 4xx status code
func (o *PostHostsSummaryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post hosts summary o k response has a 5xx status code
func (o *PostHostsSummaryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post hosts summary o k response a status code equal to that given
func (o *PostHostsSummaryOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post hosts summary o k response
func (o *PostHostsSummaryOK) Code() int {
	return 200
}

func (o *PostHostsSummaryOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /hosts/summary][%d] postHostsSummaryOK %s", 200, payload)
}

func (o *PostHostsSummaryOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /hosts/summary][%d] postHostsSummaryOK %s", 200, payload)
}

func (o *PostHostsSummaryOK) GetPayload() *PostHostsSummaryOKBody {
	return o.Payload
}

func (o *PostHostsSummaryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostHostsSummaryOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostHostsSummaryBadRequest creates a PostHostsSummaryBadRequest with default headers values
func NewPostHostsSummaryBadRequest() *PostHostsSummaryBadRequest {
	return &PostHostsSummaryBadRequest{}
}

/*
PostHostsSummaryBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostHostsSummaryBadRequest struct {
	Payload *models.IpservicesErrorResponse
}

// IsSuccess returns true when this post hosts summary bad request response has a 2xx status code
func (o *PostHostsSummaryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post hosts summary bad request response has a 3xx status code
func (o *PostHostsSummaryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post hosts summary bad request response has a 4xx status code
func (o *PostHostsSummaryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post hosts summary bad request response has a 5xx status code
func (o *PostHostsSummaryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post hosts summary bad request response a status code equal to that given
func (o *PostHostsSummaryBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post hosts summary bad request response
func (o *PostHostsSummaryBadRequest) Code() int {
	return 400
}

func (o *PostHostsSummaryBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /hosts/summary][%d] postHostsSummaryBadRequest %s", 400, payload)
}

func (o *PostHostsSummaryBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /hosts/summary][%d] postHostsSummaryBadRequest %s", 400, payload)
}

func (o *PostHostsSummaryBadRequest) GetPayload() *models.IpservicesErrorResponse {
	return o.Payload
}

func (o *PostHostsSummaryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IpservicesErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostHostsSummaryRequestTimeout creates a PostHostsSummaryRequestTimeout with default headers values
func NewPostHostsSummaryRequestTimeout() *PostHostsSummaryRequestTimeout {
	return &PostHostsSummaryRequestTimeout{}
}

/*
PostHostsSummaryRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type PostHostsSummaryRequestTimeout struct {
	Payload *models.IpservicesErrorResponse
}

// IsSuccess returns true when this post hosts summary request timeout response has a 2xx status code
func (o *PostHostsSummaryRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post hosts summary request timeout response has a 3xx status code
func (o *PostHostsSummaryRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post hosts summary request timeout response has a 4xx status code
func (o *PostHostsSummaryRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this post hosts summary request timeout response has a 5xx status code
func (o *PostHostsSummaryRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this post hosts summary request timeout response a status code equal to that given
func (o *PostHostsSummaryRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the post hosts summary request timeout response
func (o *PostHostsSummaryRequestTimeout) Code() int {
	return 408
}

func (o *PostHostsSummaryRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /hosts/summary][%d] postHostsSummaryRequestTimeout %s", 408, payload)
}

func (o *PostHostsSummaryRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /hosts/summary][%d] postHostsSummaryRequestTimeout %s", 408, payload)
}

func (o *PostHostsSummaryRequestTimeout) GetPayload() *models.IpservicesErrorResponse {
	return o.Payload
}

func (o *PostHostsSummaryRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IpservicesErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostHostsSummaryInternalServerError creates a PostHostsSummaryInternalServerError with default headers values
func NewPostHostsSummaryInternalServerError() *PostHostsSummaryInternalServerError {
	return &PostHostsSummaryInternalServerError{}
}

/*
PostHostsSummaryInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostHostsSummaryInternalServerError struct {
	Payload *models.IpservicesErrorResponse
}

// IsSuccess returns true when this post hosts summary internal server error response has a 2xx status code
func (o *PostHostsSummaryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post hosts summary internal server error response has a 3xx status code
func (o *PostHostsSummaryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post hosts summary internal server error response has a 4xx status code
func (o *PostHostsSummaryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post hosts summary internal server error response has a 5xx status code
func (o *PostHostsSummaryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post hosts summary internal server error response a status code equal to that given
func (o *PostHostsSummaryInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post hosts summary internal server error response
func (o *PostHostsSummaryInternalServerError) Code() int {
	return 500
}

func (o *PostHostsSummaryInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /hosts/summary][%d] postHostsSummaryInternalServerError %s", 500, payload)
}

func (o *PostHostsSummaryInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /hosts/summary][%d] postHostsSummaryInternalServerError %s", 500, payload)
}

func (o *PostHostsSummaryInternalServerError) GetPayload() *models.IpservicesErrorResponse {
	return o.Payload
}

func (o *PostHostsSummaryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.IpservicesErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostHostsSummaryOKBody post hosts summary o k body
swagger:model PostHostsSummaryOKBody
*/
type PostHostsSummaryOKBody struct {
	models.IpservicesAPIResponse

	// data
	Data *models.EshandlerAggregate `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostHostsSummaryOKBody) UnmarshalJSON(raw []byte) error {
	// PostHostsSummaryOKBodyAO0
	var postHostsSummaryOKBodyAO0 models.IpservicesAPIResponse
	if err := swag.ReadJSON(raw, &postHostsSummaryOKBodyAO0); err != nil {
		return err
	}
	o.IpservicesAPIResponse = postHostsSummaryOKBodyAO0

	// PostHostsSummaryOKBodyAO1
	var dataPostHostsSummaryOKBodyAO1 struct {
		Data *models.EshandlerAggregate `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostHostsSummaryOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostHostsSummaryOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostHostsSummaryOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postHostsSummaryOKBodyAO0, err := swag.WriteJSON(o.IpservicesAPIResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postHostsSummaryOKBodyAO0)
	var dataPostHostsSummaryOKBodyAO1 struct {
		Data *models.EshandlerAggregate `json:"data,omitempty"`
	}

	dataPostHostsSummaryOKBodyAO1.Data = o.Data

	jsonDataPostHostsSummaryOKBodyAO1, errPostHostsSummaryOKBodyAO1 := swag.WriteJSON(dataPostHostsSummaryOKBodyAO1)
	if errPostHostsSummaryOKBodyAO1 != nil {
		return nil, errPostHostsSummaryOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostHostsSummaryOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post hosts summary o k body
func (o *PostHostsSummaryOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.IpservicesAPIResponse
	if err := o.IpservicesAPIResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostHostsSummaryOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postHostsSummaryOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postHostsSummaryOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post hosts summary o k body based on the context it is used
func (o *PostHostsSummaryOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.IpservicesAPIResponse
	if err := o.IpservicesAPIResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostHostsSummaryOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if swag.IsZero(o.Data) { // not required
			return nil
		}

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postHostsSummaryOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postHostsSummaryOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostHostsSummaryOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostHostsSummaryOKBody) UnmarshalBinary(b []byte) error {
	var res PostHostsSummaryOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
