// Code generated by go-swagger; DO NOT EDIT.

package hosts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cybledev/odin-cli/models"
)

// GetHostsExploitsIPCveReader is a Reader for the GetHostsExploitsIPCve structure.
type GetHostsExploitsIPCveReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetHostsExploitsIPCveReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetHostsExploitsIPCveOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400,402,401:
		result := NewGetHostsExploitsIPCveBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetHostsExploitsIPCveRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetHostsExploitsIPCveInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /hosts/exploits/{ip}/{cve}] GetHostsExploitsIPCve", response, response.Code())
	}
}

// NewGetHostsExploitsIPCveOK creates a GetHostsExploitsIPCveOK with default headers values
func NewGetHostsExploitsIPCveOK() *GetHostsExploitsIPCveOK {
	return &GetHostsExploitsIPCveOK{}
}

/*
GetHostsExploitsIPCveOK describes a response with status code 200, with default header values.

OK
*/
type GetHostsExploitsIPCveOK struct {
	Payload *GetHostsExploitsIPCveOKBody
}

// IsSuccess returns true when this get hosts exploits Ip cve o k response has a 2xx status code
func (o *GetHostsExploitsIPCveOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get hosts exploits Ip cve o k response has a 3xx status code
func (o *GetHostsExploitsIPCveOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get hosts exploits Ip cve o k response has a 4xx status code
func (o *GetHostsExploitsIPCveOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get hosts exploits Ip cve o k response has a 5xx status code
func (o *GetHostsExploitsIPCveOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get hosts exploits Ip cve o k response a status code equal to that given
func (o *GetHostsExploitsIPCveOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get hosts exploits Ip cve o k response
func (o *GetHostsExploitsIPCveOK) Code() int {
	return 200
}

func (o *GetHostsExploitsIPCveOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /hosts/exploits/{ip}/{cve}][%d] getHostsExploitsIpCveOK %s", 200, payload)
}

func (o *GetHostsExploitsIPCveOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /hosts/exploits/{ip}/{cve}][%d] getHostsExploitsIpCveOK %s", 200, payload)
}

func (o *GetHostsExploitsIPCveOK) GetPayload() *GetHostsExploitsIPCveOKBody {
	return o.Payload
}

func (o *GetHostsExploitsIPCveOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetHostsExploitsIPCveOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHostsExploitsIPCveBadRequest creates a GetHostsExploitsIPCveBadRequest with default headers values
func NewGetHostsExploitsIPCveBadRequest() *GetHostsExploitsIPCveBadRequest {
	return &GetHostsExploitsIPCveBadRequest{}
}

/*
GetHostsExploitsIPCveBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetHostsExploitsIPCveBadRequest struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get hosts exploits Ip cve bad request response has a 2xx status code
func (o *GetHostsExploitsIPCveBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get hosts exploits Ip cve bad request response has a 3xx status code
func (o *GetHostsExploitsIPCveBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get hosts exploits Ip cve bad request response has a 4xx status code
func (o *GetHostsExploitsIPCveBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get hosts exploits Ip cve bad request response has a 5xx status code
func (o *GetHostsExploitsIPCveBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get hosts exploits Ip cve bad request response a status code equal to that given
func (o *GetHostsExploitsIPCveBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get hosts exploits Ip cve bad request response
func (o *GetHostsExploitsIPCveBadRequest) Code() int {
	return 400
}

func (o *GetHostsExploitsIPCveBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /hosts/exploits/{ip}/{cve}][%d] getHostsExploitsIpCveBadRequest %s", 400, payload)
}

func (o *GetHostsExploitsIPCveBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /hosts/exploits/{ip}/{cve}][%d] getHostsExploitsIpCveBadRequest %s", 400, payload)
}

func (o *GetHostsExploitsIPCveBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetHostsExploitsIPCveBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHostsExploitsIPCveRequestTimeout creates a GetHostsExploitsIPCveRequestTimeout with default headers values
func NewGetHostsExploitsIPCveRequestTimeout() *GetHostsExploitsIPCveRequestTimeout {
	return &GetHostsExploitsIPCveRequestTimeout{}
}

/*
GetHostsExploitsIPCveRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type GetHostsExploitsIPCveRequestTimeout struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get hosts exploits Ip cve request timeout response has a 2xx status code
func (o *GetHostsExploitsIPCveRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get hosts exploits Ip cve request timeout response has a 3xx status code
func (o *GetHostsExploitsIPCveRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get hosts exploits Ip cve request timeout response has a 4xx status code
func (o *GetHostsExploitsIPCveRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get hosts exploits Ip cve request timeout response has a 5xx status code
func (o *GetHostsExploitsIPCveRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get hosts exploits Ip cve request timeout response a status code equal to that given
func (o *GetHostsExploitsIPCveRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the get hosts exploits Ip cve request timeout response
func (o *GetHostsExploitsIPCveRequestTimeout) Code() int {
	return 408
}

func (o *GetHostsExploitsIPCveRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /hosts/exploits/{ip}/{cve}][%d] getHostsExploitsIpCveRequestTimeout %s", 408, payload)
}

func (o *GetHostsExploitsIPCveRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /hosts/exploits/{ip}/{cve}][%d] getHostsExploitsIpCveRequestTimeout %s", 408, payload)
}

func (o *GetHostsExploitsIPCveRequestTimeout) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetHostsExploitsIPCveRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHostsExploitsIPCveInternalServerError creates a GetHostsExploitsIPCveInternalServerError with default headers values
func NewGetHostsExploitsIPCveInternalServerError() *GetHostsExploitsIPCveInternalServerError {
	return &GetHostsExploitsIPCveInternalServerError{}
}

/*
GetHostsExploitsIPCveInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetHostsExploitsIPCveInternalServerError struct {
	Payload *models.ErrorResponse
}

// IsSuccess returns true when this get hosts exploits Ip cve internal server error response has a 2xx status code
func (o *GetHostsExploitsIPCveInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get hosts exploits Ip cve internal server error response has a 3xx status code
func (o *GetHostsExploitsIPCveInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get hosts exploits Ip cve internal server error response has a 4xx status code
func (o *GetHostsExploitsIPCveInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get hosts exploits Ip cve internal server error response has a 5xx status code
func (o *GetHostsExploitsIPCveInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get hosts exploits Ip cve internal server error response a status code equal to that given
func (o *GetHostsExploitsIPCveInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get hosts exploits Ip cve internal server error response
func (o *GetHostsExploitsIPCveInternalServerError) Code() int {
	return 500
}

func (o *GetHostsExploitsIPCveInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /hosts/exploits/{ip}/{cve}][%d] getHostsExploitsIpCveInternalServerError %s", 500, payload)
}

func (o *GetHostsExploitsIPCveInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /hosts/exploits/{ip}/{cve}][%d] getHostsExploitsIpCveInternalServerError %s", 500, payload)
}

func (o *GetHostsExploitsIPCveInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *GetHostsExploitsIPCveInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetHostsExploitsIPCveOKBody get hosts exploits IP cve o k body
swagger:model GetHostsExploitsIPCveOKBody
*/
type GetHostsExploitsIPCveOKBody struct {
	models.APIResponse

	// data
	Data []*models.VisionExploitDetails `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetHostsExploitsIPCveOKBody) UnmarshalJSON(raw []byte) error {
	// GetHostsExploitsIPCveOKBodyAO0
	var getHostsExploitsIPCveOKBodyAO0 models.APIResponse
	if err := swag.ReadJSON(raw, &getHostsExploitsIPCveOKBodyAO0); err != nil {
		return err
	}
	o.APIResponse = getHostsExploitsIPCveOKBodyAO0

	// GetHostsExploitsIPCveOKBodyAO1
	var dataGetHostsExploitsIPCveOKBodyAO1 struct {
		Data []*models.VisionExploitDetails `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataGetHostsExploitsIPCveOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetHostsExploitsIPCveOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetHostsExploitsIPCveOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getHostsExploitsIPCveOKBodyAO0, err := swag.WriteJSON(o.APIResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getHostsExploitsIPCveOKBodyAO0)
	var dataGetHostsExploitsIPCveOKBodyAO1 struct {
		Data []*models.VisionExploitDetails `json:"data"`
	}

	dataGetHostsExploitsIPCveOKBodyAO1.Data = o.Data

	jsonDataGetHostsExploitsIPCveOKBodyAO1, errGetHostsExploitsIPCveOKBodyAO1 := swag.WriteJSON(dataGetHostsExploitsIPCveOKBodyAO1)
	if errGetHostsExploitsIPCveOKBodyAO1 != nil {
		return nil, errGetHostsExploitsIPCveOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetHostsExploitsIPCveOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get hosts exploits IP cve o k body
func (o *GetHostsExploitsIPCveOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.APIResponse
	if err := o.APIResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetHostsExploitsIPCveOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getHostsExploitsIpCveOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getHostsExploitsIpCveOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get hosts exploits IP cve o k body based on the context it is used
func (o *GetHostsExploitsIPCveOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.APIResponse
	if err := o.APIResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetHostsExploitsIPCveOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {

			if swag.IsZero(o.Data[i]) { // not required
				return nil
			}

			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getHostsExploitsIpCveOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getHostsExploitsIpCveOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetHostsExploitsIPCveOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetHostsExploitsIPCveOKBody) UnmarshalBinary(b []byte) error {
	var res GetHostsExploitsIPCveOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
