// Code generated by go-swagger; DO NOT EDIT.

package dns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cybledev/odin-cli/models"
)

// GetDomainWhoisDomainNameIsRegisteredReader is a Reader for the GetDomainWhoisDomainNameIsRegistered structure.
type GetDomainWhoisDomainNameIsRegisteredReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDomainWhoisDomainNameIsRegisteredReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDomainWhoisDomainNameIsRegisteredOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400,401:
		result := NewGetDomainWhoisDomainNameIsRegisteredBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 402:
		result := NewGetDomainWhoisDomainNameIsRegisteredPaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetDomainWhoisDomainNameIsRegisteredRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDomainWhoisDomainNameIsRegisteredInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /domain/whois/{domain-name}/is-registered] GetDomainWhoisDomainNameIsRegistered", response, response.Code())
	}
}

// NewGetDomainWhoisDomainNameIsRegisteredOK creates a GetDomainWhoisDomainNameIsRegisteredOK with default headers values
func NewGetDomainWhoisDomainNameIsRegisteredOK() *GetDomainWhoisDomainNameIsRegisteredOK {
	return &GetDomainWhoisDomainNameIsRegisteredOK{}
}

/*
GetDomainWhoisDomainNameIsRegisteredOK describes a response with status code 200, with default header values.

OK
*/
type GetDomainWhoisDomainNameIsRegisteredOK struct {
	Payload *GetDomainWhoisDomainNameIsRegisteredOKBody
}

// IsSuccess returns true when this get domain whois domain name is registered o k response has a 2xx status code
func (o *GetDomainWhoisDomainNameIsRegisteredOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get domain whois domain name is registered o k response has a 3xx status code
func (o *GetDomainWhoisDomainNameIsRegisteredOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domain whois domain name is registered o k response has a 4xx status code
func (o *GetDomainWhoisDomainNameIsRegisteredOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get domain whois domain name is registered o k response has a 5xx status code
func (o *GetDomainWhoisDomainNameIsRegisteredOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get domain whois domain name is registered o k response a status code equal to that given
func (o *GetDomainWhoisDomainNameIsRegisteredOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get domain whois domain name is registered o k response
func (o *GetDomainWhoisDomainNameIsRegisteredOK) Code() int {
	return 200
}

func (o *GetDomainWhoisDomainNameIsRegisteredOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}/is-registered][%d] getDomainWhoisDomainNameIsRegisteredOK %s", 200, payload)
}

func (o *GetDomainWhoisDomainNameIsRegisteredOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}/is-registered][%d] getDomainWhoisDomainNameIsRegisteredOK %s", 200, payload)
}

func (o *GetDomainWhoisDomainNameIsRegisteredOK) GetPayload() *GetDomainWhoisDomainNameIsRegisteredOKBody {
	return o.Payload
}

func (o *GetDomainWhoisDomainNameIsRegisteredOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetDomainWhoisDomainNameIsRegisteredOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomainWhoisDomainNameIsRegisteredBadRequest creates a GetDomainWhoisDomainNameIsRegisteredBadRequest with default headers values
func NewGetDomainWhoisDomainNameIsRegisteredBadRequest() *GetDomainWhoisDomainNameIsRegisteredBadRequest {
	return &GetDomainWhoisDomainNameIsRegisteredBadRequest{}
}

/*
GetDomainWhoisDomainNameIsRegisteredBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetDomainWhoisDomainNameIsRegisteredBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this get domain whois domain name is registered bad request response has a 2xx status code
func (o *GetDomainWhoisDomainNameIsRegisteredBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domain whois domain name is registered bad request response has a 3xx status code
func (o *GetDomainWhoisDomainNameIsRegisteredBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domain whois domain name is registered bad request response has a 4xx status code
func (o *GetDomainWhoisDomainNameIsRegisteredBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get domain whois domain name is registered bad request response has a 5xx status code
func (o *GetDomainWhoisDomainNameIsRegisteredBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get domain whois domain name is registered bad request response a status code equal to that given
func (o *GetDomainWhoisDomainNameIsRegisteredBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get domain whois domain name is registered bad request response
func (o *GetDomainWhoisDomainNameIsRegisteredBadRequest) Code() int {
	return 400
}

func (o *GetDomainWhoisDomainNameIsRegisteredBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}/is-registered][%d] getDomainWhoisDomainNameIsRegisteredBadRequest %s", 400, payload)
}

func (o *GetDomainWhoisDomainNameIsRegisteredBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}/is-registered][%d] getDomainWhoisDomainNameIsRegisteredBadRequest %s", 400, payload)
}

func (o *GetDomainWhoisDomainNameIsRegisteredBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *GetDomainWhoisDomainNameIsRegisteredBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomainWhoisDomainNameIsRegisteredPaymentRequired creates a GetDomainWhoisDomainNameIsRegisteredPaymentRequired with default headers values
func NewGetDomainWhoisDomainNameIsRegisteredPaymentRequired() *GetDomainWhoisDomainNameIsRegisteredPaymentRequired {
	return &GetDomainWhoisDomainNameIsRegisteredPaymentRequired{}
}

/*
GetDomainWhoisDomainNameIsRegisteredPaymentRequired describes a response with status code 402, with default header values.

Payment Required
*/
type GetDomainWhoisDomainNameIsRegisteredPaymentRequired struct {
	Payload interface{}
}

// IsSuccess returns true when this get domain whois domain name is registered payment required response has a 2xx status code
func (o *GetDomainWhoisDomainNameIsRegisteredPaymentRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domain whois domain name is registered payment required response has a 3xx status code
func (o *GetDomainWhoisDomainNameIsRegisteredPaymentRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domain whois domain name is registered payment required response has a 4xx status code
func (o *GetDomainWhoisDomainNameIsRegisteredPaymentRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this get domain whois domain name is registered payment required response has a 5xx status code
func (o *GetDomainWhoisDomainNameIsRegisteredPaymentRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this get domain whois domain name is registered payment required response a status code equal to that given
func (o *GetDomainWhoisDomainNameIsRegisteredPaymentRequired) IsCode(code int) bool {
	return code == 402
}

// Code gets the status code for the get domain whois domain name is registered payment required response
func (o *GetDomainWhoisDomainNameIsRegisteredPaymentRequired) Code() int {
	return 402
}

func (o *GetDomainWhoisDomainNameIsRegisteredPaymentRequired) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}/is-registered][%d] getDomainWhoisDomainNameIsRegisteredPaymentRequired %s", 402, payload)
}

func (o *GetDomainWhoisDomainNameIsRegisteredPaymentRequired) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}/is-registered][%d] getDomainWhoisDomainNameIsRegisteredPaymentRequired %s", 402, payload)
}

func (o *GetDomainWhoisDomainNameIsRegisteredPaymentRequired) GetPayload() interface{} {
	return o.Payload
}

func (o *GetDomainWhoisDomainNameIsRegisteredPaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomainWhoisDomainNameIsRegisteredRequestTimeout creates a GetDomainWhoisDomainNameIsRegisteredRequestTimeout with default headers values
func NewGetDomainWhoisDomainNameIsRegisteredRequestTimeout() *GetDomainWhoisDomainNameIsRegisteredRequestTimeout {
	return &GetDomainWhoisDomainNameIsRegisteredRequestTimeout{}
}

/*
GetDomainWhoisDomainNameIsRegisteredRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type GetDomainWhoisDomainNameIsRegisteredRequestTimeout struct {
	Payload interface{}
}

// IsSuccess returns true when this get domain whois domain name is registered request timeout response has a 2xx status code
func (o *GetDomainWhoisDomainNameIsRegisteredRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domain whois domain name is registered request timeout response has a 3xx status code
func (o *GetDomainWhoisDomainNameIsRegisteredRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domain whois domain name is registered request timeout response has a 4xx status code
func (o *GetDomainWhoisDomainNameIsRegisteredRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get domain whois domain name is registered request timeout response has a 5xx status code
func (o *GetDomainWhoisDomainNameIsRegisteredRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get domain whois domain name is registered request timeout response a status code equal to that given
func (o *GetDomainWhoisDomainNameIsRegisteredRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the get domain whois domain name is registered request timeout response
func (o *GetDomainWhoisDomainNameIsRegisteredRequestTimeout) Code() int {
	return 408
}

func (o *GetDomainWhoisDomainNameIsRegisteredRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}/is-registered][%d] getDomainWhoisDomainNameIsRegisteredRequestTimeout %s", 408, payload)
}

func (o *GetDomainWhoisDomainNameIsRegisteredRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}/is-registered][%d] getDomainWhoisDomainNameIsRegisteredRequestTimeout %s", 408, payload)
}

func (o *GetDomainWhoisDomainNameIsRegisteredRequestTimeout) GetPayload() interface{} {
	return o.Payload
}

func (o *GetDomainWhoisDomainNameIsRegisteredRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomainWhoisDomainNameIsRegisteredInternalServerError creates a GetDomainWhoisDomainNameIsRegisteredInternalServerError with default headers values
func NewGetDomainWhoisDomainNameIsRegisteredInternalServerError() *GetDomainWhoisDomainNameIsRegisteredInternalServerError {
	return &GetDomainWhoisDomainNameIsRegisteredInternalServerError{}
}

/*
GetDomainWhoisDomainNameIsRegisteredInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetDomainWhoisDomainNameIsRegisteredInternalServerError struct {
	Payload interface{}
}

// IsSuccess returns true when this get domain whois domain name is registered internal server error response has a 2xx status code
func (o *GetDomainWhoisDomainNameIsRegisteredInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domain whois domain name is registered internal server error response has a 3xx status code
func (o *GetDomainWhoisDomainNameIsRegisteredInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domain whois domain name is registered internal server error response has a 4xx status code
func (o *GetDomainWhoisDomainNameIsRegisteredInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get domain whois domain name is registered internal server error response has a 5xx status code
func (o *GetDomainWhoisDomainNameIsRegisteredInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get domain whois domain name is registered internal server error response a status code equal to that given
func (o *GetDomainWhoisDomainNameIsRegisteredInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get domain whois domain name is registered internal server error response
func (o *GetDomainWhoisDomainNameIsRegisteredInternalServerError) Code() int {
	return 500
}

func (o *GetDomainWhoisDomainNameIsRegisteredInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}/is-registered][%d] getDomainWhoisDomainNameIsRegisteredInternalServerError %s", 500, payload)
}

func (o *GetDomainWhoisDomainNameIsRegisteredInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}/is-registered][%d] getDomainWhoisDomainNameIsRegisteredInternalServerError %s", 500, payload)
}

func (o *GetDomainWhoisDomainNameIsRegisteredInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *GetDomainWhoisDomainNameIsRegisteredInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetDomainWhoisDomainNameIsRegisteredOKBody get domain whois domain name is registered o k body
swagger:model GetDomainWhoisDomainNameIsRegisteredOKBody
*/
type GetDomainWhoisDomainNameIsRegisteredOKBody struct {
	models.SchemaAPIResponse

	// data
	Data []*models.SchemaDomainWhoisResponse `json:"data"`

	// meta
	Meta *models.SchemaPaginationMeta `json:"meta,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetDomainWhoisDomainNameIsRegisteredOKBody) UnmarshalJSON(raw []byte) error {
	// GetDomainWhoisDomainNameIsRegisteredOKBodyAO0
	var getDomainWhoisDomainNameIsRegisteredOKBodyAO0 models.SchemaAPIResponse
	if err := swag.ReadJSON(raw, &getDomainWhoisDomainNameIsRegisteredOKBodyAO0); err != nil {
		return err
	}
	o.SchemaAPIResponse = getDomainWhoisDomainNameIsRegisteredOKBodyAO0

	// GetDomainWhoisDomainNameIsRegisteredOKBodyAO1
	var dataGetDomainWhoisDomainNameIsRegisteredOKBodyAO1 struct {
		Data []*models.SchemaDomainWhoisResponse `json:"data"`

		Meta *models.SchemaPaginationMeta `json:"meta,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataGetDomainWhoisDomainNameIsRegisteredOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetDomainWhoisDomainNameIsRegisteredOKBodyAO1.Data

	o.Meta = dataGetDomainWhoisDomainNameIsRegisteredOKBodyAO1.Meta

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetDomainWhoisDomainNameIsRegisteredOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getDomainWhoisDomainNameIsRegisteredOKBodyAO0, err := swag.WriteJSON(o.SchemaAPIResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getDomainWhoisDomainNameIsRegisteredOKBodyAO0)
	var dataGetDomainWhoisDomainNameIsRegisteredOKBodyAO1 struct {
		Data []*models.SchemaDomainWhoisResponse `json:"data"`

		Meta *models.SchemaPaginationMeta `json:"meta,omitempty"`
	}

	dataGetDomainWhoisDomainNameIsRegisteredOKBodyAO1.Data = o.Data

	dataGetDomainWhoisDomainNameIsRegisteredOKBodyAO1.Meta = o.Meta

	jsonDataGetDomainWhoisDomainNameIsRegisteredOKBodyAO1, errGetDomainWhoisDomainNameIsRegisteredOKBodyAO1 := swag.WriteJSON(dataGetDomainWhoisDomainNameIsRegisteredOKBodyAO1)
	if errGetDomainWhoisDomainNameIsRegisteredOKBodyAO1 != nil {
		return nil, errGetDomainWhoisDomainNameIsRegisteredOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetDomainWhoisDomainNameIsRegisteredOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get domain whois domain name is registered o k body
func (o *GetDomainWhoisDomainNameIsRegisteredOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SchemaAPIResponse
	if err := o.SchemaAPIResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDomainWhoisDomainNameIsRegisteredOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDomainWhoisDomainNameIsRegisteredOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getDomainWhoisDomainNameIsRegisteredOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetDomainWhoisDomainNameIsRegisteredOKBody) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(o.Meta) { // not required
		return nil
	}

	if o.Meta != nil {
		if err := o.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDomainWhoisDomainNameIsRegisteredOK" + "." + "meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDomainWhoisDomainNameIsRegisteredOK" + "." + "meta")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get domain whois domain name is registered o k body based on the context it is used
func (o *GetDomainWhoisDomainNameIsRegisteredOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SchemaAPIResponse
	if err := o.SchemaAPIResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDomainWhoisDomainNameIsRegisteredOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {

			if swag.IsZero(o.Data[i]) { // not required
				return nil
			}

			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDomainWhoisDomainNameIsRegisteredOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getDomainWhoisDomainNameIsRegisteredOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetDomainWhoisDomainNameIsRegisteredOKBody) contextValidateMeta(ctx context.Context, formats strfmt.Registry) error {

	if o.Meta != nil {

		if swag.IsZero(o.Meta) { // not required
			return nil
		}

		if err := o.Meta.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDomainWhoisDomainNameIsRegisteredOK" + "." + "meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDomainWhoisDomainNameIsRegisteredOK" + "." + "meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDomainWhoisDomainNameIsRegisteredOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDomainWhoisDomainNameIsRegisteredOKBody) UnmarshalBinary(b []byte) error {
	var res GetDomainWhoisDomainNameIsRegisteredOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
