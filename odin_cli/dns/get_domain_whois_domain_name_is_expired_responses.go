// Code generated by go-swagger; DO NOT EDIT.

package dns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cybledev/odin-cli/models"
)

// GetDomainWhoisDomainNameIsExpiredReader is a Reader for the GetDomainWhoisDomainNameIsExpired structure.
type GetDomainWhoisDomainNameIsExpiredReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDomainWhoisDomainNameIsExpiredReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDomainWhoisDomainNameIsExpiredOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400,401:
		result := NewGetDomainWhoisDomainNameIsExpiredBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 402:
		result := NewGetDomainWhoisDomainNameIsExpiredPaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetDomainWhoisDomainNameIsExpiredRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDomainWhoisDomainNameIsExpiredInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /domain/whois/{domain-name}/is-expired] GetDomainWhoisDomainNameIsExpired", response, response.Code())
	}
}

// NewGetDomainWhoisDomainNameIsExpiredOK creates a GetDomainWhoisDomainNameIsExpiredOK with default headers values
func NewGetDomainWhoisDomainNameIsExpiredOK() *GetDomainWhoisDomainNameIsExpiredOK {
	return &GetDomainWhoisDomainNameIsExpiredOK{}
}

/*
GetDomainWhoisDomainNameIsExpiredOK describes a response with status code 200, with default header values.

OK
*/
type GetDomainWhoisDomainNameIsExpiredOK struct {
	Payload *GetDomainWhoisDomainNameIsExpiredOKBody
}

// IsSuccess returns true when this get domain whois domain name is expired o k response has a 2xx status code
func (o *GetDomainWhoisDomainNameIsExpiredOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get domain whois domain name is expired o k response has a 3xx status code
func (o *GetDomainWhoisDomainNameIsExpiredOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domain whois domain name is expired o k response has a 4xx status code
func (o *GetDomainWhoisDomainNameIsExpiredOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get domain whois domain name is expired o k response has a 5xx status code
func (o *GetDomainWhoisDomainNameIsExpiredOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get domain whois domain name is expired o k response a status code equal to that given
func (o *GetDomainWhoisDomainNameIsExpiredOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get domain whois domain name is expired o k response
func (o *GetDomainWhoisDomainNameIsExpiredOK) Code() int {
	return 200
}

func (o *GetDomainWhoisDomainNameIsExpiredOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}/is-expired][%d] getDomainWhoisDomainNameIsExpiredOK %s", 200, payload)
}

func (o *GetDomainWhoisDomainNameIsExpiredOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}/is-expired][%d] getDomainWhoisDomainNameIsExpiredOK %s", 200, payload)
}

func (o *GetDomainWhoisDomainNameIsExpiredOK) GetPayload() *GetDomainWhoisDomainNameIsExpiredOKBody {
	return o.Payload
}

func (o *GetDomainWhoisDomainNameIsExpiredOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetDomainWhoisDomainNameIsExpiredOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomainWhoisDomainNameIsExpiredBadRequest creates a GetDomainWhoisDomainNameIsExpiredBadRequest with default headers values
func NewGetDomainWhoisDomainNameIsExpiredBadRequest() *GetDomainWhoisDomainNameIsExpiredBadRequest {
	return &GetDomainWhoisDomainNameIsExpiredBadRequest{}
}

/*
GetDomainWhoisDomainNameIsExpiredBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetDomainWhoisDomainNameIsExpiredBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this get domain whois domain name is expired bad request response has a 2xx status code
func (o *GetDomainWhoisDomainNameIsExpiredBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domain whois domain name is expired bad request response has a 3xx status code
func (o *GetDomainWhoisDomainNameIsExpiredBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domain whois domain name is expired bad request response has a 4xx status code
func (o *GetDomainWhoisDomainNameIsExpiredBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get domain whois domain name is expired bad request response has a 5xx status code
func (o *GetDomainWhoisDomainNameIsExpiredBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get domain whois domain name is expired bad request response a status code equal to that given
func (o *GetDomainWhoisDomainNameIsExpiredBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get domain whois domain name is expired bad request response
func (o *GetDomainWhoisDomainNameIsExpiredBadRequest) Code() int {
	return 400
}

func (o *GetDomainWhoisDomainNameIsExpiredBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}/is-expired][%d] getDomainWhoisDomainNameIsExpiredBadRequest %s", 400, payload)
}

func (o *GetDomainWhoisDomainNameIsExpiredBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}/is-expired][%d] getDomainWhoisDomainNameIsExpiredBadRequest %s", 400, payload)
}

func (o *GetDomainWhoisDomainNameIsExpiredBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *GetDomainWhoisDomainNameIsExpiredBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomainWhoisDomainNameIsExpiredPaymentRequired creates a GetDomainWhoisDomainNameIsExpiredPaymentRequired with default headers values
func NewGetDomainWhoisDomainNameIsExpiredPaymentRequired() *GetDomainWhoisDomainNameIsExpiredPaymentRequired {
	return &GetDomainWhoisDomainNameIsExpiredPaymentRequired{}
}

/*
GetDomainWhoisDomainNameIsExpiredPaymentRequired describes a response with status code 402, with default header values.

Payment Required
*/
type GetDomainWhoisDomainNameIsExpiredPaymentRequired struct {
	Payload interface{}
}

// IsSuccess returns true when this get domain whois domain name is expired payment required response has a 2xx status code
func (o *GetDomainWhoisDomainNameIsExpiredPaymentRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domain whois domain name is expired payment required response has a 3xx status code
func (o *GetDomainWhoisDomainNameIsExpiredPaymentRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domain whois domain name is expired payment required response has a 4xx status code
func (o *GetDomainWhoisDomainNameIsExpiredPaymentRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this get domain whois domain name is expired payment required response has a 5xx status code
func (o *GetDomainWhoisDomainNameIsExpiredPaymentRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this get domain whois domain name is expired payment required response a status code equal to that given
func (o *GetDomainWhoisDomainNameIsExpiredPaymentRequired) IsCode(code int) bool {
	return code == 402
}

// Code gets the status code for the get domain whois domain name is expired payment required response
func (o *GetDomainWhoisDomainNameIsExpiredPaymentRequired) Code() int {
	return 402
}

func (o *GetDomainWhoisDomainNameIsExpiredPaymentRequired) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}/is-expired][%d] getDomainWhoisDomainNameIsExpiredPaymentRequired %s", 402, payload)
}

func (o *GetDomainWhoisDomainNameIsExpiredPaymentRequired) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}/is-expired][%d] getDomainWhoisDomainNameIsExpiredPaymentRequired %s", 402, payload)
}

func (o *GetDomainWhoisDomainNameIsExpiredPaymentRequired) GetPayload() interface{} {
	return o.Payload
}

func (o *GetDomainWhoisDomainNameIsExpiredPaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomainWhoisDomainNameIsExpiredRequestTimeout creates a GetDomainWhoisDomainNameIsExpiredRequestTimeout with default headers values
func NewGetDomainWhoisDomainNameIsExpiredRequestTimeout() *GetDomainWhoisDomainNameIsExpiredRequestTimeout {
	return &GetDomainWhoisDomainNameIsExpiredRequestTimeout{}
}

/*
GetDomainWhoisDomainNameIsExpiredRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type GetDomainWhoisDomainNameIsExpiredRequestTimeout struct {
	Payload interface{}
}

// IsSuccess returns true when this get domain whois domain name is expired request timeout response has a 2xx status code
func (o *GetDomainWhoisDomainNameIsExpiredRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domain whois domain name is expired request timeout response has a 3xx status code
func (o *GetDomainWhoisDomainNameIsExpiredRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domain whois domain name is expired request timeout response has a 4xx status code
func (o *GetDomainWhoisDomainNameIsExpiredRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get domain whois domain name is expired request timeout response has a 5xx status code
func (o *GetDomainWhoisDomainNameIsExpiredRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get domain whois domain name is expired request timeout response a status code equal to that given
func (o *GetDomainWhoisDomainNameIsExpiredRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the get domain whois domain name is expired request timeout response
func (o *GetDomainWhoisDomainNameIsExpiredRequestTimeout) Code() int {
	return 408
}

func (o *GetDomainWhoisDomainNameIsExpiredRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}/is-expired][%d] getDomainWhoisDomainNameIsExpiredRequestTimeout %s", 408, payload)
}

func (o *GetDomainWhoisDomainNameIsExpiredRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}/is-expired][%d] getDomainWhoisDomainNameIsExpiredRequestTimeout %s", 408, payload)
}

func (o *GetDomainWhoisDomainNameIsExpiredRequestTimeout) GetPayload() interface{} {
	return o.Payload
}

func (o *GetDomainWhoisDomainNameIsExpiredRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomainWhoisDomainNameIsExpiredInternalServerError creates a GetDomainWhoisDomainNameIsExpiredInternalServerError with default headers values
func NewGetDomainWhoisDomainNameIsExpiredInternalServerError() *GetDomainWhoisDomainNameIsExpiredInternalServerError {
	return &GetDomainWhoisDomainNameIsExpiredInternalServerError{}
}

/*
GetDomainWhoisDomainNameIsExpiredInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetDomainWhoisDomainNameIsExpiredInternalServerError struct {
	Payload interface{}
}

// IsSuccess returns true when this get domain whois domain name is expired internal server error response has a 2xx status code
func (o *GetDomainWhoisDomainNameIsExpiredInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domain whois domain name is expired internal server error response has a 3xx status code
func (o *GetDomainWhoisDomainNameIsExpiredInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domain whois domain name is expired internal server error response has a 4xx status code
func (o *GetDomainWhoisDomainNameIsExpiredInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get domain whois domain name is expired internal server error response has a 5xx status code
func (o *GetDomainWhoisDomainNameIsExpiredInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get domain whois domain name is expired internal server error response a status code equal to that given
func (o *GetDomainWhoisDomainNameIsExpiredInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get domain whois domain name is expired internal server error response
func (o *GetDomainWhoisDomainNameIsExpiredInternalServerError) Code() int {
	return 500
}

func (o *GetDomainWhoisDomainNameIsExpiredInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}/is-expired][%d] getDomainWhoisDomainNameIsExpiredInternalServerError %s", 500, payload)
}

func (o *GetDomainWhoisDomainNameIsExpiredInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}/is-expired][%d] getDomainWhoisDomainNameIsExpiredInternalServerError %s", 500, payload)
}

func (o *GetDomainWhoisDomainNameIsExpiredInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *GetDomainWhoisDomainNameIsExpiredInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetDomainWhoisDomainNameIsExpiredOKBody get domain whois domain name is expired o k body
swagger:model GetDomainWhoisDomainNameIsExpiredOKBody
*/
type GetDomainWhoisDomainNameIsExpiredOKBody struct {
	models.SchemaAPIResponse

	// data
	Data []*models.SchemaDomainWhoisResponse `json:"data"`

	// meta
	Meta *models.SchemaPaginationMeta `json:"meta,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetDomainWhoisDomainNameIsExpiredOKBody) UnmarshalJSON(raw []byte) error {
	// GetDomainWhoisDomainNameIsExpiredOKBodyAO0
	var getDomainWhoisDomainNameIsExpiredOKBodyAO0 models.SchemaAPIResponse
	if err := swag.ReadJSON(raw, &getDomainWhoisDomainNameIsExpiredOKBodyAO0); err != nil {
		return err
	}
	o.SchemaAPIResponse = getDomainWhoisDomainNameIsExpiredOKBodyAO0

	// GetDomainWhoisDomainNameIsExpiredOKBodyAO1
	var dataGetDomainWhoisDomainNameIsExpiredOKBodyAO1 struct {
		Data []*models.SchemaDomainWhoisResponse `json:"data"`

		Meta *models.SchemaPaginationMeta `json:"meta,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataGetDomainWhoisDomainNameIsExpiredOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetDomainWhoisDomainNameIsExpiredOKBodyAO1.Data

	o.Meta = dataGetDomainWhoisDomainNameIsExpiredOKBodyAO1.Meta

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetDomainWhoisDomainNameIsExpiredOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getDomainWhoisDomainNameIsExpiredOKBodyAO0, err := swag.WriteJSON(o.SchemaAPIResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getDomainWhoisDomainNameIsExpiredOKBodyAO0)
	var dataGetDomainWhoisDomainNameIsExpiredOKBodyAO1 struct {
		Data []*models.SchemaDomainWhoisResponse `json:"data"`

		Meta *models.SchemaPaginationMeta `json:"meta,omitempty"`
	}

	dataGetDomainWhoisDomainNameIsExpiredOKBodyAO1.Data = o.Data

	dataGetDomainWhoisDomainNameIsExpiredOKBodyAO1.Meta = o.Meta

	jsonDataGetDomainWhoisDomainNameIsExpiredOKBodyAO1, errGetDomainWhoisDomainNameIsExpiredOKBodyAO1 := swag.WriteJSON(dataGetDomainWhoisDomainNameIsExpiredOKBodyAO1)
	if errGetDomainWhoisDomainNameIsExpiredOKBodyAO1 != nil {
		return nil, errGetDomainWhoisDomainNameIsExpiredOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetDomainWhoisDomainNameIsExpiredOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get domain whois domain name is expired o k body
func (o *GetDomainWhoisDomainNameIsExpiredOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SchemaAPIResponse
	if err := o.SchemaAPIResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDomainWhoisDomainNameIsExpiredOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDomainWhoisDomainNameIsExpiredOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getDomainWhoisDomainNameIsExpiredOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetDomainWhoisDomainNameIsExpiredOKBody) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(o.Meta) { // not required
		return nil
	}

	if o.Meta != nil {
		if err := o.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDomainWhoisDomainNameIsExpiredOK" + "." + "meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDomainWhoisDomainNameIsExpiredOK" + "." + "meta")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get domain whois domain name is expired o k body based on the context it is used
func (o *GetDomainWhoisDomainNameIsExpiredOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SchemaAPIResponse
	if err := o.SchemaAPIResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDomainWhoisDomainNameIsExpiredOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {

			if swag.IsZero(o.Data[i]) { // not required
				return nil
			}

			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getDomainWhoisDomainNameIsExpiredOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getDomainWhoisDomainNameIsExpiredOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetDomainWhoisDomainNameIsExpiredOKBody) contextValidateMeta(ctx context.Context, formats strfmt.Registry) error {

	if o.Meta != nil {

		if swag.IsZero(o.Meta) { // not required
			return nil
		}

		if err := o.Meta.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDomainWhoisDomainNameIsExpiredOK" + "." + "meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDomainWhoisDomainNameIsExpiredOK" + "." + "meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDomainWhoisDomainNameIsExpiredOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDomainWhoisDomainNameIsExpiredOKBody) UnmarshalBinary(b []byte) error {
	var res GetDomainWhoisDomainNameIsExpiredOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
