// Code generated by go-swagger; DO NOT EDIT.

package dns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cybledev/odin-cli/models"
)

// GetDomainWhoisDomainNameReader is a Reader for the GetDomainWhoisDomainName structure.
type GetDomainWhoisDomainNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDomainWhoisDomainNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDomainWhoisDomainNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400,401:
		result := NewGetDomainWhoisDomainNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 402:
		result := NewGetDomainWhoisDomainNamePaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 408:
		result := NewGetDomainWhoisDomainNameRequestTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDomainWhoisDomainNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /domain/whois/{domain-name}] GetDomainWhoisDomainName", response, response.Code())
	}
}

// NewGetDomainWhoisDomainNameOK creates a GetDomainWhoisDomainNameOK with default headers values
func NewGetDomainWhoisDomainNameOK() *GetDomainWhoisDomainNameOK {
	return &GetDomainWhoisDomainNameOK{}
}

/*
GetDomainWhoisDomainNameOK describes a response with status code 200, with default header values.

OK
*/
type GetDomainWhoisDomainNameOK struct {
	Payload *GetDomainWhoisDomainNameOKBody
}

// IsSuccess returns true when this get domain whois domain name o k response has a 2xx status code
func (o *GetDomainWhoisDomainNameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get domain whois domain name o k response has a 3xx status code
func (o *GetDomainWhoisDomainNameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domain whois domain name o k response has a 4xx status code
func (o *GetDomainWhoisDomainNameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get domain whois domain name o k response has a 5xx status code
func (o *GetDomainWhoisDomainNameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get domain whois domain name o k response a status code equal to that given
func (o *GetDomainWhoisDomainNameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get domain whois domain name o k response
func (o *GetDomainWhoisDomainNameOK) Code() int {
	return 200
}

func (o *GetDomainWhoisDomainNameOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}][%d] getDomainWhoisDomainNameOK %s", 200, payload)
}

func (o *GetDomainWhoisDomainNameOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}][%d] getDomainWhoisDomainNameOK %s", 200, payload)
}

func (o *GetDomainWhoisDomainNameOK) GetPayload() *GetDomainWhoisDomainNameOKBody {
	return o.Payload
}

func (o *GetDomainWhoisDomainNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetDomainWhoisDomainNameOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomainWhoisDomainNameBadRequest creates a GetDomainWhoisDomainNameBadRequest with default headers values
func NewGetDomainWhoisDomainNameBadRequest() *GetDomainWhoisDomainNameBadRequest {
	return &GetDomainWhoisDomainNameBadRequest{}
}

/*
GetDomainWhoisDomainNameBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetDomainWhoisDomainNameBadRequest struct {
	Payload interface{}
}

// IsSuccess returns true when this get domain whois domain name bad request response has a 2xx status code
func (o *GetDomainWhoisDomainNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domain whois domain name bad request response has a 3xx status code
func (o *GetDomainWhoisDomainNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domain whois domain name bad request response has a 4xx status code
func (o *GetDomainWhoisDomainNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get domain whois domain name bad request response has a 5xx status code
func (o *GetDomainWhoisDomainNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get domain whois domain name bad request response a status code equal to that given
func (o *GetDomainWhoisDomainNameBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get domain whois domain name bad request response
func (o *GetDomainWhoisDomainNameBadRequest) Code() int {
	return 400
}

func (o *GetDomainWhoisDomainNameBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}][%d] getDomainWhoisDomainNameBadRequest %s", 400, payload)
}

func (o *GetDomainWhoisDomainNameBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}][%d] getDomainWhoisDomainNameBadRequest %s", 400, payload)
}

func (o *GetDomainWhoisDomainNameBadRequest) GetPayload() interface{} {
	return o.Payload
}

func (o *GetDomainWhoisDomainNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomainWhoisDomainNamePaymentRequired creates a GetDomainWhoisDomainNamePaymentRequired with default headers values
func NewGetDomainWhoisDomainNamePaymentRequired() *GetDomainWhoisDomainNamePaymentRequired {
	return &GetDomainWhoisDomainNamePaymentRequired{}
}

/*
GetDomainWhoisDomainNamePaymentRequired describes a response with status code 402, with default header values.

Payment Required
*/
type GetDomainWhoisDomainNamePaymentRequired struct {
	Payload interface{}
}

// IsSuccess returns true when this get domain whois domain name payment required response has a 2xx status code
func (o *GetDomainWhoisDomainNamePaymentRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domain whois domain name payment required response has a 3xx status code
func (o *GetDomainWhoisDomainNamePaymentRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domain whois domain name payment required response has a 4xx status code
func (o *GetDomainWhoisDomainNamePaymentRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this get domain whois domain name payment required response has a 5xx status code
func (o *GetDomainWhoisDomainNamePaymentRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this get domain whois domain name payment required response a status code equal to that given
func (o *GetDomainWhoisDomainNamePaymentRequired) IsCode(code int) bool {
	return code == 402
}

// Code gets the status code for the get domain whois domain name payment required response
func (o *GetDomainWhoisDomainNamePaymentRequired) Code() int {
	return 402
}

func (o *GetDomainWhoisDomainNamePaymentRequired) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}][%d] getDomainWhoisDomainNamePaymentRequired %s", 402, payload)
}

func (o *GetDomainWhoisDomainNamePaymentRequired) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}][%d] getDomainWhoisDomainNamePaymentRequired %s", 402, payload)
}

func (o *GetDomainWhoisDomainNamePaymentRequired) GetPayload() interface{} {
	return o.Payload
}

func (o *GetDomainWhoisDomainNamePaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomainWhoisDomainNameRequestTimeout creates a GetDomainWhoisDomainNameRequestTimeout with default headers values
func NewGetDomainWhoisDomainNameRequestTimeout() *GetDomainWhoisDomainNameRequestTimeout {
	return &GetDomainWhoisDomainNameRequestTimeout{}
}

/*
GetDomainWhoisDomainNameRequestTimeout describes a response with status code 408, with default header values.

Request Timeout
*/
type GetDomainWhoisDomainNameRequestTimeout struct {
	Payload interface{}
}

// IsSuccess returns true when this get domain whois domain name request timeout response has a 2xx status code
func (o *GetDomainWhoisDomainNameRequestTimeout) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domain whois domain name request timeout response has a 3xx status code
func (o *GetDomainWhoisDomainNameRequestTimeout) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domain whois domain name request timeout response has a 4xx status code
func (o *GetDomainWhoisDomainNameRequestTimeout) IsClientError() bool {
	return true
}

// IsServerError returns true when this get domain whois domain name request timeout response has a 5xx status code
func (o *GetDomainWhoisDomainNameRequestTimeout) IsServerError() bool {
	return false
}

// IsCode returns true when this get domain whois domain name request timeout response a status code equal to that given
func (o *GetDomainWhoisDomainNameRequestTimeout) IsCode(code int) bool {
	return code == 408
}

// Code gets the status code for the get domain whois domain name request timeout response
func (o *GetDomainWhoisDomainNameRequestTimeout) Code() int {
	return 408
}

func (o *GetDomainWhoisDomainNameRequestTimeout) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}][%d] getDomainWhoisDomainNameRequestTimeout %s", 408, payload)
}

func (o *GetDomainWhoisDomainNameRequestTimeout) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}][%d] getDomainWhoisDomainNameRequestTimeout %s", 408, payload)
}

func (o *GetDomainWhoisDomainNameRequestTimeout) GetPayload() interface{} {
	return o.Payload
}

func (o *GetDomainWhoisDomainNameRequestTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDomainWhoisDomainNameInternalServerError creates a GetDomainWhoisDomainNameInternalServerError with default headers values
func NewGetDomainWhoisDomainNameInternalServerError() *GetDomainWhoisDomainNameInternalServerError {
	return &GetDomainWhoisDomainNameInternalServerError{}
}

/*
GetDomainWhoisDomainNameInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type GetDomainWhoisDomainNameInternalServerError struct {
	Payload interface{}
}

// IsSuccess returns true when this get domain whois domain name internal server error response has a 2xx status code
func (o *GetDomainWhoisDomainNameInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get domain whois domain name internal server error response has a 3xx status code
func (o *GetDomainWhoisDomainNameInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get domain whois domain name internal server error response has a 4xx status code
func (o *GetDomainWhoisDomainNameInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get domain whois domain name internal server error response has a 5xx status code
func (o *GetDomainWhoisDomainNameInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get domain whois domain name internal server error response a status code equal to that given
func (o *GetDomainWhoisDomainNameInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get domain whois domain name internal server error response
func (o *GetDomainWhoisDomainNameInternalServerError) Code() int {
	return 500
}

func (o *GetDomainWhoisDomainNameInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}][%d] getDomainWhoisDomainNameInternalServerError %s", 500, payload)
}

func (o *GetDomainWhoisDomainNameInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /domain/whois/{domain-name}][%d] getDomainWhoisDomainNameInternalServerError %s", 500, payload)
}

func (o *GetDomainWhoisDomainNameInternalServerError) GetPayload() interface{} {
	return o.Payload
}

func (o *GetDomainWhoisDomainNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetDomainWhoisDomainNameOKBody get domain whois domain name o k body
swagger:model GetDomainWhoisDomainNameOKBody
*/
type GetDomainWhoisDomainNameOKBody struct {
	models.SchemaAPIResponse

	// data
	Data *models.SchemaDomainWhoisResponse `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetDomainWhoisDomainNameOKBody) UnmarshalJSON(raw []byte) error {
	// GetDomainWhoisDomainNameOKBodyAO0
	var getDomainWhoisDomainNameOKBodyAO0 models.SchemaAPIResponse
	if err := swag.ReadJSON(raw, &getDomainWhoisDomainNameOKBodyAO0); err != nil {
		return err
	}
	o.SchemaAPIResponse = getDomainWhoisDomainNameOKBodyAO0

	// GetDomainWhoisDomainNameOKBodyAO1
	var dataGetDomainWhoisDomainNameOKBodyAO1 struct {
		Data *models.SchemaDomainWhoisResponse `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataGetDomainWhoisDomainNameOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetDomainWhoisDomainNameOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetDomainWhoisDomainNameOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getDomainWhoisDomainNameOKBodyAO0, err := swag.WriteJSON(o.SchemaAPIResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getDomainWhoisDomainNameOKBodyAO0)
	var dataGetDomainWhoisDomainNameOKBodyAO1 struct {
		Data *models.SchemaDomainWhoisResponse `json:"data,omitempty"`
	}

	dataGetDomainWhoisDomainNameOKBodyAO1.Data = o.Data

	jsonDataGetDomainWhoisDomainNameOKBodyAO1, errGetDomainWhoisDomainNameOKBodyAO1 := swag.WriteJSON(dataGetDomainWhoisDomainNameOKBodyAO1)
	if errGetDomainWhoisDomainNameOKBodyAO1 != nil {
		return nil, errGetDomainWhoisDomainNameOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetDomainWhoisDomainNameOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get domain whois domain name o k body
func (o *GetDomainWhoisDomainNameOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SchemaAPIResponse
	if err := o.SchemaAPIResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDomainWhoisDomainNameOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDomainWhoisDomainNameOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDomainWhoisDomainNameOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get domain whois domain name o k body based on the context it is used
func (o *GetDomainWhoisDomainNameOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SchemaAPIResponse
	if err := o.SchemaAPIResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetDomainWhoisDomainNameOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if swag.IsZero(o.Data) { // not required
			return nil
		}

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getDomainWhoisDomainNameOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getDomainWhoisDomainNameOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetDomainWhoisDomainNameOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetDomainWhoisDomainNameOKBody) UnmarshalBinary(b []byte) error {
	var res GetDomainWhoisDomainNameOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
