// Code generated by go-swagger; DO NOT EDIT.

package dns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cybledev/odin-cli/models"
)

// PostDomainSubdomainSearchReader is a Reader for the PostDomainSubdomainSearch structure.
type PostDomainSubdomainSearchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostDomainSubdomainSearchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostDomainSubdomainSearchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400,402,401:
		result := NewPostDomainSubdomainSearchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostDomainSubdomainSearchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /domain/subdomain/search] PostDomainSubdomainSearch", response, response.Code())
	}
}

// NewPostDomainSubdomainSearchOK creates a PostDomainSubdomainSearchOK with default headers values
func NewPostDomainSubdomainSearchOK() *PostDomainSubdomainSearchOK {
	return &PostDomainSubdomainSearchOK{}
}

/*
PostDomainSubdomainSearchOK describes a response with status code 200, with default header values.

OK
*/
type PostDomainSubdomainSearchOK struct {
	Payload *PostDomainSubdomainSearchOKBody
}

// IsSuccess returns true when this post domain subdomain search o k response has a 2xx status code
func (o *PostDomainSubdomainSearchOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post domain subdomain search o k response has a 3xx status code
func (o *PostDomainSubdomainSearchOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post domain subdomain search o k response has a 4xx status code
func (o *PostDomainSubdomainSearchOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post domain subdomain search o k response has a 5xx status code
func (o *PostDomainSubdomainSearchOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post domain subdomain search o k response a status code equal to that given
func (o *PostDomainSubdomainSearchOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post domain subdomain search o k response
func (o *PostDomainSubdomainSearchOK) Code() int {
	return 200
}

func (o *PostDomainSubdomainSearchOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /domain/subdomain/search][%d] postDomainSubdomainSearchOK %s", 200, payload)
}

func (o *PostDomainSubdomainSearchOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /domain/subdomain/search][%d] postDomainSubdomainSearchOK %s", 200, payload)
}

func (o *PostDomainSubdomainSearchOK) GetPayload() *PostDomainSubdomainSearchOKBody {
	return o.Payload
}

func (o *PostDomainSubdomainSearchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostDomainSubdomainSearchOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDomainSubdomainSearchBadRequest creates a PostDomainSubdomainSearchBadRequest with default headers values
func NewPostDomainSubdomainSearchBadRequest() *PostDomainSubdomainSearchBadRequest {
	return &PostDomainSubdomainSearchBadRequest{}
}

/*
PostDomainSubdomainSearchBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostDomainSubdomainSearchBadRequest struct {
	Payload *models.DNSErrorResponse
}

// IsSuccess returns true when this post domain subdomain search bad request response has a 2xx status code
func (o *PostDomainSubdomainSearchBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post domain subdomain search bad request response has a 3xx status code
func (o *PostDomainSubdomainSearchBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post domain subdomain search bad request response has a 4xx status code
func (o *PostDomainSubdomainSearchBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post domain subdomain search bad request response has a 5xx status code
func (o *PostDomainSubdomainSearchBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post domain subdomain search bad request response a status code equal to that given
func (o *PostDomainSubdomainSearchBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post domain subdomain search bad request response
func (o *PostDomainSubdomainSearchBadRequest) Code() int {
	return 400
}

func (o *PostDomainSubdomainSearchBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /domain/subdomain/search][%d] postDomainSubdomainSearchBadRequest %s", 400, payload)
}

func (o *PostDomainSubdomainSearchBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /domain/subdomain/search][%d] postDomainSubdomainSearchBadRequest %s", 400, payload)
}

func (o *PostDomainSubdomainSearchBadRequest) GetPayload() *models.DNSErrorResponse {
	return o.Payload
}

func (o *PostDomainSubdomainSearchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DNSErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDomainSubdomainSearchInternalServerError creates a PostDomainSubdomainSearchInternalServerError with default headers values
func NewPostDomainSubdomainSearchInternalServerError() *PostDomainSubdomainSearchInternalServerError {
	return &PostDomainSubdomainSearchInternalServerError{}
}

/*
PostDomainSubdomainSearchInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostDomainSubdomainSearchInternalServerError struct {
	Payload *models.DNSErrorResponse
}

// IsSuccess returns true when this post domain subdomain search internal server error response has a 2xx status code
func (o *PostDomainSubdomainSearchInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post domain subdomain search internal server error response has a 3xx status code
func (o *PostDomainSubdomainSearchInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post domain subdomain search internal server error response has a 4xx status code
func (o *PostDomainSubdomainSearchInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post domain subdomain search internal server error response has a 5xx status code
func (o *PostDomainSubdomainSearchInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post domain subdomain search internal server error response a status code equal to that given
func (o *PostDomainSubdomainSearchInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post domain subdomain search internal server error response
func (o *PostDomainSubdomainSearchInternalServerError) Code() int {
	return 500
}

func (o *PostDomainSubdomainSearchInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /domain/subdomain/search][%d] postDomainSubdomainSearchInternalServerError %s", 500, payload)
}

func (o *PostDomainSubdomainSearchInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /domain/subdomain/search][%d] postDomainSubdomainSearchInternalServerError %s", 500, payload)
}

func (o *PostDomainSubdomainSearchInternalServerError) GetPayload() *models.DNSErrorResponse {
	return o.Payload
}

func (o *PostDomainSubdomainSearchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DNSErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostDomainSubdomainSearchOKBody post domain subdomain search o k body
swagger:model PostDomainSubdomainSearchOKBody
*/
type PostDomainSubdomainSearchOKBody struct {
	models.DNSAPIResponse

	// data
	Data []string `json:"data"`

	// pagination
	Pagination *models.DNSSearchPagination `json:"pagination,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostDomainSubdomainSearchOKBody) UnmarshalJSON(raw []byte) error {
	// PostDomainSubdomainSearchOKBodyAO0
	var postDomainSubdomainSearchOKBodyAO0 models.DNSAPIResponse
	if err := swag.ReadJSON(raw, &postDomainSubdomainSearchOKBodyAO0); err != nil {
		return err
	}
	o.DNSAPIResponse = postDomainSubdomainSearchOKBodyAO0

	// PostDomainSubdomainSearchOKBodyAO1
	var dataPostDomainSubdomainSearchOKBodyAO1 struct {
		Data []string `json:"data"`

		Pagination *models.DNSSearchPagination `json:"pagination,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostDomainSubdomainSearchOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostDomainSubdomainSearchOKBodyAO1.Data

	o.Pagination = dataPostDomainSubdomainSearchOKBodyAO1.Pagination

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostDomainSubdomainSearchOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postDomainSubdomainSearchOKBodyAO0, err := swag.WriteJSON(o.DNSAPIResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postDomainSubdomainSearchOKBodyAO0)
	var dataPostDomainSubdomainSearchOKBodyAO1 struct {
		Data []string `json:"data"`

		Pagination *models.DNSSearchPagination `json:"pagination,omitempty"`
	}

	dataPostDomainSubdomainSearchOKBodyAO1.Data = o.Data

	dataPostDomainSubdomainSearchOKBodyAO1.Pagination = o.Pagination

	jsonDataPostDomainSubdomainSearchOKBodyAO1, errPostDomainSubdomainSearchOKBodyAO1 := swag.WriteJSON(dataPostDomainSubdomainSearchOKBodyAO1)
	if errPostDomainSubdomainSearchOKBodyAO1 != nil {
		return nil, errPostDomainSubdomainSearchOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostDomainSubdomainSearchOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post domain subdomain search o k body
func (o *PostDomainSubdomainSearchOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.DNSAPIResponse
	if err := o.DNSAPIResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostDomainSubdomainSearchOKBody) validatePagination(formats strfmt.Registry) error {

	if swag.IsZero(o.Pagination) { // not required
		return nil
	}

	if o.Pagination != nil {
		if err := o.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postDomainSubdomainSearchOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postDomainSubdomainSearchOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post domain subdomain search o k body based on the context it is used
func (o *PostDomainSubdomainSearchOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.DNSAPIResponse
	if err := o.DNSAPIResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostDomainSubdomainSearchOKBody) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if o.Pagination != nil {

		if swag.IsZero(o.Pagination) { // not required
			return nil
		}

		if err := o.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postDomainSubdomainSearchOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postDomainSubdomainSearchOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostDomainSubdomainSearchOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostDomainSubdomainSearchOKBody) UnmarshalBinary(b []byte) error {
	var res PostDomainSubdomainSearchOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
