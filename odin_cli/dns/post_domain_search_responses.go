// Code generated by go-swagger; DO NOT EDIT.

package dns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cybledev/odin-cli/models"
)

// PostDomainSearchReader is a Reader for the PostDomainSearch structure.
type PostDomainSearchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostDomainSearchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostDomainSearchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400,402,401:
		result := NewPostDomainSearchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostDomainSearchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /domain/search] PostDomainSearch", response, response.Code())
	}
}

// NewPostDomainSearchOK creates a PostDomainSearchOK with default headers values
func NewPostDomainSearchOK() *PostDomainSearchOK {
	return &PostDomainSearchOK{}
}

/*
PostDomainSearchOK describes a response with status code 200, with default header values.

OK
*/
type PostDomainSearchOK struct {
	Payload *PostDomainSearchOKBody
}

// IsSuccess returns true when this post domain search o k response has a 2xx status code
func (o *PostDomainSearchOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post domain search o k response has a 3xx status code
func (o *PostDomainSearchOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post domain search o k response has a 4xx status code
func (o *PostDomainSearchOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post domain search o k response has a 5xx status code
func (o *PostDomainSearchOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post domain search o k response a status code equal to that given
func (o *PostDomainSearchOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post domain search o k response
func (o *PostDomainSearchOK) Code() int {
	return 200
}

func (o *PostDomainSearchOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /domain/search][%d] postDomainSearchOK %s", 200, payload)
}

func (o *PostDomainSearchOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /domain/search][%d] postDomainSearchOK %s", 200, payload)
}

func (o *PostDomainSearchOK) GetPayload() *PostDomainSearchOKBody {
	return o.Payload
}

func (o *PostDomainSearchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostDomainSearchOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDomainSearchBadRequest creates a PostDomainSearchBadRequest with default headers values
func NewPostDomainSearchBadRequest() *PostDomainSearchBadRequest {
	return &PostDomainSearchBadRequest{}
}

/*
PostDomainSearchBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostDomainSearchBadRequest struct {
	Payload *models.DNSErrorResponse
}

// IsSuccess returns true when this post domain search bad request response has a 2xx status code
func (o *PostDomainSearchBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post domain search bad request response has a 3xx status code
func (o *PostDomainSearchBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post domain search bad request response has a 4xx status code
func (o *PostDomainSearchBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post domain search bad request response has a 5xx status code
func (o *PostDomainSearchBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post domain search bad request response a status code equal to that given
func (o *PostDomainSearchBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post domain search bad request response
func (o *PostDomainSearchBadRequest) Code() int {
	return 400
}

func (o *PostDomainSearchBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /domain/search][%d] postDomainSearchBadRequest %s", 400, payload)
}

func (o *PostDomainSearchBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /domain/search][%d] postDomainSearchBadRequest %s", 400, payload)
}

func (o *PostDomainSearchBadRequest) GetPayload() *models.DNSErrorResponse {
	return o.Payload
}

func (o *PostDomainSearchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DNSErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDomainSearchInternalServerError creates a PostDomainSearchInternalServerError with default headers values
func NewPostDomainSearchInternalServerError() *PostDomainSearchInternalServerError {
	return &PostDomainSearchInternalServerError{}
}

/*
PostDomainSearchInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostDomainSearchInternalServerError struct {
	Payload *models.DNSErrorResponse
}

// IsSuccess returns true when this post domain search internal server error response has a 2xx status code
func (o *PostDomainSearchInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post domain search internal server error response has a 3xx status code
func (o *PostDomainSearchInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post domain search internal server error response has a 4xx status code
func (o *PostDomainSearchInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post domain search internal server error response has a 5xx status code
func (o *PostDomainSearchInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post domain search internal server error response a status code equal to that given
func (o *PostDomainSearchInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post domain search internal server error response
func (o *PostDomainSearchInternalServerError) Code() int {
	return 500
}

func (o *PostDomainSearchInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /domain/search][%d] postDomainSearchInternalServerError %s", 500, payload)
}

func (o *PostDomainSearchInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /domain/search][%d] postDomainSearchInternalServerError %s", 500, payload)
}

func (o *PostDomainSearchInternalServerError) GetPayload() *models.DNSErrorResponse {
	return o.Payload
}

func (o *PostDomainSearchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DNSErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostDomainSearchOKBody post domain search o k body
swagger:model PostDomainSearchOKBody
*/
type PostDomainSearchOKBody struct {
	models.DNSAPIResponse

	// data
	Data []*models.EshandlerDNS `json:"data"`

	// pagination
	Pagination *models.DNSSearchPagination `json:"pagination,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostDomainSearchOKBody) UnmarshalJSON(raw []byte) error {
	// PostDomainSearchOKBodyAO0
	var postDomainSearchOKBodyAO0 models.DNSAPIResponse
	if err := swag.ReadJSON(raw, &postDomainSearchOKBodyAO0); err != nil {
		return err
	}
	o.DNSAPIResponse = postDomainSearchOKBodyAO0

	// PostDomainSearchOKBodyAO1
	var dataPostDomainSearchOKBodyAO1 struct {
		Data []*models.EshandlerDNS `json:"data"`

		Pagination *models.DNSSearchPagination `json:"pagination,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostDomainSearchOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostDomainSearchOKBodyAO1.Data

	o.Pagination = dataPostDomainSearchOKBodyAO1.Pagination

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostDomainSearchOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postDomainSearchOKBodyAO0, err := swag.WriteJSON(o.DNSAPIResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postDomainSearchOKBodyAO0)
	var dataPostDomainSearchOKBodyAO1 struct {
		Data []*models.EshandlerDNS `json:"data"`

		Pagination *models.DNSSearchPagination `json:"pagination,omitempty"`
	}

	dataPostDomainSearchOKBodyAO1.Data = o.Data

	dataPostDomainSearchOKBodyAO1.Pagination = o.Pagination

	jsonDataPostDomainSearchOKBodyAO1, errPostDomainSearchOKBodyAO1 := swag.WriteJSON(dataPostDomainSearchOKBodyAO1)
	if errPostDomainSearchOKBodyAO1 != nil {
		return nil, errPostDomainSearchOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostDomainSearchOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post domain search o k body
func (o *PostDomainSearchOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.DNSAPIResponse
	if err := o.DNSAPIResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostDomainSearchOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postDomainSearchOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postDomainSearchOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PostDomainSearchOKBody) validatePagination(formats strfmt.Registry) error {

	if swag.IsZero(o.Pagination) { // not required
		return nil
	}

	if o.Pagination != nil {
		if err := o.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postDomainSearchOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postDomainSearchOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post domain search o k body based on the context it is used
func (o *PostDomainSearchOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.DNSAPIResponse
	if err := o.DNSAPIResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostDomainSearchOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {

			if swag.IsZero(o.Data[i]) { // not required
				return nil
			}

			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postDomainSearchOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("postDomainSearchOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *PostDomainSearchOKBody) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if o.Pagination != nil {

		if swag.IsZero(o.Pagination) { // not required
			return nil
		}

		if err := o.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postDomainSearchOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postDomainSearchOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostDomainSearchOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostDomainSearchOKBody) UnmarshalBinary(b []byte) error {
	var res PostDomainSearchOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
