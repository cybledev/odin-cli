// Code generated by go-swagger; DO NOT EDIT.

package dns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cybledev/odin-cli/models"
)

// PostDNSSearchReader is a Reader for the PostDNSSearch structure.
type PostDNSSearchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostDNSSearchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostDNSSearchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400,402,401:
		result := NewPostDNSSearchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostDNSSearchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /dns/search] PostDNSSearch", response, response.Code())
	}
}

// NewPostDNSSearchOK creates a PostDNSSearchOK with default headers values
func NewPostDNSSearchOK() *PostDNSSearchOK {
	return &PostDNSSearchOK{}
}

/*
PostDNSSearchOK describes a response with status code 200, with default header values.

OK
*/
type PostDNSSearchOK struct {
	Payload *PostDNSSearchOKBody
}

// IsSuccess returns true when this post Dns search o k response has a 2xx status code
func (o *PostDNSSearchOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post Dns search o k response has a 3xx status code
func (o *PostDNSSearchOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post Dns search o k response has a 4xx status code
func (o *PostDNSSearchOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post Dns search o k response has a 5xx status code
func (o *PostDNSSearchOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post Dns search o k response a status code equal to that given
func (o *PostDNSSearchOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post Dns search o k response
func (o *PostDNSSearchOK) Code() int {
	return 200
}

func (o *PostDNSSearchOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /dns/search][%d] postDnsSearchOK %s", 200, payload)
}

func (o *PostDNSSearchOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /dns/search][%d] postDnsSearchOK %s", 200, payload)
}

func (o *PostDNSSearchOK) GetPayload() *PostDNSSearchOKBody {
	return o.Payload
}

func (o *PostDNSSearchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostDNSSearchOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDNSSearchBadRequest creates a PostDNSSearchBadRequest with default headers values
func NewPostDNSSearchBadRequest() *PostDNSSearchBadRequest {
	return &PostDNSSearchBadRequest{}
}

/*
PostDNSSearchBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostDNSSearchBadRequest struct {
	Payload *models.DNSErrorResponse
}

// IsSuccess returns true when this post Dns search bad request response has a 2xx status code
func (o *PostDNSSearchBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post Dns search bad request response has a 3xx status code
func (o *PostDNSSearchBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post Dns search bad request response has a 4xx status code
func (o *PostDNSSearchBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post Dns search bad request response has a 5xx status code
func (o *PostDNSSearchBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post Dns search bad request response a status code equal to that given
func (o *PostDNSSearchBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post Dns search bad request response
func (o *PostDNSSearchBadRequest) Code() int {
	return 400
}

func (o *PostDNSSearchBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /dns/search][%d] postDnsSearchBadRequest %s", 400, payload)
}

func (o *PostDNSSearchBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /dns/search][%d] postDnsSearchBadRequest %s", 400, payload)
}

func (o *PostDNSSearchBadRequest) GetPayload() *models.DNSErrorResponse {
	return o.Payload
}

func (o *PostDNSSearchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DNSErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDNSSearchInternalServerError creates a PostDNSSearchInternalServerError with default headers values
func NewPostDNSSearchInternalServerError() *PostDNSSearchInternalServerError {
	return &PostDNSSearchInternalServerError{}
}

/*
PostDNSSearchInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostDNSSearchInternalServerError struct {
	Payload *models.DNSErrorResponse
}

// IsSuccess returns true when this post Dns search internal server error response has a 2xx status code
func (o *PostDNSSearchInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post Dns search internal server error response has a 3xx status code
func (o *PostDNSSearchInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post Dns search internal server error response has a 4xx status code
func (o *PostDNSSearchInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post Dns search internal server error response has a 5xx status code
func (o *PostDNSSearchInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post Dns search internal server error response a status code equal to that given
func (o *PostDNSSearchInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post Dns search internal server error response
func (o *PostDNSSearchInternalServerError) Code() int {
	return 500
}

func (o *PostDNSSearchInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /dns/search][%d] postDnsSearchInternalServerError %s", 500, payload)
}

func (o *PostDNSSearchInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /dns/search][%d] postDnsSearchInternalServerError %s", 500, payload)
}

func (o *PostDNSSearchInternalServerError) GetPayload() *models.DNSErrorResponse {
	return o.Payload
}

func (o *PostDNSSearchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DNSErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostDNSSearchOKBody post DNS search o k body
swagger:model PostDNSSearchOKBody
*/
type PostDNSSearchOKBody struct {
	models.DNSAPIResponse

	// data
	Data []string `json:"data"`

	// pagination
	Pagination *models.DNSSearchPagination `json:"pagination,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostDNSSearchOKBody) UnmarshalJSON(raw []byte) error {
	// PostDNSSearchOKBodyAO0
	var postDNSSearchOKBodyAO0 models.DNSAPIResponse
	if err := swag.ReadJSON(raw, &postDNSSearchOKBodyAO0); err != nil {
		return err
	}
	o.DNSAPIResponse = postDNSSearchOKBodyAO0

	// PostDNSSearchOKBodyAO1
	var dataPostDNSSearchOKBodyAO1 struct {
		Data []string `json:"data"`

		Pagination *models.DNSSearchPagination `json:"pagination,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostDNSSearchOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostDNSSearchOKBodyAO1.Data

	o.Pagination = dataPostDNSSearchOKBodyAO1.Pagination

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostDNSSearchOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postDNSSearchOKBodyAO0, err := swag.WriteJSON(o.DNSAPIResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postDNSSearchOKBodyAO0)
	var dataPostDNSSearchOKBodyAO1 struct {
		Data []string `json:"data"`

		Pagination *models.DNSSearchPagination `json:"pagination,omitempty"`
	}

	dataPostDNSSearchOKBodyAO1.Data = o.Data

	dataPostDNSSearchOKBodyAO1.Pagination = o.Pagination

	jsonDataPostDNSSearchOKBodyAO1, errPostDNSSearchOKBodyAO1 := swag.WriteJSON(dataPostDNSSearchOKBodyAO1)
	if errPostDNSSearchOKBodyAO1 != nil {
		return nil, errPostDNSSearchOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostDNSSearchOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post DNS search o k body
func (o *PostDNSSearchOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.DNSAPIResponse
	if err := o.DNSAPIResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostDNSSearchOKBody) validatePagination(formats strfmt.Registry) error {

	if swag.IsZero(o.Pagination) { // not required
		return nil
	}

	if o.Pagination != nil {
		if err := o.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postDnsSearchOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postDnsSearchOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post DNS search o k body based on the context it is used
func (o *PostDNSSearchOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.DNSAPIResponse
	if err := o.DNSAPIResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostDNSSearchOKBody) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if o.Pagination != nil {

		if swag.IsZero(o.Pagination) { // not required
			return nil
		}

		if err := o.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postDnsSearchOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postDnsSearchOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostDNSSearchOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostDNSSearchOKBody) UnmarshalBinary(b []byte) error {
	var res PostDNSSearchOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
