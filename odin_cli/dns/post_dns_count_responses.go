// Code generated by go-swagger; DO NOT EDIT.

package dns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cybledev/odin-cli/models"
)

// PostDNSCountReader is a Reader for the PostDNSCount structure.
type PostDNSCountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostDNSCountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostDNSCountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400,402,401:
		result := NewPostDNSCountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostDNSCountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /dns/count] PostDNSCount", response, response.Code())
	}
}

// NewPostDNSCountOK creates a PostDNSCountOK with default headers values
func NewPostDNSCountOK() *PostDNSCountOK {
	return &PostDNSCountOK{}
}

/*
PostDNSCountOK describes a response with status code 200, with default header values.

OK
*/
type PostDNSCountOK struct {
	Payload *PostDNSCountOKBody
}

// IsSuccess returns true when this post Dns count o k response has a 2xx status code
func (o *PostDNSCountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post Dns count o k response has a 3xx status code
func (o *PostDNSCountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post Dns count o k response has a 4xx status code
func (o *PostDNSCountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post Dns count o k response has a 5xx status code
func (o *PostDNSCountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post Dns count o k response a status code equal to that given
func (o *PostDNSCountOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the post Dns count o k response
func (o *PostDNSCountOK) Code() int {
	return 200
}

func (o *PostDNSCountOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /dns/count][%d] postDnsCountOK %s", 200, payload)
}

func (o *PostDNSCountOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /dns/count][%d] postDnsCountOK %s", 200, payload)
}

func (o *PostDNSCountOK) GetPayload() *PostDNSCountOKBody {
	return o.Payload
}

func (o *PostDNSCountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostDNSCountOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDNSCountBadRequest creates a PostDNSCountBadRequest with default headers values
func NewPostDNSCountBadRequest() *PostDNSCountBadRequest {
	return &PostDNSCountBadRequest{}
}

/*
PostDNSCountBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PostDNSCountBadRequest struct {
	Payload *models.DNSErrorResponse
}

// IsSuccess returns true when this post Dns count bad request response has a 2xx status code
func (o *PostDNSCountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post Dns count bad request response has a 3xx status code
func (o *PostDNSCountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post Dns count bad request response has a 4xx status code
func (o *PostDNSCountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post Dns count bad request response has a 5xx status code
func (o *PostDNSCountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post Dns count bad request response a status code equal to that given
func (o *PostDNSCountBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the post Dns count bad request response
func (o *PostDNSCountBadRequest) Code() int {
	return 400
}

func (o *PostDNSCountBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /dns/count][%d] postDnsCountBadRequest %s", 400, payload)
}

func (o *PostDNSCountBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /dns/count][%d] postDnsCountBadRequest %s", 400, payload)
}

func (o *PostDNSCountBadRequest) GetPayload() *models.DNSErrorResponse {
	return o.Payload
}

func (o *PostDNSCountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DNSErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostDNSCountInternalServerError creates a PostDNSCountInternalServerError with default headers values
func NewPostDNSCountInternalServerError() *PostDNSCountInternalServerError {
	return &PostDNSCountInternalServerError{}
}

/*
PostDNSCountInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PostDNSCountInternalServerError struct {
	Payload *models.DNSErrorResponse
}

// IsSuccess returns true when this post Dns count internal server error response has a 2xx status code
func (o *PostDNSCountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post Dns count internal server error response has a 3xx status code
func (o *PostDNSCountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post Dns count internal server error response has a 4xx status code
func (o *PostDNSCountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post Dns count internal server error response has a 5xx status code
func (o *PostDNSCountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post Dns count internal server error response a status code equal to that given
func (o *PostDNSCountInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the post Dns count internal server error response
func (o *PostDNSCountInternalServerError) Code() int {
	return 500
}

func (o *PostDNSCountInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /dns/count][%d] postDnsCountInternalServerError %s", 500, payload)
}

func (o *PostDNSCountInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /dns/count][%d] postDnsCountInternalServerError %s", 500, payload)
}

func (o *PostDNSCountInternalServerError) GetPayload() *models.DNSErrorResponse {
	return o.Payload
}

func (o *PostDNSCountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DNSErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
PostDNSCountOKBody post DNS count o k body
swagger:model PostDNSCountOKBody
*/
type PostDNSCountOKBody struct {
	models.DNSAPIResponse

	// data
	Data *models.DNSData `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostDNSCountOKBody) UnmarshalJSON(raw []byte) error {
	// PostDNSCountOKBodyAO0
	var postDNSCountOKBodyAO0 models.DNSAPIResponse
	if err := swag.ReadJSON(raw, &postDNSCountOKBodyAO0); err != nil {
		return err
	}
	o.DNSAPIResponse = postDNSCountOKBodyAO0

	// PostDNSCountOKBodyAO1
	var dataPostDNSCountOKBodyAO1 struct {
		Data *models.DNSData `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostDNSCountOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostDNSCountOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostDNSCountOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postDNSCountOKBodyAO0, err := swag.WriteJSON(o.DNSAPIResponse)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postDNSCountOKBodyAO0)
	var dataPostDNSCountOKBodyAO1 struct {
		Data *models.DNSData `json:"data,omitempty"`
	}

	dataPostDNSCountOKBodyAO1.Data = o.Data

	jsonDataPostDNSCountOKBodyAO1, errPostDNSCountOKBodyAO1 := swag.WriteJSON(dataPostDNSCountOKBodyAO1)
	if errPostDNSCountOKBodyAO1 != nil {
		return nil, errPostDNSCountOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostDNSCountOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post DNS count o k body
func (o *PostDNSCountOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.DNSAPIResponse
	if err := o.DNSAPIResponse.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostDNSCountOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postDnsCountOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postDnsCountOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post DNS count o k body based on the context it is used
func (o *PostDNSCountOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.DNSAPIResponse
	if err := o.DNSAPIResponse.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostDNSCountOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if swag.IsZero(o.Data) { // not required
			return nil
		}

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postDnsCountOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postDnsCountOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostDNSCountOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostDNSCountOKBody) UnmarshalBinary(b []byte) error {
	var res PostDNSCountOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
