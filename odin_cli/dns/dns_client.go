// Code generated by go-swagger; DO NOT EDIT.

package dns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new dns API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new dns API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new dns API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for dns API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	PostDomainCount(params *PostDomainCountParams, opts ...ClientOption) (*PostDomainCountOK, error)

	PostDomainSearch(params *PostDomainSearchParams, opts ...ClientOption) (*PostDomainSearchOK, error)

	PostDomainSubdomainCount(params *PostDomainSubdomainCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDomainSubdomainCountOK, error)

	PostDomainSubdomainSearch(params *PostDomainSubdomainSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDomainSubdomainSearchOK, error)

	GetDomainWhoisDomainName(params *GetDomainWhoisDomainNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomainWhoisDomainNameOK, error)

	GetDomainWhoisDomainNameHistorical(params *GetDomainWhoisDomainNameHistoricalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomainWhoisDomainNameHistoricalOK, error)

	GetDomainWhoisDomainNameIsExpired(params *GetDomainWhoisDomainNameIsExpiredParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomainWhoisDomainNameIsExpiredOK, error)

	GetDomainWhoisDomainNameIsRegistered(params *GetDomainWhoisDomainNameIsRegisteredParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomainWhoisDomainNameIsRegisteredOK, error)

	SetTransport(transport runtime.ClientTransport)
}


/*
PostDomainCount gets domains count

Get count of domain records based on query
*/
func (a *Client) PostDomainCount(params *PostDomainCountParams, opts ...ClientOption) (*PostDomainCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostDomainCount",
		Method:             "POST",
		PathPattern:        "/domain/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDomainCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDomainCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostDomainSearch searches domains

Search domains based on the query
*/
func (a *Client) PostDomainSearch(params *PostDomainSearchParams, opts ...ClientOption) (*PostDomainSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostDomainSearch",
		Method:             "POST",
		PathPattern:        "/domain/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDomainSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDomainSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostDomainSubdomainCount fetches the total no of subdomain records

Returns the count of subdomain records based on domain
*/
func (a *Client) PostDomainSubdomainCount(params *PostDomainSubdomainCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDomainSubdomainCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainSubdomainCountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostDomainSubdomainCount",
		Method:             "POST",
		PathPattern:        "/domain/subdomain/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainSubdomainCountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDomainSubdomainCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDomainSubdomainCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostDomainSubdomainSearch fetches the subdomain record

Returns the subdomain records based on query
*/
func (a *Client) PostDomainSubdomainSearch(params *PostDomainSubdomainSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostDomainSubdomainSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDomainSubdomainSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostDomainSubdomainSearch",
		Method:             "POST",
		PathPattern:        "/domain/subdomain/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostDomainSubdomainSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDomainSubdomainSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDomainSubdomainSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDomainWhoisDomainName fetches the domain whois record details

Provides extensive details about the domain whois record like name servers, domain status, registrar, etc.
*/
func (a *Client) GetDomainWhoisDomainName(params *GetDomainWhoisDomainNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomainWhoisDomainNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainWhoisDomainNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDomainWhoisDomainName",
		Method:             "GET",
		PathPattern:        "/domain/whois/{domain-name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainWhoisDomainNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDomainWhoisDomainNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDomainWhoisDomainName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDomainWhoisDomainNameHistorical fetches all the domain whois historical records

Provides historical details about the domain whois record like name servers, domain status, registrar, etc
*/
func (a *Client) GetDomainWhoisDomainNameHistorical(params *GetDomainWhoisDomainNameHistoricalParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomainWhoisDomainNameHistoricalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainWhoisDomainNameHistoricalParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDomainWhoisDomainNameHistorical",
		Method:             "GET",
		PathPattern:        "/domain/whois/{domain-name}/historical",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainWhoisDomainNameHistoricalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDomainWhoisDomainNameHistoricalOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDomainWhoisDomainNameHistorical: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDomainWhoisDomainNameIsExpired gets the expiry for a particular domain

Provides historical details about the domain whois record like name servers, domain status, registrar, etc
*/
func (a *Client) GetDomainWhoisDomainNameIsExpired(params *GetDomainWhoisDomainNameIsExpiredParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomainWhoisDomainNameIsExpiredOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainWhoisDomainNameIsExpiredParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDomainWhoisDomainNameIsExpired",
		Method:             "GET",
		PathPattern:        "/domain/whois/{domain-name}/is-expired",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainWhoisDomainNameIsExpiredReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDomainWhoisDomainNameIsExpiredOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDomainWhoisDomainNameIsExpired: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDomainWhoisDomainNameIsRegistered fetches all the domain whois historical records

Provides historical details about the domain whois record like name servers, domain status, registrar, etc
*/
func (a *Client) GetDomainWhoisDomainNameIsRegistered(params *GetDomainWhoisDomainNameIsRegisteredParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomainWhoisDomainNameIsRegisteredOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainWhoisDomainNameIsRegisteredParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDomainWhoisDomainNameIsRegistered",
		Method:             "GET",
		PathPattern:        "/domain/whois/{domain-name}/is-registered",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainWhoisDomainNameIsRegisteredReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDomainWhoisDomainNameIsRegisteredOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDomainWhoisDomainNameIsRegistered: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}


// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
