// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for IPServiceSoftware

// register flags to command
func registerModelIPServiceSoftwareFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIPServiceSoftwarePropEdition(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPServiceSoftwarePropLanguage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPServiceSoftwarePropPart(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPServiceSoftwarePropProduct(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPServiceSoftwarePropUpdate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPServiceSoftwarePropURI(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPServiceSoftwarePropVendor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPServiceSoftwarePropVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIPServiceSoftwarePropEdition(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: edition interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerIPServiceSoftwarePropLanguage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: language interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerIPServiceSoftwarePropPart(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: part interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerIPServiceSoftwarePropProduct(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: product interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerIPServiceSoftwarePropUpdate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: update interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerIPServiceSoftwarePropURI(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagURIDescription := ``

	var flagURIName string
	if cmdPrefix == "" {
		flagURIName = "uri"
	} else {
		flagURIName = fmt.Sprintf("%v.uri", cmdPrefix)
	}

	var flagURIDefault string

	_ = cmd.PersistentFlags().String(flagURIName, flagURIDefault, flagURIDescription)

	return nil
}

func registerIPServiceSoftwarePropVendor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: vendor interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerIPServiceSoftwarePropVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: version interface{} map type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIPServiceSoftwareFlags(depth int, m *models.IPServiceSoftware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, EditionAdded := retrieveIPServiceSoftwarePropEditionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EditionAdded

	err, LanguageAdded := retrieveIPServiceSoftwarePropLanguageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LanguageAdded

	err, PartAdded := retrieveIPServiceSoftwarePropPartFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PartAdded

	err, ProductAdded := retrieveIPServiceSoftwarePropProductFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ProductAdded

	err, UpdateAdded := retrieveIPServiceSoftwarePropUpdateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UpdateAdded

	err, URIAdded := retrieveIPServiceSoftwarePropURIFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || URIAdded

	err, VendorAdded := retrieveIPServiceSoftwarePropVendorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VendorAdded

	err, VersionAdded := retrieveIPServiceSoftwarePropVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VersionAdded

	return nil, retAdded
}

func retrieveIPServiceSoftwarePropEditionFlags(depth int, m *models.IPServiceSoftware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagEditionName := fmt.Sprintf("%v.edition", cmdPrefix)
	if cmd.Flags().Changed(flagEditionName) {
		// warning: edition map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIPServiceSoftwarePropLanguageFlags(depth int, m *models.IPServiceSoftware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLanguageName := fmt.Sprintf("%v.language", cmdPrefix)
	if cmd.Flags().Changed(flagLanguageName) {
		// warning: language map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIPServiceSoftwarePropPartFlags(depth int, m *models.IPServiceSoftware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPartName := fmt.Sprintf("%v.part", cmdPrefix)
	if cmd.Flags().Changed(flagPartName) {
		// warning: part map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIPServiceSoftwarePropProductFlags(depth int, m *models.IPServiceSoftware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagProductName := fmt.Sprintf("%v.product", cmdPrefix)
	if cmd.Flags().Changed(flagProductName) {
		// warning: product map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIPServiceSoftwarePropUpdateFlags(depth int, m *models.IPServiceSoftware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUpdateName := fmt.Sprintf("%v.update", cmdPrefix)
	if cmd.Flags().Changed(flagUpdateName) {
		// warning: update map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIPServiceSoftwarePropURIFlags(depth int, m *models.IPServiceSoftware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagURIName := fmt.Sprintf("%v.uri", cmdPrefix)
	if cmd.Flags().Changed(flagURIName) {

		var flagURIName string
		if cmdPrefix == "" {
			flagURIName = "uri"
		} else {
			flagURIName = fmt.Sprintf("%v.uri", cmdPrefix)
		}

		flagURIValue, err := cmd.Flags().GetString(flagURIName)
		if err != nil {
			return err, false
		}
		m.URI = flagURIValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPServiceSoftwarePropVendorFlags(depth int, m *models.IPServiceSoftware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVendorName := fmt.Sprintf("%v.vendor", cmdPrefix)
	if cmd.Flags().Changed(flagVendorName) {
		// warning: vendor map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIPServiceSoftwarePropVersionFlags(depth int, m *models.IPServiceSoftware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVersionName := fmt.Sprintf("%v.version", cmdPrefix)
	if cmd.Flags().Changed(flagVersionName) {
		// warning: version map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
