// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/cybledev/odin-cli/decorator"
	"github.com/cybledev/odin-cli/odin_cli/fields"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationFieldsGetFieldsCertificatesCategoryCmd returns a command to handle operation getFieldsCertificatesCategory
func makeOperationFieldsGetFieldsCertificatesCategoryCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Args:  cobra.NoArgs,
		Use:   "certificates",
		Short: `Returns the fields data for certificates`,
		RunE:  decorator.RunEColorWrapper(runOperationFieldsGetFieldsCertificatesCategory),
	}

	if err := registerOperationFieldsGetFieldsCertificatesCategoryParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationFieldsGetFieldsCertificatesCategory uses cmd flags to call endpoint api
func runOperationFieldsGetFieldsCertificatesCategory(cmd *cobra.Command, args []string) (string, error) {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return "", err
	}
	// retrieve flag values from cmd and fill params
	params := fields.NewGetFieldsCertificatesCategoryParams()
	if err, _ = retrieveOperationFieldsGetFieldsCertificatesCategoryCategoryFlag(params, "", cmd); err != nil {
		return "", err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return "", nil
	}
	// make request and then print result
	msgStr, err := parseOperationFieldsGetFieldsCertificatesCategoryResult(appCli.Fields.GetFieldsCertificatesCategory(params))
	if err != nil {
		return "", err
	}

	if !debug {
		return msgStr, nil
	}

	return "", nil
}

// registerOperationFieldsGetFieldsCertificatesCategoryParamFlags registers all flags needed to fill params
func registerOperationFieldsGetFieldsCertificatesCategoryParamFlags(cmd *cobra.Command) error {
	if err := registerOperationFieldsGetFieldsCertificatesCategoryCategoryParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationFieldsGetFieldsCertificatesCategoryCategoryParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagCategoryDescription := `Required. get the category`

	var flagCategoryName string
	if cmdPrefix == "" {
		flagCategoryName = "category"
	} else {
		flagCategoryName = fmt.Sprintf("%v.category", cmdPrefix)
	}

	var flagCategoryDefault string

	_ = cmd.PersistentFlags().String(flagCategoryName, flagCategoryDefault, flagCategoryDescription)

	return nil
}

func retrieveOperationFieldsGetFieldsCertificatesCategoryCategoryFlag(m *fields.GetFieldsCertificatesCategoryParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("category") {

		var flagCategoryName string
		if cmdPrefix == "" {
			flagCategoryName = "category"
		} else {
			flagCategoryName = fmt.Sprintf("%v.category", cmdPrefix)
		}

		flagCategoryValue, err := cmd.Flags().GetString(flagCategoryName)
		if err != nil {
			return err, false
		}
		m.Category = flagCategoryValue

	}

	return nil, retAdded
}

// parseOperationFieldsGetFieldsCertificatesCategoryResult parses request result and return the string content
func parseOperationFieldsGetFieldsCertificatesCategoryResult(resp0 *fields.GetFieldsCertificatesCategoryOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*fields.GetFieldsCertificatesCategoryOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*fields.GetFieldsCertificatesCategoryBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*fields.GetFieldsCertificatesCategoryRequestTimeout)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*fields.GetFieldsCertificatesCategoryInternalServerError)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
