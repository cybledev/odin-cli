// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for IPExploitDetails

// register flags to command
func registerModelIPExploitDetailsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIPExploitDetailsPropDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPExploitDetailsPropFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPExploitDetailsPropID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPExploitDetailsPropPlatform(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPExploitDetailsPropType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPExploitDetailsPropURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIPExploitDetailsPropDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagDescriptionDescription := ``

	var flagDescriptionName string
	if cmdPrefix == "" {
		flagDescriptionName = "description"
	} else {
		flagDescriptionName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var flagDescriptionDefault string

	_ = cmd.PersistentFlags().String(flagDescriptionName, flagDescriptionDefault, flagDescriptionDescription)

	return nil
}

func registerIPExploitDetailsPropFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFileDescription := ``

	var flagFileName string
	if cmdPrefix == "" {
		flagFileName = "file"
	} else {
		flagFileName = fmt.Sprintf("%v.file", cmdPrefix)
	}

	var flagFileDefault string

	_ = cmd.PersistentFlags().String(flagFileName, flagFileDefault, flagFileDescription)

	return nil
}

func registerIPExploitDetailsPropID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIDDescription := ``

	var flagIDName string
	if cmdPrefix == "" {
		flagIDName = "id"
	} else {
		flagIDName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var flagIDDefault string

	_ = cmd.PersistentFlags().String(flagIDName, flagIDDefault, flagIDDescription)

	return nil
}

func registerIPExploitDetailsPropPlatform(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagPlatformDescription := ``

	var flagPlatformName string
	if cmdPrefix == "" {
		flagPlatformName = "platform"
	} else {
		flagPlatformName = fmt.Sprintf("%v.platform", cmdPrefix)
	}

	var flagPlatformDefault string

	_ = cmd.PersistentFlags().String(flagPlatformName, flagPlatformDefault, flagPlatformDescription)

	return nil
}

func registerIPExploitDetailsPropType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTypeDescription := ``

	var flagTypeName string
	if cmdPrefix == "" {
		flagTypeName = "type"
	} else {
		flagTypeName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var flagTypeDefault string

	_ = cmd.PersistentFlags().String(flagTypeName, flagTypeDefault, flagTypeDescription)

	return nil
}

func registerIPExploitDetailsPropURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagURLDescription := ``

	var flagURLName string
	if cmdPrefix == "" {
		flagURLName = "url"
	} else {
		flagURLName = fmt.Sprintf("%v.url", cmdPrefix)
	}

	var flagURLDefault string

	_ = cmd.PersistentFlags().String(flagURLName, flagURLDefault, flagURLDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIPExploitDetailsFlags(depth int, m *models.IPExploitDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DescriptionAdded := retrieveIPExploitDetailsPropDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DescriptionAdded

	err, FileAdded := retrieveIPExploitDetailsPropFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileAdded

	err, IDAdded := retrieveIPExploitDetailsPropIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IDAdded

	err, PlatformAdded := retrieveIPExploitDetailsPropPlatformFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PlatformAdded

	err, TypeAdded := retrieveIPExploitDetailsPropTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TypeAdded

	err, URLAdded := retrieveIPExploitDetailsPropURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || URLAdded

	return nil, retAdded
}

func retrieveIPExploitDetailsPropDescriptionFlags(depth int, m *models.IPExploitDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDescriptionName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(flagDescriptionName) {

		var flagDescriptionName string
		if cmdPrefix == "" {
			flagDescriptionName = "description"
		} else {
			flagDescriptionName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		flagDescriptionValue, err := cmd.Flags().GetString(flagDescriptionName)
		if err != nil {
			return err, false
		}
		m.Description = flagDescriptionValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPExploitDetailsPropFileFlags(depth int, m *models.IPExploitDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFileName := fmt.Sprintf("%v.file", cmdPrefix)
	if cmd.Flags().Changed(flagFileName) {

		var flagFileName string
		if cmdPrefix == "" {
			flagFileName = "file"
		} else {
			flagFileName = fmt.Sprintf("%v.file", cmdPrefix)
		}

		flagFileValue, err := cmd.Flags().GetString(flagFileName)
		if err != nil {
			return err, false
		}
		m.File = flagFileValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPExploitDetailsPropIDFlags(depth int, m *models.IPExploitDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIDName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(flagIDName) {

		var flagIDName string
		if cmdPrefix == "" {
			flagIDName = "id"
		} else {
			flagIDName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		flagIDValue, err := cmd.Flags().GetString(flagIDName)
		if err != nil {
			return err, false
		}
		m.ID = flagIDValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPExploitDetailsPropPlatformFlags(depth int, m *models.IPExploitDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPlatformName := fmt.Sprintf("%v.platform", cmdPrefix)
	if cmd.Flags().Changed(flagPlatformName) {

		var flagPlatformName string
		if cmdPrefix == "" {
			flagPlatformName = "platform"
		} else {
			flagPlatformName = fmt.Sprintf("%v.platform", cmdPrefix)
		}

		flagPlatformValue, err := cmd.Flags().GetString(flagPlatformName)
		if err != nil {
			return err, false
		}
		m.Platform = flagPlatformValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPExploitDetailsPropTypeFlags(depth int, m *models.IPExploitDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTypeName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(flagTypeName) {

		var flagTypeName string
		if cmdPrefix == "" {
			flagTypeName = "type"
		} else {
			flagTypeName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		flagTypeValue, err := cmd.Flags().GetString(flagTypeName)
		if err != nil {
			return err, false
		}
		m.Type = flagTypeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPExploitDetailsPropURLFlags(depth int, m *models.IPExploitDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagURLName := fmt.Sprintf("%v.url", cmdPrefix)
	if cmd.Flags().Changed(flagURLName) {

		var flagURLName string
		if cmdPrefix == "" {
			flagURLName = "url"
		} else {
			flagURLName = fmt.Sprintf("%v.url", cmdPrefix)
		}

		flagURLValue, err := cmd.Flags().GetString(flagURLName)
		if err != nil {
			return err, false
		}
		m.URL = flagURLValue

		retAdded = true
	}

	return nil, retAdded
}
