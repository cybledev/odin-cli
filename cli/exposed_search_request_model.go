// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for ExposedSearchRequest

// register flags to command
func registerModelExposedSearchRequestFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerExposedSearchRequestPropLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExposedSearchRequestPropQuery(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExposedSearchRequestPropSortBy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExposedSearchRequestPropSortDir(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExposedSearchRequestPropStart(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerExposedSearchRequestPropLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLimitDescription := `(default 1)`

	var flagLimitName string
	if cmdPrefix == "" {
		flagLimitName = "limit"
	} else {
		flagLimitName = fmt.Sprintf("%v.limit", cmdPrefix)
	}

	var flagLimitDefault int64 = 1

	_ = cmd.PersistentFlags().Int64(flagLimitName, flagLimitDefault, flagLimitDescription)

	return nil
}

func registerExposedSearchRequestPropQuery(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagQueryDescription := ``

	var flagQueryName string
	if cmdPrefix == "" {
		flagQueryName = "query"
	} else {
		flagQueryName = fmt.Sprintf("%v.query", cmdPrefix)
	}

	var flagQueryDefault string = defaultQuery

	_ = cmd.PersistentFlags().String(flagQueryName, flagQueryDefault, flagQueryDescription)

	return nil
}

func registerExposedSearchRequestPropSortBy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSortByDescription := ``

	var flagSortByName string
	if cmdPrefix == "" {
		flagSortByName = "sort_by"
	} else {
		flagSortByName = fmt.Sprintf("%v.sort_by", cmdPrefix)
	}

	var flagSortByDefault string

	_ = cmd.PersistentFlags().String(flagSortByName, flagSortByDefault, flagSortByDescription)

	return nil
}

func registerExposedSearchRequestPropSortDir(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSortDirDescription := ``

	var flagSortDirName string
	if cmdPrefix == "" {
		flagSortDirName = "sort_dir"
	} else {
		flagSortDirName = fmt.Sprintf("%v.sort_dir", cmdPrefix)
	}

	var flagSortDirDefault string

	_ = cmd.PersistentFlags().String(flagSortDirName, flagSortDirDefault, flagSortDirDescription)

	return nil
}

func registerExposedSearchRequestPropStart(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: start []interface{} array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelExposedSearchRequestFlags(depth int, m *models.ExposedSearchRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, LimitAdded := retrieveExposedSearchRequestPropLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LimitAdded

	err, QueryAdded := retrieveExposedSearchRequestPropQueryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || QueryAdded

	err, SortByAdded := retrieveExposedSearchRequestPropSortByFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SortByAdded

	err, SortDirAdded := retrieveExposedSearchRequestPropSortDirFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SortDirAdded

	err, StartAdded := retrieveExposedSearchRequestPropStartFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StartAdded

	return nil, retAdded
}

func retrieveExposedSearchRequestPropLimitFlags(depth int, m *models.ExposedSearchRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := true

	flagLimitName := fmt.Sprintf("%v.limit", cmdPrefix)
	if cmd.Flags().Changed(flagLimitName) {

		var flagLimitName string
		if cmdPrefix == "" {
			flagLimitName = "limit"
		} else {
			flagLimitName = fmt.Sprintf("%v.limit", cmdPrefix)
		}

		flagLimitValue, err := cmd.Flags().GetInt64(flagLimitName)
		if err != nil {
			return err, false
		}
		m.Limit = &flagLimitValue

	}

	return nil, retAdded
}

func retrieveExposedSearchRequestPropQueryFlags(depth int, m *models.ExposedSearchRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagQueryName := fmt.Sprintf("%v.query", cmdPrefix)
	if cmd.Flags().Changed(flagQueryName) {

		var flagQueryName string
		if cmdPrefix == "" {
			flagQueryName = "query"
		} else {
			flagQueryName = fmt.Sprintf("%v.query", cmdPrefix)
		}

		flagQueryValue, err := cmd.Flags().GetString(flagQueryName)
		if err != nil {
			return err, false
		}
		m.Query = flagQueryValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExposedSearchRequestPropSortByFlags(depth int, m *models.ExposedSearchRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSortByName := fmt.Sprintf("%v.sort_by", cmdPrefix)
	if cmd.Flags().Changed(flagSortByName) {

		var flagSortByName string
		if cmdPrefix == "" {
			flagSortByName = "sort_by"
		} else {
			flagSortByName = fmt.Sprintf("%v.sort_by", cmdPrefix)
		}

		flagSortByValue, err := cmd.Flags().GetString(flagSortByName)
		if err != nil {
			return err, false
		}
		m.SortBy = flagSortByValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExposedSearchRequestPropSortDirFlags(depth int, m *models.ExposedSearchRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSortDirName := fmt.Sprintf("%v.sort_dir", cmdPrefix)
	if cmd.Flags().Changed(flagSortDirName) {

		var flagSortDirName string
		if cmdPrefix == "" {
			flagSortDirName = "sort_dir"
		} else {
			flagSortDirName = fmt.Sprintf("%v.sort_dir", cmdPrefix)
		}

		flagSortDirValue, err := cmd.Flags().GetString(flagSortDirName)
		if err != nil {
			return err, false
		}
		m.SortDir = flagSortDirValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExposedSearchRequestPropStartFlags(depth int, m *models.ExposedSearchRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStartName := fmt.Sprintf("%v.start", cmdPrefix)
	if cmd.Flags().Changed(flagStartName) {
		// warning: start array type []interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
