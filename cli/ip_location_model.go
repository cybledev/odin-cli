// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for IPLocation

// register flags to command
func registerModelIPLocationFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIPLocationPropCity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPLocationPropContinent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPLocationPropCoordinates(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPLocationPropCountryCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPLocationPropCountryName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPLocationPropGeoPoint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPLocationPropLocaleCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPLocationPropNetwork(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPLocationPropPostalCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIPLocationPropCity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCityDescription := ``

	var flagCityName string
	if cmdPrefix == "" {
		flagCityName = "city"
	} else {
		flagCityName = fmt.Sprintf("%v.city", cmdPrefix)
	}

	var flagCityDefault string

	_ = cmd.PersistentFlags().String(flagCityName, flagCityDefault, flagCityDescription)

	return nil
}

func registerIPLocationPropContinent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagContinentDescription := ``

	var flagContinentName string
	if cmdPrefix == "" {
		flagContinentName = "continent"
	} else {
		flagContinentName = fmt.Sprintf("%v.continent", cmdPrefix)
	}

	var flagContinentDefault string

	_ = cmd.PersistentFlags().String(flagContinentName, flagContinentDefault, flagContinentDescription)

	return nil
}

func registerIPLocationPropCoordinates(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: coordinates interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerIPLocationPropCountryCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountryCodeDescription := ``

	var flagCountryCodeName string
	if cmdPrefix == "" {
		flagCountryCodeName = "country_code"
	} else {
		flagCountryCodeName = fmt.Sprintf("%v.country_code", cmdPrefix)
	}

	var flagCountryCodeDefault string

	_ = cmd.PersistentFlags().String(flagCountryCodeName, flagCountryCodeDefault, flagCountryCodeDescription)

	return nil
}

func registerIPLocationPropCountryName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountryNameDescription := ``

	var flagCountryNameName string
	if cmdPrefix == "" {
		flagCountryNameName = "country_name"
	} else {
		flagCountryNameName = fmt.Sprintf("%v.country_name", cmdPrefix)
	}

	var flagCountryNameDefault string

	_ = cmd.PersistentFlags().String(flagCountryNameName, flagCountryNameDefault, flagCountryNameDescription)

	return nil
}

func registerIPLocationPropGeoPoint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagGeoPointDescription := ``

	var flagGeoPointName string
	if cmdPrefix == "" {
		flagGeoPointName = "geo_point"
	} else {
		flagGeoPointName = fmt.Sprintf("%v.geo_point", cmdPrefix)
	}

	var flagGeoPointDefault string

	_ = cmd.PersistentFlags().String(flagGeoPointName, flagGeoPointDefault, flagGeoPointDescription)

	return nil
}

func registerIPLocationPropLocaleCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLocaleCodeDescription := ``

	var flagLocaleCodeName string
	if cmdPrefix == "" {
		flagLocaleCodeName = "locale_code"
	} else {
		flagLocaleCodeName = fmt.Sprintf("%v.locale_code", cmdPrefix)
	}

	var flagLocaleCodeDefault string

	_ = cmd.PersistentFlags().String(flagLocaleCodeName, flagLocaleCodeDefault, flagLocaleCodeDescription)

	return nil
}

func registerIPLocationPropNetwork(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNetworkDescription := ``

	var flagNetworkName string
	if cmdPrefix == "" {
		flagNetworkName = "network"
	} else {
		flagNetworkName = fmt.Sprintf("%v.network", cmdPrefix)
	}

	var flagNetworkDefault string

	_ = cmd.PersistentFlags().String(flagNetworkName, flagNetworkDefault, flagNetworkDescription)

	return nil
}

func registerIPLocationPropPostalCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagPostalCodeDescription := ``

	var flagPostalCodeName string
	if cmdPrefix == "" {
		flagPostalCodeName = "postal_code"
	} else {
		flagPostalCodeName = fmt.Sprintf("%v.postal_code", cmdPrefix)
	}

	var flagPostalCodeDefault string

	_ = cmd.PersistentFlags().String(flagPostalCodeName, flagPostalCodeDefault, flagPostalCodeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIPLocationFlags(depth int, m *models.IPLocation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CityAdded := retrieveIPLocationPropCityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CityAdded

	err, ContinentAdded := retrieveIPLocationPropContinentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ContinentAdded

	err, CoordinatesAdded := retrieveIPLocationPropCoordinatesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CoordinatesAdded

	err, CountryCodeAdded := retrieveIPLocationPropCountryCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountryCodeAdded

	err, CountryNameAdded := retrieveIPLocationPropCountryNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountryNameAdded

	err, GeoPointAdded := retrieveIPLocationPropGeoPointFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GeoPointAdded

	err, LocaleCodeAdded := retrieveIPLocationPropLocaleCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LocaleCodeAdded

	err, NetworkAdded := retrieveIPLocationPropNetworkFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NetworkAdded

	err, PostalCodeAdded := retrieveIPLocationPropPostalCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PostalCodeAdded

	return nil, retAdded
}

func retrieveIPLocationPropCityFlags(depth int, m *models.IPLocation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCityName := fmt.Sprintf("%v.city", cmdPrefix)
	if cmd.Flags().Changed(flagCityName) {

		var flagCityName string
		if cmdPrefix == "" {
			flagCityName = "city"
		} else {
			flagCityName = fmt.Sprintf("%v.city", cmdPrefix)
		}

		flagCityValue, err := cmd.Flags().GetString(flagCityName)
		if err != nil {
			return err, false
		}
		m.City = flagCityValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPLocationPropContinentFlags(depth int, m *models.IPLocation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagContinentName := fmt.Sprintf("%v.continent", cmdPrefix)
	if cmd.Flags().Changed(flagContinentName) {

		var flagContinentName string
		if cmdPrefix == "" {
			flagContinentName = "continent"
		} else {
			flagContinentName = fmt.Sprintf("%v.continent", cmdPrefix)
		}

		flagContinentValue, err := cmd.Flags().GetString(flagContinentName)
		if err != nil {
			return err, false
		}
		m.Continent = flagContinentValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPLocationPropCoordinatesFlags(depth int, m *models.IPLocation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCoordinatesName := fmt.Sprintf("%v.coordinates", cmdPrefix)
	if cmd.Flags().Changed(flagCoordinatesName) {
		// warning: coordinates map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIPLocationPropCountryCodeFlags(depth int, m *models.IPLocation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountryCodeName := fmt.Sprintf("%v.country_code", cmdPrefix)
	if cmd.Flags().Changed(flagCountryCodeName) {

		var flagCountryCodeName string
		if cmdPrefix == "" {
			flagCountryCodeName = "country_code"
		} else {
			flagCountryCodeName = fmt.Sprintf("%v.country_code", cmdPrefix)
		}

		flagCountryCodeValue, err := cmd.Flags().GetString(flagCountryCodeName)
		if err != nil {
			return err, false
		}
		m.CountryCode = flagCountryCodeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPLocationPropCountryNameFlags(depth int, m *models.IPLocation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountryNameName := fmt.Sprintf("%v.country_name", cmdPrefix)
	if cmd.Flags().Changed(flagCountryNameName) {

		var flagCountryNameName string
		if cmdPrefix == "" {
			flagCountryNameName = "country_name"
		} else {
			flagCountryNameName = fmt.Sprintf("%v.country_name", cmdPrefix)
		}

		flagCountryNameValue, err := cmd.Flags().GetString(flagCountryNameName)
		if err != nil {
			return err, false
		}
		m.CountryName = flagCountryNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPLocationPropGeoPointFlags(depth int, m *models.IPLocation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagGeoPointName := fmt.Sprintf("%v.geo_point", cmdPrefix)
	if cmd.Flags().Changed(flagGeoPointName) {

		var flagGeoPointName string
		if cmdPrefix == "" {
			flagGeoPointName = "geo_point"
		} else {
			flagGeoPointName = fmt.Sprintf("%v.geo_point", cmdPrefix)
		}

		flagGeoPointValue, err := cmd.Flags().GetString(flagGeoPointName)
		if err != nil {
			return err, false
		}
		m.GeoPoint = flagGeoPointValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPLocationPropLocaleCodeFlags(depth int, m *models.IPLocation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLocaleCodeName := fmt.Sprintf("%v.locale_code", cmdPrefix)
	if cmd.Flags().Changed(flagLocaleCodeName) {

		var flagLocaleCodeName string
		if cmdPrefix == "" {
			flagLocaleCodeName = "locale_code"
		} else {
			flagLocaleCodeName = fmt.Sprintf("%v.locale_code", cmdPrefix)
		}

		flagLocaleCodeValue, err := cmd.Flags().GetString(flagLocaleCodeName)
		if err != nil {
			return err, false
		}
		m.LocaleCode = flagLocaleCodeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPLocationPropNetworkFlags(depth int, m *models.IPLocation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNetworkName := fmt.Sprintf("%v.network", cmdPrefix)
	if cmd.Flags().Changed(flagNetworkName) {

		var flagNetworkName string
		if cmdPrefix == "" {
			flagNetworkName = "network"
		} else {
			flagNetworkName = fmt.Sprintf("%v.network", cmdPrefix)
		}

		flagNetworkValue, err := cmd.Flags().GetString(flagNetworkName)
		if err != nil {
			return err, false
		}
		m.Network = flagNetworkValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPLocationPropPostalCodeFlags(depth int, m *models.IPLocation, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPostalCodeName := fmt.Sprintf("%v.postal_code", cmdPrefix)
	if cmd.Flags().Changed(flagPostalCodeName) {

		var flagPostalCodeName string
		if cmdPrefix == "" {
			flagPostalCodeName = "postal_code"
		} else {
			flagPostalCodeName = fmt.Sprintf("%v.postal_code", cmdPrefix)
		}

		flagPostalCodeValue, err := cmd.Flags().GetString(flagPostalCodeName)
		if err != nil {
			return err, false
		}
		m.PostalCode = flagPostalCodeValue

		retAdded = true
	}

	return nil, retAdded
}
