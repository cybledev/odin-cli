// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for IPDomain

// register flags to command
func registerModelIPDomainFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIPDomainPropCountry(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPDomainPropDNSServers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPDomainPropEmails(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPDomainPropLastUpdatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPDomainPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPDomainPropWebServer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIPDomainPropCountry(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountryDescription := ``

	var flagCountryName string
	if cmdPrefix == "" {
		flagCountryName = "country"
	} else {
		flagCountryName = fmt.Sprintf("%v.country", cmdPrefix)
	}

	var flagCountryDefault string

	_ = cmd.PersistentFlags().String(flagCountryName, flagCountryDefault, flagCountryDescription)

	return nil
}

func registerIPDomainPropDNSServers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: dns_servers []string array type is not supported by go-swagger cli yet

	return nil
}

func registerIPDomainPropEmails(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: emails []string array type is not supported by go-swagger cli yet

	return nil
}

func registerIPDomainPropLastUpdatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLastUpdatedAtDescription := ``

	var flagLastUpdatedAtName string
	if cmdPrefix == "" {
		flagLastUpdatedAtName = "last_updated_at"
	} else {
		flagLastUpdatedAtName = fmt.Sprintf("%v.last_updated_at", cmdPrefix)
	}

	var flagLastUpdatedAtDefault string

	_ = cmd.PersistentFlags().String(flagLastUpdatedAtName, flagLastUpdatedAtDefault, flagLastUpdatedAtDescription)

	return nil
}

func registerIPDomainPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := ``

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerIPDomainPropWebServer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagWebServerDescription := ``

	var flagWebServerName string
	if cmdPrefix == "" {
		flagWebServerName = "web_server"
	} else {
		flagWebServerName = fmt.Sprintf("%v.web_server", cmdPrefix)
	}

	var flagWebServerDefault string

	_ = cmd.PersistentFlags().String(flagWebServerName, flagWebServerDefault, flagWebServerDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIPDomainFlags(depth int, m *models.IPDomain, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountryAdded := retrieveIPDomainPropCountryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountryAdded

	err, DNSServersAdded := retrieveIPDomainPropDNSServersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DNSServersAdded

	err, EmailsAdded := retrieveIPDomainPropEmailsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EmailsAdded

	err, LastUpdatedAtAdded := retrieveIPDomainPropLastUpdatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LastUpdatedAtAdded

	err, NameAdded := retrieveIPDomainPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, WebServerAdded := retrieveIPDomainPropWebServerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WebServerAdded

	return nil, retAdded
}

func retrieveIPDomainPropCountryFlags(depth int, m *models.IPDomain, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountryName := fmt.Sprintf("%v.country", cmdPrefix)
	if cmd.Flags().Changed(flagCountryName) {

		var flagCountryName string
		if cmdPrefix == "" {
			flagCountryName = "country"
		} else {
			flagCountryName = fmt.Sprintf("%v.country", cmdPrefix)
		}

		flagCountryValue, err := cmd.Flags().GetString(flagCountryName)
		if err != nil {
			return err, false
		}
		m.Country = flagCountryValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPDomainPropDNSServersFlags(depth int, m *models.IPDomain, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDNSServersName := fmt.Sprintf("%v.dns_servers", cmdPrefix)
	if cmd.Flags().Changed(flagDNSServersName) {
		// warning: dns_servers array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIPDomainPropEmailsFlags(depth int, m *models.IPDomain, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagEmailsName := fmt.Sprintf("%v.emails", cmdPrefix)
	if cmd.Flags().Changed(flagEmailsName) {
		// warning: emails array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIPDomainPropLastUpdatedAtFlags(depth int, m *models.IPDomain, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLastUpdatedAtName := fmt.Sprintf("%v.last_updated_at", cmdPrefix)
	if cmd.Flags().Changed(flagLastUpdatedAtName) {

		var flagLastUpdatedAtName string
		if cmdPrefix == "" {
			flagLastUpdatedAtName = "last_updated_at"
		} else {
			flagLastUpdatedAtName = fmt.Sprintf("%v.last_updated_at", cmdPrefix)
		}

		flagLastUpdatedAtValue, err := cmd.Flags().GetString(flagLastUpdatedAtName)
		if err != nil {
			return err, false
		}
		m.LastUpdatedAt = flagLastUpdatedAtValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPDomainPropNameFlags(depth int, m *models.IPDomain, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPDomainPropWebServerFlags(depth int, m *models.IPDomain, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagWebServerName := fmt.Sprintf("%v.web_server", cmdPrefix)
	if cmd.Flags().Changed(flagWebServerName) {

		var flagWebServerName string
		if cmdPrefix == "" {
			flagWebServerName = "web_server"
		} else {
			flagWebServerName = fmt.Sprintf("%v.web_server", cmdPrefix)
		}

		flagWebServerValue, err := cmd.Flags().GetString(flagWebServerName)
		if err != nil {
			return err, false
		}
		m.WebServer = flagWebServerValue

		retAdded = true
	}

	return nil, retAdded
}
