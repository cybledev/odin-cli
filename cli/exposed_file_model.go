// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for ExposedFile

// register flags to command
func registerModelExposedFileFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerExposedFilePropAccessible(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExposedFilePropBucket(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExposedFilePropCategory(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExposedFilePropEtag(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExposedFilePropExt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExposedFilePropExtDesc(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExposedFilePropInsAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExposedFilePropLabel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExposedFilePropModAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExposedFilePropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExposedFilePropPath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExposedFilePropProvider(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExposedFilePropRegion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExposedFilePropScanAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExposedFilePropSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExposedFilePropType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExposedFilePropURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerExposedFilePropAccessible(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagAccessibleDescription := ``

	var flagAccessibleName string
	if cmdPrefix == "" {
		flagAccessibleName = "accessible"
	} else {
		flagAccessibleName = fmt.Sprintf("%v.accessible", cmdPrefix)
	}

	var flagAccessibleDefault bool

	_ = cmd.PersistentFlags().Bool(flagAccessibleName, flagAccessibleDefault, flagAccessibleDescription)

	return nil
}

func registerExposedFilePropBucket(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagBucketDescription := ``

	var flagBucketName string
	if cmdPrefix == "" {
		flagBucketName = "bucket"
	} else {
		flagBucketName = fmt.Sprintf("%v.bucket", cmdPrefix)
	}

	var flagBucketDefault string

	_ = cmd.PersistentFlags().String(flagBucketName, flagBucketDefault, flagBucketDescription)

	return nil
}

func registerExposedFilePropCategory(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCategoryDescription := ``

	var flagCategoryName string
	if cmdPrefix == "" {
		flagCategoryName = "category"
	} else {
		flagCategoryName = fmt.Sprintf("%v.category", cmdPrefix)
	}

	var flagCategoryDefault string

	_ = cmd.PersistentFlags().String(flagCategoryName, flagCategoryDefault, flagCategoryDescription)

	return nil
}

func registerExposedFilePropEtag(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagEtagDescription := ``

	var flagEtagName string
	if cmdPrefix == "" {
		flagEtagName = "etag"
	} else {
		flagEtagName = fmt.Sprintf("%v.etag", cmdPrefix)
	}

	var flagEtagDefault string

	_ = cmd.PersistentFlags().String(flagEtagName, flagEtagDefault, flagEtagDescription)

	return nil
}

func registerExposedFilePropExt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagExtDescription := ``

	var flagExtName string
	if cmdPrefix == "" {
		flagExtName = "ext"
	} else {
		flagExtName = fmt.Sprintf("%v.ext", cmdPrefix)
	}

	var flagExtDefault string

	_ = cmd.PersistentFlags().String(flagExtName, flagExtDefault, flagExtDescription)

	return nil
}

func registerExposedFilePropExtDesc(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagExtDescDescription := ``

	var flagExtDescName string
	if cmdPrefix == "" {
		flagExtDescName = "ext_desc"
	} else {
		flagExtDescName = fmt.Sprintf("%v.ext_desc", cmdPrefix)
	}

	var flagExtDescDefault string

	_ = cmd.PersistentFlags().String(flagExtDescName, flagExtDescDefault, flagExtDescDescription)

	return nil
}

func registerExposedFilePropInsAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagInsAtDescription := ``

	var flagInsAtName string
	if cmdPrefix == "" {
		flagInsAtName = "ins_at"
	} else {
		flagInsAtName = fmt.Sprintf("%v.ins_at", cmdPrefix)
	}

	var flagInsAtDefault string

	_ = cmd.PersistentFlags().String(flagInsAtName, flagInsAtDefault, flagInsAtDescription)

	return nil
}

func registerExposedFilePropLabel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLabelDescription := ``

	var flagLabelName string
	if cmdPrefix == "" {
		flagLabelName = "label"
	} else {
		flagLabelName = fmt.Sprintf("%v.label", cmdPrefix)
	}

	var flagLabelDefault string

	_ = cmd.PersistentFlags().String(flagLabelName, flagLabelDefault, flagLabelDescription)

	return nil
}

func registerExposedFilePropModAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagModAtDescription := ``

	var flagModAtName string
	if cmdPrefix == "" {
		flagModAtName = "mod_at"
	} else {
		flagModAtName = fmt.Sprintf("%v.mod_at", cmdPrefix)
	}

	var flagModAtDefault string

	_ = cmd.PersistentFlags().String(flagModAtName, flagModAtDefault, flagModAtDescription)

	return nil
}

func registerExposedFilePropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := ``

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerExposedFilePropPath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagPathDescription := ``

	var flagPathName string
	if cmdPrefix == "" {
		flagPathName = "path"
	} else {
		flagPathName = fmt.Sprintf("%v.path", cmdPrefix)
	}

	var flagPathDefault string

	_ = cmd.PersistentFlags().String(flagPathName, flagPathDefault, flagPathDescription)

	return nil
}

func registerExposedFilePropProvider(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagProviderDescription := ``

	var flagProviderName string
	if cmdPrefix == "" {
		flagProviderName = "provider"
	} else {
		flagProviderName = fmt.Sprintf("%v.provider", cmdPrefix)
	}

	var flagProviderDefault string

	_ = cmd.PersistentFlags().String(flagProviderName, flagProviderDefault, flagProviderDescription)

	return nil
}

func registerExposedFilePropRegion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagRegionDescription := ``

	var flagRegionName string
	if cmdPrefix == "" {
		flagRegionName = "region"
	} else {
		flagRegionName = fmt.Sprintf("%v.region", cmdPrefix)
	}

	var flagRegionDefault string

	_ = cmd.PersistentFlags().String(flagRegionName, flagRegionDefault, flagRegionDescription)

	return nil
}

func registerExposedFilePropScanAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagScanAtDescription := ``

	var flagScanAtName string
	if cmdPrefix == "" {
		flagScanAtName = "scan_at"
	} else {
		flagScanAtName = fmt.Sprintf("%v.scan_at", cmdPrefix)
	}

	var flagScanAtDefault string

	_ = cmd.PersistentFlags().String(flagScanAtName, flagScanAtDefault, flagScanAtDescription)

	return nil
}

func registerExposedFilePropSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSizeDescription := ``

	var flagSizeName string
	if cmdPrefix == "" {
		flagSizeName = "size"
	} else {
		flagSizeName = fmt.Sprintf("%v.size", cmdPrefix)
	}

	var flagSizeDefault int64

	_ = cmd.PersistentFlags().Int64(flagSizeName, flagSizeDefault, flagSizeDescription)

	return nil
}

func registerExposedFilePropType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTypeDescription := ``

	var flagTypeName string
	if cmdPrefix == "" {
		flagTypeName = "type"
	} else {
		flagTypeName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var flagTypeDefault string

	_ = cmd.PersistentFlags().String(flagTypeName, flagTypeDefault, flagTypeDescription)

	return nil
}

func registerExposedFilePropURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagURLDescription := ``

	var flagURLName string
	if cmdPrefix == "" {
		flagURLName = "url"
	} else {
		flagURLName = fmt.Sprintf("%v.url", cmdPrefix)
	}

	var flagURLDefault string

	_ = cmd.PersistentFlags().String(flagURLName, flagURLDefault, flagURLDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelExposedFileFlags(depth int, m *models.ExposedFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AccessibleAdded := retrieveExposedFilePropAccessibleFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AccessibleAdded

	err, BucketAdded := retrieveExposedFilePropBucketFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BucketAdded

	err, CategoryAdded := retrieveExposedFilePropCategoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CategoryAdded

	err, EtagAdded := retrieveExposedFilePropEtagFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EtagAdded

	err, ExtAdded := retrieveExposedFilePropExtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ExtAdded

	err, ExtDescAdded := retrieveExposedFilePropExtDescFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ExtDescAdded

	err, InsAtAdded := retrieveExposedFilePropInsAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || InsAtAdded

	err, LabelAdded := retrieveExposedFilePropLabelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LabelAdded

	err, ModAtAdded := retrieveExposedFilePropModAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ModAtAdded

	err, NameAdded := retrieveExposedFilePropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, PathAdded := retrieveExposedFilePropPathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PathAdded

	err, ProviderAdded := retrieveExposedFilePropProviderFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ProviderAdded

	err, RegionAdded := retrieveExposedFilePropRegionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RegionAdded

	err, ScanAtAdded := retrieveExposedFilePropScanAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ScanAtAdded

	err, SizeAdded := retrieveExposedFilePropSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SizeAdded

	err, TypeAdded := retrieveExposedFilePropTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TypeAdded

	err, URLAdded := retrieveExposedFilePropURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || URLAdded

	return nil, retAdded
}

func retrieveExposedFilePropAccessibleFlags(depth int, m *models.ExposedFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAccessibleName := fmt.Sprintf("%v.accessible", cmdPrefix)
	if cmd.Flags().Changed(flagAccessibleName) {

		var flagAccessibleName string
		if cmdPrefix == "" {
			flagAccessibleName = "accessible"
		} else {
			flagAccessibleName = fmt.Sprintf("%v.accessible", cmdPrefix)
		}

		flagAccessibleValue, err := cmd.Flags().GetBool(flagAccessibleName)
		if err != nil {
			return err, false
		}
		m.Accessible = flagAccessibleValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExposedFilePropBucketFlags(depth int, m *models.ExposedFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagBucketName := fmt.Sprintf("%v.bucket", cmdPrefix)
	if cmd.Flags().Changed(flagBucketName) {

		var flagBucketName string
		if cmdPrefix == "" {
			flagBucketName = "bucket"
		} else {
			flagBucketName = fmt.Sprintf("%v.bucket", cmdPrefix)
		}

		flagBucketValue, err := cmd.Flags().GetString(flagBucketName)
		if err != nil {
			return err, false
		}
		m.Bucket = flagBucketValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExposedFilePropCategoryFlags(depth int, m *models.ExposedFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCategoryName := fmt.Sprintf("%v.category", cmdPrefix)
	if cmd.Flags().Changed(flagCategoryName) {

		var flagCategoryName string
		if cmdPrefix == "" {
			flagCategoryName = "category"
		} else {
			flagCategoryName = fmt.Sprintf("%v.category", cmdPrefix)
		}

		flagCategoryValue, err := cmd.Flags().GetString(flagCategoryName)
		if err != nil {
			return err, false
		}
		m.Category = flagCategoryValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExposedFilePropEtagFlags(depth int, m *models.ExposedFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagEtagName := fmt.Sprintf("%v.etag", cmdPrefix)
	if cmd.Flags().Changed(flagEtagName) {

		var flagEtagName string
		if cmdPrefix == "" {
			flagEtagName = "etag"
		} else {
			flagEtagName = fmt.Sprintf("%v.etag", cmdPrefix)
		}

		flagEtagValue, err := cmd.Flags().GetString(flagEtagName)
		if err != nil {
			return err, false
		}
		m.Etag = flagEtagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExposedFilePropExtFlags(depth int, m *models.ExposedFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagExtName := fmt.Sprintf("%v.ext", cmdPrefix)
	if cmd.Flags().Changed(flagExtName) {

		var flagExtName string
		if cmdPrefix == "" {
			flagExtName = "ext"
		} else {
			flagExtName = fmt.Sprintf("%v.ext", cmdPrefix)
		}

		flagExtValue, err := cmd.Flags().GetString(flagExtName)
		if err != nil {
			return err, false
		}
		m.Ext = flagExtValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExposedFilePropExtDescFlags(depth int, m *models.ExposedFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagExtDescName := fmt.Sprintf("%v.ext_desc", cmdPrefix)
	if cmd.Flags().Changed(flagExtDescName) {

		var flagExtDescName string
		if cmdPrefix == "" {
			flagExtDescName = "ext_desc"
		} else {
			flagExtDescName = fmt.Sprintf("%v.ext_desc", cmdPrefix)
		}

		flagExtDescValue, err := cmd.Flags().GetString(flagExtDescName)
		if err != nil {
			return err, false
		}
		m.ExtDesc = flagExtDescValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExposedFilePropInsAtFlags(depth int, m *models.ExposedFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagInsAtName := fmt.Sprintf("%v.ins_at", cmdPrefix)
	if cmd.Flags().Changed(flagInsAtName) {

		var flagInsAtName string
		if cmdPrefix == "" {
			flagInsAtName = "ins_at"
		} else {
			flagInsAtName = fmt.Sprintf("%v.ins_at", cmdPrefix)
		}

		flagInsAtValue, err := cmd.Flags().GetString(flagInsAtName)
		if err != nil {
			return err, false
		}
		m.InsAt = flagInsAtValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExposedFilePropLabelFlags(depth int, m *models.ExposedFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLabelName := fmt.Sprintf("%v.label", cmdPrefix)
	if cmd.Flags().Changed(flagLabelName) {

		var flagLabelName string
		if cmdPrefix == "" {
			flagLabelName = "label"
		} else {
			flagLabelName = fmt.Sprintf("%v.label", cmdPrefix)
		}

		flagLabelValue, err := cmd.Flags().GetString(flagLabelName)
		if err != nil {
			return err, false
		}
		m.Label = flagLabelValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExposedFilePropModAtFlags(depth int, m *models.ExposedFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagModAtName := fmt.Sprintf("%v.mod_at", cmdPrefix)
	if cmd.Flags().Changed(flagModAtName) {

		var flagModAtName string
		if cmdPrefix == "" {
			flagModAtName = "mod_at"
		} else {
			flagModAtName = fmt.Sprintf("%v.mod_at", cmdPrefix)
		}

		flagModAtValue, err := cmd.Flags().GetString(flagModAtName)
		if err != nil {
			return err, false
		}
		m.ModAt = flagModAtValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExposedFilePropNameFlags(depth int, m *models.ExposedFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExposedFilePropPathFlags(depth int, m *models.ExposedFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPathName := fmt.Sprintf("%v.path", cmdPrefix)
	if cmd.Flags().Changed(flagPathName) {

		var flagPathName string
		if cmdPrefix == "" {
			flagPathName = "path"
		} else {
			flagPathName = fmt.Sprintf("%v.path", cmdPrefix)
		}

		flagPathValue, err := cmd.Flags().GetString(flagPathName)
		if err != nil {
			return err, false
		}
		m.Path = flagPathValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExposedFilePropProviderFlags(depth int, m *models.ExposedFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagProviderName := fmt.Sprintf("%v.provider", cmdPrefix)
	if cmd.Flags().Changed(flagProviderName) {

		var flagProviderName string
		if cmdPrefix == "" {
			flagProviderName = "provider"
		} else {
			flagProviderName = fmt.Sprintf("%v.provider", cmdPrefix)
		}

		flagProviderValue, err := cmd.Flags().GetString(flagProviderName)
		if err != nil {
			return err, false
		}
		m.Provider = flagProviderValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExposedFilePropRegionFlags(depth int, m *models.ExposedFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagRegionName := fmt.Sprintf("%v.region", cmdPrefix)
	if cmd.Flags().Changed(flagRegionName) {

		var flagRegionName string
		if cmdPrefix == "" {
			flagRegionName = "region"
		} else {
			flagRegionName = fmt.Sprintf("%v.region", cmdPrefix)
		}

		flagRegionValue, err := cmd.Flags().GetString(flagRegionName)
		if err != nil {
			return err, false
		}
		m.Region = flagRegionValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExposedFilePropScanAtFlags(depth int, m *models.ExposedFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagScanAtName := fmt.Sprintf("%v.scan_at", cmdPrefix)
	if cmd.Flags().Changed(flagScanAtName) {

		var flagScanAtName string
		if cmdPrefix == "" {
			flagScanAtName = "scan_at"
		} else {
			flagScanAtName = fmt.Sprintf("%v.scan_at", cmdPrefix)
		}

		flagScanAtValue, err := cmd.Flags().GetString(flagScanAtName)
		if err != nil {
			return err, false
		}
		m.ScanAt = flagScanAtValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExposedFilePropSizeFlags(depth int, m *models.ExposedFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSizeName := fmt.Sprintf("%v.size", cmdPrefix)
	if cmd.Flags().Changed(flagSizeName) {

		var flagSizeName string
		if cmdPrefix == "" {
			flagSizeName = "size"
		} else {
			flagSizeName = fmt.Sprintf("%v.size", cmdPrefix)
		}

		flagSizeValue, err := cmd.Flags().GetInt64(flagSizeName)
		if err != nil {
			return err, false
		}
		m.Size = flagSizeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExposedFilePropTypeFlags(depth int, m *models.ExposedFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTypeName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(flagTypeName) {

		var flagTypeName string
		if cmdPrefix == "" {
			flagTypeName = "type"
		} else {
			flagTypeName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		flagTypeValue, err := cmd.Flags().GetString(flagTypeName)
		if err != nil {
			return err, false
		}
		m.Type = flagTypeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExposedFilePropURLFlags(depth int, m *models.ExposedFile, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagURLName := fmt.Sprintf("%v.url", cmdPrefix)
	if cmd.Flags().Changed(flagURLName) {

		var flagURLName string
		if cmdPrefix == "" {
			flagURLName = "url"
		} else {
			flagURLName = fmt.Sprintf("%v.url", cmdPrefix)
		}

		flagURLValue, err := cmd.Flags().GetString(flagURLName)
		if err != nil {
			return err, false
		}
		m.URL = flagURLValue

		retAdded = true
	}

	return nil, retAdded
}
