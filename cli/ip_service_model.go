// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for IPService

// register flags to command
func registerModelIPServiceFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIPServicePropMeta(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPServicePropCve(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPServicePropExtraInfo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPServicePropLastUpdatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPServicePropModules(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPServicePropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPServicePropPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPServicePropProduct(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPServicePropProtocol(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPServicePropSoftwares(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPServicePropTunnel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPServicePropURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPServicePropVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIPServicePropMeta(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagMetaName string
	if cmdPrefix == "" {
		flagMetaName = "_meta"
	} else {
		flagMetaName = fmt.Sprintf("%v._meta", cmdPrefix)
	}

	if err := registerModelIPServiceMetaFlags(depth+1, flagMetaName, cmd); err != nil {
		return err
	}

	return nil
}

func registerIPServicePropCve(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: cve []*IPCVE array type is not supported by go-swagger cli yet

	return nil
}

func registerIPServicePropExtraInfo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagExtraInfoDescription := ``

	var flagExtraInfoName string
	if cmdPrefix == "" {
		flagExtraInfoName = "extra_info"
	} else {
		flagExtraInfoName = fmt.Sprintf("%v.extra_info", cmdPrefix)
	}

	var flagExtraInfoDefault string

	_ = cmd.PersistentFlags().String(flagExtraInfoName, flagExtraInfoDefault, flagExtraInfoDescription)

	return nil
}

func registerIPServicePropLastUpdatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLastUpdatedAtDescription := ``

	var flagLastUpdatedAtName string
	if cmdPrefix == "" {
		flagLastUpdatedAtName = "last_updated_at"
	} else {
		flagLastUpdatedAtName = fmt.Sprintf("%v.last_updated_at", cmdPrefix)
	}

	var flagLastUpdatedAtDefault string

	_ = cmd.PersistentFlags().String(flagLastUpdatedAtName, flagLastUpdatedAtDefault, flagLastUpdatedAtDescription)

	return nil
}

func registerIPServicePropModules(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: modules interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerIPServicePropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := ``

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerIPServicePropPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagPortDescription := ``

	var flagPortName string
	if cmdPrefix == "" {
		flagPortName = "port"
	} else {
		flagPortName = fmt.Sprintf("%v.port", cmdPrefix)
	}

	var flagPortDefault int64

	_ = cmd.PersistentFlags().Int64(flagPortName, flagPortDefault, flagPortDescription)

	return nil
}

func registerIPServicePropProduct(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagProductDescription := ``

	var flagProductName string
	if cmdPrefix == "" {
		flagProductName = "product"
	} else {
		flagProductName = fmt.Sprintf("%v.product", cmdPrefix)
	}

	var flagProductDefault string

	_ = cmd.PersistentFlags().String(flagProductName, flagProductDefault, flagProductDescription)

	return nil
}

func registerIPServicePropProtocol(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagProtocolDescription := ``

	var flagProtocolName string
	if cmdPrefix == "" {
		flagProtocolName = "protocol"
	} else {
		flagProtocolName = fmt.Sprintf("%v.protocol", cmdPrefix)
	}

	var flagProtocolDefault string

	_ = cmd.PersistentFlags().String(flagProtocolName, flagProtocolDefault, flagProtocolDescription)

	return nil
}

func registerIPServicePropSoftwares(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: softwares []*IPServiceSoftware array type is not supported by go-swagger cli yet

	return nil
}

func registerIPServicePropTunnel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTunnelDescription := ``

	var flagTunnelName string
	if cmdPrefix == "" {
		flagTunnelName = "tunnel"
	} else {
		flagTunnelName = fmt.Sprintf("%v.tunnel", cmdPrefix)
	}

	var flagTunnelDefault string

	_ = cmd.PersistentFlags().String(flagTunnelName, flagTunnelDefault, flagTunnelDescription)

	return nil
}

func registerIPServicePropURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagURLDescription := ``

	var flagURLName string
	if cmdPrefix == "" {
		flagURLName = "url"
	} else {
		flagURLName = fmt.Sprintf("%v.url", cmdPrefix)
	}

	var flagURLDefault string

	_ = cmd.PersistentFlags().String(flagURLName, flagURLDefault, flagURLDescription)

	return nil
}

func registerIPServicePropVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagVersionDescription := ``

	var flagVersionName string
	if cmdPrefix == "" {
		flagVersionName = "version"
	} else {
		flagVersionName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var flagVersionDefault string

	_ = cmd.PersistentFlags().String(flagVersionName, flagVersionDefault, flagVersionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIPServiceFlags(depth int, m *models.IPService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, MetaAdded := retrieveIPServicePropMetaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MetaAdded

	err, CveAdded := retrieveIPServicePropCveFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CveAdded

	err, ExtraInfoAdded := retrieveIPServicePropExtraInfoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ExtraInfoAdded

	err, LastUpdatedAtAdded := retrieveIPServicePropLastUpdatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LastUpdatedAtAdded

	err, ModulesAdded := retrieveIPServicePropModulesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ModulesAdded

	err, NameAdded := retrieveIPServicePropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, PortAdded := retrieveIPServicePropPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PortAdded

	err, ProductAdded := retrieveIPServicePropProductFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ProductAdded

	err, ProtocolAdded := retrieveIPServicePropProtocolFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ProtocolAdded

	err, SoftwaresAdded := retrieveIPServicePropSoftwaresFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SoftwaresAdded

	err, TunnelAdded := retrieveIPServicePropTunnelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TunnelAdded

	err, URLAdded := retrieveIPServicePropURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || URLAdded

	err, VersionAdded := retrieveIPServicePropVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VersionAdded

	return nil, retAdded
}

func retrieveIPServicePropMetaFlags(depth int, m *models.IPService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMetaName := fmt.Sprintf("%v._meta", cmdPrefix)
	if cmd.Flags().Changed(flagMetaName) {
		// info: complex object _meta IPServiceMeta is retrieved outside this Changed() block
	}
	flagMetaValue := m.Meta
	if swag.IsZero(flagMetaValue) {
		flagMetaValue = &models.IPServiceMeta{}
	}

	err, MetaAdded := retrieveModelIPServiceMetaFlags(depth+1, flagMetaValue, flagMetaName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MetaAdded
	if MetaAdded {
		m.Meta = flagMetaValue
	}

	return nil, retAdded
}

func retrieveIPServicePropCveFlags(depth int, m *models.IPService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCveName := fmt.Sprintf("%v.cve", cmdPrefix)
	if cmd.Flags().Changed(flagCveName) {
		// warning: cve array type []*IPCVE is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIPServicePropExtraInfoFlags(depth int, m *models.IPService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagExtraInfoName := fmt.Sprintf("%v.extra_info", cmdPrefix)
	if cmd.Flags().Changed(flagExtraInfoName) {

		var flagExtraInfoName string
		if cmdPrefix == "" {
			flagExtraInfoName = "extra_info"
		} else {
			flagExtraInfoName = fmt.Sprintf("%v.extra_info", cmdPrefix)
		}

		flagExtraInfoValue, err := cmd.Flags().GetString(flagExtraInfoName)
		if err != nil {
			return err, false
		}
		m.ExtraInfo = flagExtraInfoValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPServicePropLastUpdatedAtFlags(depth int, m *models.IPService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLastUpdatedAtName := fmt.Sprintf("%v.last_updated_at", cmdPrefix)
	if cmd.Flags().Changed(flagLastUpdatedAtName) {

		var flagLastUpdatedAtName string
		if cmdPrefix == "" {
			flagLastUpdatedAtName = "last_updated_at"
		} else {
			flagLastUpdatedAtName = fmt.Sprintf("%v.last_updated_at", cmdPrefix)
		}

		flagLastUpdatedAtValue, err := cmd.Flags().GetString(flagLastUpdatedAtName)
		if err != nil {
			return err, false
		}
		m.LastUpdatedAt = flagLastUpdatedAtValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPServicePropModulesFlags(depth int, m *models.IPService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagModulesName := fmt.Sprintf("%v.modules", cmdPrefix)
	if cmd.Flags().Changed(flagModulesName) {
		// warning: modules map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIPServicePropNameFlags(depth int, m *models.IPService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPServicePropPortFlags(depth int, m *models.IPService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPortName := fmt.Sprintf("%v.port", cmdPrefix)
	if cmd.Flags().Changed(flagPortName) {

		var flagPortName string
		if cmdPrefix == "" {
			flagPortName = "port"
		} else {
			flagPortName = fmt.Sprintf("%v.port", cmdPrefix)
		}

		flagPortValue, err := cmd.Flags().GetInt64(flagPortName)
		if err != nil {
			return err, false
		}
		m.Port = flagPortValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPServicePropProductFlags(depth int, m *models.IPService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagProductName := fmt.Sprintf("%v.product", cmdPrefix)
	if cmd.Flags().Changed(flagProductName) {

		var flagProductName string
		if cmdPrefix == "" {
			flagProductName = "product"
		} else {
			flagProductName = fmt.Sprintf("%v.product", cmdPrefix)
		}

		flagProductValue, err := cmd.Flags().GetString(flagProductName)
		if err != nil {
			return err, false
		}
		m.Product = flagProductValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPServicePropProtocolFlags(depth int, m *models.IPService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagProtocolName := fmt.Sprintf("%v.protocol", cmdPrefix)
	if cmd.Flags().Changed(flagProtocolName) {

		var flagProtocolName string
		if cmdPrefix == "" {
			flagProtocolName = "protocol"
		} else {
			flagProtocolName = fmt.Sprintf("%v.protocol", cmdPrefix)
		}

		flagProtocolValue, err := cmd.Flags().GetString(flagProtocolName)
		if err != nil {
			return err, false
		}
		m.Protocol = flagProtocolValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPServicePropSoftwaresFlags(depth int, m *models.IPService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSoftwaresName := fmt.Sprintf("%v.softwares", cmdPrefix)
	if cmd.Flags().Changed(flagSoftwaresName) {
		// warning: softwares array type []*IPServiceSoftware is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIPServicePropTunnelFlags(depth int, m *models.IPService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTunnelName := fmt.Sprintf("%v.tunnel", cmdPrefix)
	if cmd.Flags().Changed(flagTunnelName) {

		var flagTunnelName string
		if cmdPrefix == "" {
			flagTunnelName = "tunnel"
		} else {
			flagTunnelName = fmt.Sprintf("%v.tunnel", cmdPrefix)
		}

		flagTunnelValue, err := cmd.Flags().GetString(flagTunnelName)
		if err != nil {
			return err, false
		}
		m.Tunnel = flagTunnelValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPServicePropURLFlags(depth int, m *models.IPService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagURLName := fmt.Sprintf("%v.url", cmdPrefix)
	if cmd.Flags().Changed(flagURLName) {

		var flagURLName string
		if cmdPrefix == "" {
			flagURLName = "url"
		} else {
			flagURLName = fmt.Sprintf("%v.url", cmdPrefix)
		}

		flagURLValue, err := cmd.Flags().GetString(flagURLName)
		if err != nil {
			return err, false
		}
		m.URL = flagURLValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPServicePropVersionFlags(depth int, m *models.IPService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVersionName := fmt.Sprintf("%v.version", cmdPrefix)
	if cmd.Flags().Changed(flagVersionName) {

		var flagVersionName string
		if cmdPrefix == "" {
			flagVersionName = "version"
		} else {
			flagVersionName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		flagVersionValue, err := cmd.Flags().GetString(flagVersionName)
		if err != nil {
			return err, false
		}
		m.Version = flagVersionValue

		retAdded = true
	}

	return nil, retAdded
}
