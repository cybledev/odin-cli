// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for CertificateCertificateHashResponse

// register flags to command
func registerModelCertificateCertificateHashResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCertificateCertificateHashResponsePropData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponsePropMessage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponsePropSuccess(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponsePropData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagDataName string
	if cmdPrefix == "" {
		flagDataName = "data"
	} else {
		flagDataName = fmt.Sprintf("%v.data", cmdPrefix)
	}

	if err := registerModelCertificateCertificateHashResponseDataFlags(depth+1, flagDataName, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponsePropMessage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMessageDescription := ``

	var flagMessageName string
	if cmdPrefix == "" {
		flagMessageName = "message"
	} else {
		flagMessageName = fmt.Sprintf("%v.message", cmdPrefix)
	}

	var flagMessageDefault string

	_ = cmd.PersistentFlags().String(flagMessageName, flagMessageDefault, flagMessageDescription)

	return nil
}

func registerCertificateCertificateHashResponsePropSuccess(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSuccessDescription := ``

	var flagSuccessName string
	if cmdPrefix == "" {
		flagSuccessName = "success"
	} else {
		flagSuccessName = fmt.Sprintf("%v.success", cmdPrefix)
	}

	var flagSuccessDefault bool

	_ = cmd.PersistentFlags().Bool(flagSuccessName, flagSuccessDefault, flagSuccessDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCertificateCertificateHashResponseFlags(depth int, m *models.CertificateCertificateHashResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DataAdded := retrieveCertificateCertificateHashResponsePropDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DataAdded

	err, MessageAdded := retrieveCertificateCertificateHashResponsePropMessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MessageAdded

	err, SuccessAdded := retrieveCertificateCertificateHashResponsePropSuccessFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SuccessAdded

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponsePropDataFlags(depth int, m *models.CertificateCertificateHashResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDataName := fmt.Sprintf("%v.data", cmdPrefix)
	if cmd.Flags().Changed(flagDataName) {
		// info: complex object data CertificateCertificateHashResponseData is retrieved outside this Changed() block
	}
	flagDataValue := m.Data
	if swag.IsZero(flagDataValue) {
		flagDataValue = &models.CertificateCertificateHashResponseData{}
	}

	err, DataAdded := retrieveModelCertificateCertificateHashResponseDataFlags(depth+1, flagDataValue, flagDataName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DataAdded
	if DataAdded {
		m.Data = flagDataValue
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponsePropMessageFlags(depth int, m *models.CertificateCertificateHashResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMessageName := fmt.Sprintf("%v.message", cmdPrefix)
	if cmd.Flags().Changed(flagMessageName) {

		var flagMessageName string
		if cmdPrefix == "" {
			flagMessageName = "message"
		} else {
			flagMessageName = fmt.Sprintf("%v.message", cmdPrefix)
		}

		flagMessageValue, err := cmd.Flags().GetString(flagMessageName)
		if err != nil {
			return err, false
		}
		m.Message = flagMessageValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponsePropSuccessFlags(depth int, m *models.CertificateCertificateHashResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSuccessName := fmt.Sprintf("%v.success", cmdPrefix)
	if cmd.Flags().Changed(flagSuccessName) {

		var flagSuccessName string
		if cmdPrefix == "" {
			flagSuccessName = "success"
		} else {
			flagSuccessName = fmt.Sprintf("%v.success", cmdPrefix)
		}

		flagSuccessValue, err := cmd.Flags().GetBool(flagSuccessName)
		if err != nil {
			return err, false
		}
		m.Success = flagSuccessValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for CertificateCertificateHashResponseData

// register flags to command
func registerModelCertificateCertificateHashResponseDataFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCertificateCertificateHashResponseDataPropCertificate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataPropTags(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataPropCertificate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagCertificateName string
	if cmdPrefix == "" {
		flagCertificateName = "certificate"
	} else {
		flagCertificateName = fmt.Sprintf("%v.certificate", cmdPrefix)
	}

	if err := registerModelCertificateCertificateHashResponseDataCertificateFlags(depth+1, flagCertificateName, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataPropTags(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: tags []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCertificateCertificateHashResponseDataFlags(depth int, m *models.CertificateCertificateHashResponseData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CertificateAdded := retrieveCertificateCertificateHashResponseDataPropCertificateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CertificateAdded

	err, TagsAdded := retrieveCertificateCertificateHashResponseDataPropTagsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TagsAdded

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataPropCertificateFlags(depth int, m *models.CertificateCertificateHashResponseData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCertificateName := fmt.Sprintf("%v.certificate", cmdPrefix)
	if cmd.Flags().Changed(flagCertificateName) {
		// info: complex object certificate CertificateCertificateHashResponseDataCertificate is retrieved outside this Changed() block
	}
	flagCertificateValue := m.Certificate
	if swag.IsZero(flagCertificateValue) {
		flagCertificateValue = &models.CertificateCertificateHashResponseDataCertificate{}
	}

	err, CertificateAdded := retrieveModelCertificateCertificateHashResponseDataCertificateFlags(depth+1, flagCertificateValue, flagCertificateName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CertificateAdded
	if CertificateAdded {
		m.Certificate = flagCertificateValue
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataPropTagsFlags(depth int, m *models.CertificateCertificateHashResponseData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTagsName := fmt.Sprintf("%v.tags", cmdPrefix)
	if cmd.Flags().Changed(flagTagsName) {
		// warning: tags array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for CertificateCertificateHashResponseDataCertificate

// register flags to command
func registerModelCertificateCertificateHashResponseDataCertificateFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCertificateCertificateHashResponseDataCertificatePropExtensions(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificatePropFingerprintMd5(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificatePropFingerprintSha1(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificatePropFingerprintSha256(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificatePropIssuer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificatePropRedacted(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificatePropSerialNumber(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificatePropSignature(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificatePropSubject(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificatePropSubjectAltName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificatePropSubjectKeyInfo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificatePropTbsFingerprint(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificatePropValidationLevel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificatePropValidity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificatePropVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataCertificatePropExtensions(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagExtensionsName string
	if cmdPrefix == "" {
		flagExtensionsName = "extensions"
	} else {
		flagExtensionsName = fmt.Sprintf("%v.extensions", cmdPrefix)
	}

	if err := registerModelCertificateCertificateHashResponseDataCertificateExtensionsFlags(depth+1, flagExtensionsName, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataCertificatePropFingerprintMd5(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFingerprintMd5Description := ``

	var flagFingerprintMd5Name string
	if cmdPrefix == "" {
		flagFingerprintMd5Name = "fingerprint_md5"
	} else {
		flagFingerprintMd5Name = fmt.Sprintf("%v.fingerprint_md5", cmdPrefix)
	}

	var flagFingerprintMd5Default string

	_ = cmd.PersistentFlags().String(flagFingerprintMd5Name, flagFingerprintMd5Default, flagFingerprintMd5Description)

	return nil
}

func registerCertificateCertificateHashResponseDataCertificatePropFingerprintSha1(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFingerprintSha1Description := ``

	var flagFingerprintSha1Name string
	if cmdPrefix == "" {
		flagFingerprintSha1Name = "fingerprint_sha1"
	} else {
		flagFingerprintSha1Name = fmt.Sprintf("%v.fingerprint_sha1", cmdPrefix)
	}

	var flagFingerprintSha1Default string

	_ = cmd.PersistentFlags().String(flagFingerprintSha1Name, flagFingerprintSha1Default, flagFingerprintSha1Description)

	return nil
}

func registerCertificateCertificateHashResponseDataCertificatePropFingerprintSha256(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFingerprintSha256Description := ``

	var flagFingerprintSha256Name string
	if cmdPrefix == "" {
		flagFingerprintSha256Name = "fingerprint_sha256"
	} else {
		flagFingerprintSha256Name = fmt.Sprintf("%v.fingerprint_sha256", cmdPrefix)
	}

	var flagFingerprintSha256Default string

	_ = cmd.PersistentFlags().String(flagFingerprintSha256Name, flagFingerprintSha256Default, flagFingerprintSha256Description)

	return nil
}

func registerCertificateCertificateHashResponseDataCertificatePropIssuer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagIssuerName string
	if cmdPrefix == "" {
		flagIssuerName = "issuer"
	} else {
		flagIssuerName = fmt.Sprintf("%v.issuer", cmdPrefix)
	}

	if err := registerModelCertificateCertificateHashResponseDataCertificateIssuerFlags(depth+1, flagIssuerName, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataCertificatePropRedacted(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagRedactedDescription := ``

	var flagRedactedName string
	if cmdPrefix == "" {
		flagRedactedName = "redacted"
	} else {
		flagRedactedName = fmt.Sprintf("%v.redacted", cmdPrefix)
	}

	var flagRedactedDefault bool

	_ = cmd.PersistentFlags().Bool(flagRedactedName, flagRedactedDefault, flagRedactedDescription)

	return nil
}

func registerCertificateCertificateHashResponseDataCertificatePropSerialNumber(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSerialNumberDescription := ``

	var flagSerialNumberName string
	if cmdPrefix == "" {
		flagSerialNumberName = "serial_number"
	} else {
		flagSerialNumberName = fmt.Sprintf("%v.serial_number", cmdPrefix)
	}

	var flagSerialNumberDefault string

	_ = cmd.PersistentFlags().String(flagSerialNumberName, flagSerialNumberDefault, flagSerialNumberDescription)

	return nil
}

func registerCertificateCertificateHashResponseDataCertificatePropSignature(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSignatureName string
	if cmdPrefix == "" {
		flagSignatureName = "signature"
	} else {
		flagSignatureName = fmt.Sprintf("%v.signature", cmdPrefix)
	}

	if err := registerModelCertificateCertificateHashResponseDataCertificateSignatureFlags(depth+1, flagSignatureName, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataCertificatePropSubject(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSubjectName string
	if cmdPrefix == "" {
		flagSubjectName = "subject"
	} else {
		flagSubjectName = fmt.Sprintf("%v.subject", cmdPrefix)
	}

	if err := registerModelCertificateCertificateHashResponseDataCertificateSubjectFlags(depth+1, flagSubjectName, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataCertificatePropSubjectAltName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSubjectAltNameName string
	if cmdPrefix == "" {
		flagSubjectAltNameName = "subject_alt_name"
	} else {
		flagSubjectAltNameName = fmt.Sprintf("%v.subject_alt_name", cmdPrefix)
	}

	if err := registerModelCertificateCertificateHashResponseDataCertificateSubjectAltNameFlags(depth+1, flagSubjectAltNameName, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataCertificatePropSubjectKeyInfo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSubjectKeyInfoName string
	if cmdPrefix == "" {
		flagSubjectKeyInfoName = "subject_key_info"
	} else {
		flagSubjectKeyInfoName = fmt.Sprintf("%v.subject_key_info", cmdPrefix)
	}

	if err := registerModelCertificateCertificateHashResponseDataCertificateSubjectKeyInfoFlags(depth+1, flagSubjectKeyInfoName, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataCertificatePropTbsFingerprint(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTbsFingerprintDescription := ``

	var flagTbsFingerprintName string
	if cmdPrefix == "" {
		flagTbsFingerprintName = "tbs_fingerprint"
	} else {
		flagTbsFingerprintName = fmt.Sprintf("%v.tbs_fingerprint", cmdPrefix)
	}

	var flagTbsFingerprintDefault string

	_ = cmd.PersistentFlags().String(flagTbsFingerprintName, flagTbsFingerprintDefault, flagTbsFingerprintDescription)

	return nil
}

func registerCertificateCertificateHashResponseDataCertificatePropValidationLevel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagValidationLevelDescription := ``

	var flagValidationLevelName string
	if cmdPrefix == "" {
		flagValidationLevelName = "validation_level"
	} else {
		flagValidationLevelName = fmt.Sprintf("%v.validation_level", cmdPrefix)
	}

	var flagValidationLevelDefault string

	_ = cmd.PersistentFlags().String(flagValidationLevelName, flagValidationLevelDefault, flagValidationLevelDescription)

	return nil
}

func registerCertificateCertificateHashResponseDataCertificatePropValidity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagValidityName string
	if cmdPrefix == "" {
		flagValidityName = "validity"
	} else {
		flagValidityName = fmt.Sprintf("%v.validity", cmdPrefix)
	}

	if err := registerModelCertificateCertificateHashResponseDataCertificateValidityFlags(depth+1, flagValidityName, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataCertificatePropVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagVersionDescription := ``

	var flagVersionName string
	if cmdPrefix == "" {
		flagVersionName = "version"
	} else {
		flagVersionName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var flagVersionDefault int64

	_ = cmd.PersistentFlags().Int64(flagVersionName, flagVersionDefault, flagVersionDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCertificateCertificateHashResponseDataCertificateFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ExtensionsAdded := retrieveCertificateCertificateHashResponseDataCertificatePropExtensionsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ExtensionsAdded

	err, FingerprintMd5Added := retrieveCertificateCertificateHashResponseDataCertificatePropFingerprintMd5Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FingerprintMd5Added

	err, FingerprintSha1Added := retrieveCertificateCertificateHashResponseDataCertificatePropFingerprintSha1Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FingerprintSha1Added

	err, FingerprintSha256Added := retrieveCertificateCertificateHashResponseDataCertificatePropFingerprintSha256Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FingerprintSha256Added

	err, IssuerAdded := retrieveCertificateCertificateHashResponseDataCertificatePropIssuerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IssuerAdded

	err, RedactedAdded := retrieveCertificateCertificateHashResponseDataCertificatePropRedactedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RedactedAdded

	err, SerialNumberAdded := retrieveCertificateCertificateHashResponseDataCertificatePropSerialNumberFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SerialNumberAdded

	err, SignatureAdded := retrieveCertificateCertificateHashResponseDataCertificatePropSignatureFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SignatureAdded

	err, SubjectAdded := retrieveCertificateCertificateHashResponseDataCertificatePropSubjectFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SubjectAdded

	err, SubjectAltNameAdded := retrieveCertificateCertificateHashResponseDataCertificatePropSubjectAltNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SubjectAltNameAdded

	err, SubjectKeyInfoAdded := retrieveCertificateCertificateHashResponseDataCertificatePropSubjectKeyInfoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SubjectKeyInfoAdded

	err, TbsFingerprintAdded := retrieveCertificateCertificateHashResponseDataCertificatePropTbsFingerprintFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TbsFingerprintAdded

	err, ValidationLevelAdded := retrieveCertificateCertificateHashResponseDataCertificatePropValidationLevelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ValidationLevelAdded

	err, ValidityAdded := retrieveCertificateCertificateHashResponseDataCertificatePropValidityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ValidityAdded

	err, VersionAdded := retrieveCertificateCertificateHashResponseDataCertificatePropVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VersionAdded

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificatePropExtensionsFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagExtensionsName := fmt.Sprintf("%v.extensions", cmdPrefix)
	if cmd.Flags().Changed(flagExtensionsName) {
		// info: complex object extensions CertificateCertificateHashResponseDataCertificateExtensions is retrieved outside this Changed() block
	}
	flagExtensionsValue := m.Extensions
	if swag.IsZero(flagExtensionsValue) {
		flagExtensionsValue = &models.CertificateCertificateHashResponseDataCertificateExtensions{}
	}

	err, ExtensionsAdded := retrieveModelCertificateCertificateHashResponseDataCertificateExtensionsFlags(depth+1, flagExtensionsValue, flagExtensionsName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ExtensionsAdded
	if ExtensionsAdded {
		m.Extensions = flagExtensionsValue
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificatePropFingerprintMd5Flags(depth int, m *models.CertificateCertificateHashResponseDataCertificate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFingerprintMd5Name := fmt.Sprintf("%v.fingerprint_md5", cmdPrefix)
	if cmd.Flags().Changed(flagFingerprintMd5Name) {

		var flagFingerprintMd5Name string
		if cmdPrefix == "" {
			flagFingerprintMd5Name = "fingerprint_md5"
		} else {
			flagFingerprintMd5Name = fmt.Sprintf("%v.fingerprint_md5", cmdPrefix)
		}

		flagFingerprintMd5Value, err := cmd.Flags().GetString(flagFingerprintMd5Name)
		if err != nil {
			return err, false
		}
		m.FingerprintMd5 = flagFingerprintMd5Value

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificatePropFingerprintSha1Flags(depth int, m *models.CertificateCertificateHashResponseDataCertificate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFingerprintSha1Name := fmt.Sprintf("%v.fingerprint_sha1", cmdPrefix)
	if cmd.Flags().Changed(flagFingerprintSha1Name) {

		var flagFingerprintSha1Name string
		if cmdPrefix == "" {
			flagFingerprintSha1Name = "fingerprint_sha1"
		} else {
			flagFingerprintSha1Name = fmt.Sprintf("%v.fingerprint_sha1", cmdPrefix)
		}

		flagFingerprintSha1Value, err := cmd.Flags().GetString(flagFingerprintSha1Name)
		if err != nil {
			return err, false
		}
		m.FingerprintSha1 = flagFingerprintSha1Value

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificatePropFingerprintSha256Flags(depth int, m *models.CertificateCertificateHashResponseDataCertificate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFingerprintSha256Name := fmt.Sprintf("%v.fingerprint_sha256", cmdPrefix)
	if cmd.Flags().Changed(flagFingerprintSha256Name) {

		var flagFingerprintSha256Name string
		if cmdPrefix == "" {
			flagFingerprintSha256Name = "fingerprint_sha256"
		} else {
			flagFingerprintSha256Name = fmt.Sprintf("%v.fingerprint_sha256", cmdPrefix)
		}

		flagFingerprintSha256Value, err := cmd.Flags().GetString(flagFingerprintSha256Name)
		if err != nil {
			return err, false
		}
		m.FingerprintSha256 = flagFingerprintSha256Value

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificatePropIssuerFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIssuerName := fmt.Sprintf("%v.issuer", cmdPrefix)
	if cmd.Flags().Changed(flagIssuerName) {
		// info: complex object issuer CertificateCertificateHashResponseDataCertificateIssuer is retrieved outside this Changed() block
	}
	flagIssuerValue := m.Issuer
	if swag.IsZero(flagIssuerValue) {
		flagIssuerValue = &models.CertificateCertificateHashResponseDataCertificateIssuer{}
	}

	err, IssuerAdded := retrieveModelCertificateCertificateHashResponseDataCertificateIssuerFlags(depth+1, flagIssuerValue, flagIssuerName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IssuerAdded
	if IssuerAdded {
		m.Issuer = flagIssuerValue
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificatePropRedactedFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagRedactedName := fmt.Sprintf("%v.redacted", cmdPrefix)
	if cmd.Flags().Changed(flagRedactedName) {

		var flagRedactedName string
		if cmdPrefix == "" {
			flagRedactedName = "redacted"
		} else {
			flagRedactedName = fmt.Sprintf("%v.redacted", cmdPrefix)
		}

		flagRedactedValue, err := cmd.Flags().GetBool(flagRedactedName)
		if err != nil {
			return err, false
		}
		m.Redacted = flagRedactedValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificatePropSerialNumberFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSerialNumberName := fmt.Sprintf("%v.serial_number", cmdPrefix)
	if cmd.Flags().Changed(flagSerialNumberName) {

		var flagSerialNumberName string
		if cmdPrefix == "" {
			flagSerialNumberName = "serial_number"
		} else {
			flagSerialNumberName = fmt.Sprintf("%v.serial_number", cmdPrefix)
		}

		flagSerialNumberValue, err := cmd.Flags().GetString(flagSerialNumberName)
		if err != nil {
			return err, false
		}
		m.SerialNumber = flagSerialNumberValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificatePropSignatureFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSignatureName := fmt.Sprintf("%v.signature", cmdPrefix)
	if cmd.Flags().Changed(flagSignatureName) {
		// info: complex object signature CertificateCertificateHashResponseDataCertificateSignature is retrieved outside this Changed() block
	}
	flagSignatureValue := m.Signature
	if swag.IsZero(flagSignatureValue) {
		flagSignatureValue = &models.CertificateCertificateHashResponseDataCertificateSignature{}
	}

	err, SignatureAdded := retrieveModelCertificateCertificateHashResponseDataCertificateSignatureFlags(depth+1, flagSignatureValue, flagSignatureName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SignatureAdded
	if SignatureAdded {
		m.Signature = flagSignatureValue
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificatePropSubjectFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSubjectName := fmt.Sprintf("%v.subject", cmdPrefix)
	if cmd.Flags().Changed(flagSubjectName) {
		// info: complex object subject CertificateCertificateHashResponseDataCertificateSubject is retrieved outside this Changed() block
	}
	flagSubjectValue := m.Subject
	if swag.IsZero(flagSubjectValue) {
		flagSubjectValue = &models.CertificateCertificateHashResponseDataCertificateSubject{}
	}

	err, SubjectAdded := retrieveModelCertificateCertificateHashResponseDataCertificateSubjectFlags(depth+1, flagSubjectValue, flagSubjectName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SubjectAdded
	if SubjectAdded {
		m.Subject = flagSubjectValue
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificatePropSubjectAltNameFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSubjectAltNameName := fmt.Sprintf("%v.subject_alt_name", cmdPrefix)
	if cmd.Flags().Changed(flagSubjectAltNameName) {
		// info: complex object subject_alt_name CertificateCertificateHashResponseDataCertificateSubjectAltName is retrieved outside this Changed() block
	}
	flagSubjectAltNameValue := m.SubjectAltName
	if swag.IsZero(flagSubjectAltNameValue) {
		flagSubjectAltNameValue = &models.CertificateCertificateHashResponseDataCertificateSubjectAltName{}
	}

	err, SubjectAltNameAdded := retrieveModelCertificateCertificateHashResponseDataCertificateSubjectAltNameFlags(depth+1, flagSubjectAltNameValue, flagSubjectAltNameName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SubjectAltNameAdded
	if SubjectAltNameAdded {
		m.SubjectAltName = flagSubjectAltNameValue
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificatePropSubjectKeyInfoFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSubjectKeyInfoName := fmt.Sprintf("%v.subject_key_info", cmdPrefix)
	if cmd.Flags().Changed(flagSubjectKeyInfoName) {
		// info: complex object subject_key_info CertificateCertificateHashResponseDataCertificateSubjectKeyInfo is retrieved outside this Changed() block
	}
	flagSubjectKeyInfoValue := m.SubjectKeyInfo
	if swag.IsZero(flagSubjectKeyInfoValue) {
		flagSubjectKeyInfoValue = &models.CertificateCertificateHashResponseDataCertificateSubjectKeyInfo{}
	}

	err, SubjectKeyInfoAdded := retrieveModelCertificateCertificateHashResponseDataCertificateSubjectKeyInfoFlags(depth+1, flagSubjectKeyInfoValue, flagSubjectKeyInfoName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SubjectKeyInfoAdded
	if SubjectKeyInfoAdded {
		m.SubjectKeyInfo = flagSubjectKeyInfoValue
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificatePropTbsFingerprintFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTbsFingerprintName := fmt.Sprintf("%v.tbs_fingerprint", cmdPrefix)
	if cmd.Flags().Changed(flagTbsFingerprintName) {

		var flagTbsFingerprintName string
		if cmdPrefix == "" {
			flagTbsFingerprintName = "tbs_fingerprint"
		} else {
			flagTbsFingerprintName = fmt.Sprintf("%v.tbs_fingerprint", cmdPrefix)
		}

		flagTbsFingerprintValue, err := cmd.Flags().GetString(flagTbsFingerprintName)
		if err != nil {
			return err, false
		}
		m.TbsFingerprint = flagTbsFingerprintValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificatePropValidationLevelFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagValidationLevelName := fmt.Sprintf("%v.validation_level", cmdPrefix)
	if cmd.Flags().Changed(flagValidationLevelName) {

		var flagValidationLevelName string
		if cmdPrefix == "" {
			flagValidationLevelName = "validation_level"
		} else {
			flagValidationLevelName = fmt.Sprintf("%v.validation_level", cmdPrefix)
		}

		flagValidationLevelValue, err := cmd.Flags().GetString(flagValidationLevelName)
		if err != nil {
			return err, false
		}
		m.ValidationLevel = flagValidationLevelValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificatePropValidityFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagValidityName := fmt.Sprintf("%v.validity", cmdPrefix)
	if cmd.Flags().Changed(flagValidityName) {
		// info: complex object validity CertificateCertificateHashResponseDataCertificateValidity is retrieved outside this Changed() block
	}
	flagValidityValue := m.Validity
	if swag.IsZero(flagValidityValue) {
		flagValidityValue = &models.CertificateCertificateHashResponseDataCertificateValidity{}
	}

	err, ValidityAdded := retrieveModelCertificateCertificateHashResponseDataCertificateValidityFlags(depth+1, flagValidityValue, flagValidityName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ValidityAdded
	if ValidityAdded {
		m.Validity = flagValidityValue
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificatePropVersionFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVersionName := fmt.Sprintf("%v.version", cmdPrefix)
	if cmd.Flags().Changed(flagVersionName) {

		var flagVersionName string
		if cmdPrefix == "" {
			flagVersionName = "version"
		} else {
			flagVersionName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		flagVersionValue, err := cmd.Flags().GetInt64(flagVersionName)
		if err != nil {
			return err, false
		}
		m.Version = flagVersionValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for CertificateCertificateHashResponseDataCertificateExtensions

// register flags to command
func registerModelCertificateCertificateHashResponseDataCertificateExtensionsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCertificateCertificateHashResponseDataCertificateExtensionsPropAuthorityInfoAccess(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificateExtensionsPropAuthorityKeyID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificateExtensionsPropBasicConstraints(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificateExtensionsPropCertificatePolicies(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificateExtensionsPropCtPoison(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificateExtensionsPropExtendedKeyUsage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificateExtensionsPropKeyUsage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificateExtensionsPropSubjectAltName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificateExtensionsPropSubjectKeyID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateExtensionsPropAuthorityInfoAccess(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagAuthorityInfoAccessName string
	if cmdPrefix == "" {
		flagAuthorityInfoAccessName = "authority_info_access"
	} else {
		flagAuthorityInfoAccessName = fmt.Sprintf("%v.authority_info_access", cmdPrefix)
	}

	if err := registerModelCertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccessFlags(depth+1, flagAuthorityInfoAccessName, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateExtensionsPropAuthorityKeyID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagAuthorityKeyIDDescription := ``

	var flagAuthorityKeyIDName string
	if cmdPrefix == "" {
		flagAuthorityKeyIDName = "authority_key_id"
	} else {
		flagAuthorityKeyIDName = fmt.Sprintf("%v.authority_key_id", cmdPrefix)
	}

	var flagAuthorityKeyIDDefault string

	_ = cmd.PersistentFlags().String(flagAuthorityKeyIDName, flagAuthorityKeyIDDefault, flagAuthorityKeyIDDescription)

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateExtensionsPropBasicConstraints(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagBasicConstraintsName string
	if cmdPrefix == "" {
		flagBasicConstraintsName = "basic_constraints"
	} else {
		flagBasicConstraintsName = fmt.Sprintf("%v.basic_constraints", cmdPrefix)
	}

	if err := registerModelCertificateCertificateHashResponseDataCertificateExtensionsBasicConstraintsFlags(depth+1, flagBasicConstraintsName, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateExtensionsPropCertificatePolicies(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: certificate_policies []*CertificateCertificateHashResponseDataCertificateExtensionsCertificatePoliciesItems0 array type is not supported by go-swagger cli yet

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateExtensionsPropCtPoison(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCtPoisonDescription := ``

	var flagCtPoisonName string
	if cmdPrefix == "" {
		flagCtPoisonName = "ct_poison"
	} else {
		flagCtPoisonName = fmt.Sprintf("%v.ct_poison", cmdPrefix)
	}

	var flagCtPoisonDefault bool

	_ = cmd.PersistentFlags().Bool(flagCtPoisonName, flagCtPoisonDefault, flagCtPoisonDescription)

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateExtensionsPropExtendedKeyUsage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagExtendedKeyUsageName string
	if cmdPrefix == "" {
		flagExtendedKeyUsageName = "extended_key_usage"
	} else {
		flagExtendedKeyUsageName = fmt.Sprintf("%v.extended_key_usage", cmdPrefix)
	}

	if err := registerModelCertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsageFlags(depth+1, flagExtendedKeyUsageName, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateExtensionsPropKeyUsage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagKeyUsageName string
	if cmdPrefix == "" {
		flagKeyUsageName = "key_usage"
	} else {
		flagKeyUsageName = fmt.Sprintf("%v.key_usage", cmdPrefix)
	}

	if err := registerModelCertificateCertificateHashResponseDataCertificateExtensionsKeyUsageFlags(depth+1, flagKeyUsageName, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateExtensionsPropSubjectAltName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSubjectAltNameName string
	if cmdPrefix == "" {
		flagSubjectAltNameName = "subject_alt_name"
	} else {
		flagSubjectAltNameName = fmt.Sprintf("%v.subject_alt_name", cmdPrefix)
	}

	if err := registerModelCertificateCertificateHashResponseDataCertificateExtensionsSubjectAltNameFlags(depth+1, flagSubjectAltNameName, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateExtensionsPropSubjectKeyID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSubjectKeyIDDescription := ``

	var flagSubjectKeyIDName string
	if cmdPrefix == "" {
		flagSubjectKeyIDName = "subject_key_id"
	} else {
		flagSubjectKeyIDName = fmt.Sprintf("%v.subject_key_id", cmdPrefix)
	}

	var flagSubjectKeyIDDefault string

	_ = cmd.PersistentFlags().String(flagSubjectKeyIDName, flagSubjectKeyIDDefault, flagSubjectKeyIDDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCertificateCertificateHashResponseDataCertificateExtensionsFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateExtensions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AuthorityInfoAccessAdded := retrieveCertificateCertificateHashResponseDataCertificateExtensionsPropAuthorityInfoAccessFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AuthorityInfoAccessAdded

	err, AuthorityKeyIDAdded := retrieveCertificateCertificateHashResponseDataCertificateExtensionsPropAuthorityKeyIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AuthorityKeyIDAdded

	err, BasicConstraintsAdded := retrieveCertificateCertificateHashResponseDataCertificateExtensionsPropBasicConstraintsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BasicConstraintsAdded

	err, CertificatePoliciesAdded := retrieveCertificateCertificateHashResponseDataCertificateExtensionsPropCertificatePoliciesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CertificatePoliciesAdded

	err, CtPoisonAdded := retrieveCertificateCertificateHashResponseDataCertificateExtensionsPropCtPoisonFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CtPoisonAdded

	err, ExtendedKeyUsageAdded := retrieveCertificateCertificateHashResponseDataCertificateExtensionsPropExtendedKeyUsageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ExtendedKeyUsageAdded

	err, KeyUsageAdded := retrieveCertificateCertificateHashResponseDataCertificateExtensionsPropKeyUsageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || KeyUsageAdded

	err, SubjectAltNameAdded := retrieveCertificateCertificateHashResponseDataCertificateExtensionsPropSubjectAltNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SubjectAltNameAdded

	err, SubjectKeyIDAdded := retrieveCertificateCertificateHashResponseDataCertificateExtensionsPropSubjectKeyIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SubjectKeyIDAdded

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateExtensionsPropAuthorityInfoAccessFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateExtensions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAuthorityInfoAccessName := fmt.Sprintf("%v.authority_info_access", cmdPrefix)
	if cmd.Flags().Changed(flagAuthorityInfoAccessName) {
		// info: complex object authority_info_access CertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccess is retrieved outside this Changed() block
	}
	flagAuthorityInfoAccessValue := m.AuthorityInfoAccess
	if swag.IsZero(flagAuthorityInfoAccessValue) {
		flagAuthorityInfoAccessValue = &models.CertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccess{}
	}

	err, AuthorityInfoAccessAdded := retrieveModelCertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccessFlags(depth+1, flagAuthorityInfoAccessValue, flagAuthorityInfoAccessName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AuthorityInfoAccessAdded
	if AuthorityInfoAccessAdded {
		m.AuthorityInfoAccess = flagAuthorityInfoAccessValue
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateExtensionsPropAuthorityKeyIDFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateExtensions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAuthorityKeyIDName := fmt.Sprintf("%v.authority_key_id", cmdPrefix)
	if cmd.Flags().Changed(flagAuthorityKeyIDName) {

		var flagAuthorityKeyIDName string
		if cmdPrefix == "" {
			flagAuthorityKeyIDName = "authority_key_id"
		} else {
			flagAuthorityKeyIDName = fmt.Sprintf("%v.authority_key_id", cmdPrefix)
		}

		flagAuthorityKeyIDValue, err := cmd.Flags().GetString(flagAuthorityKeyIDName)
		if err != nil {
			return err, false
		}
		m.AuthorityKeyID = flagAuthorityKeyIDValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateExtensionsPropBasicConstraintsFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateExtensions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagBasicConstraintsName := fmt.Sprintf("%v.basic_constraints", cmdPrefix)
	if cmd.Flags().Changed(flagBasicConstraintsName) {
		// info: complex object basic_constraints CertificateCertificateHashResponseDataCertificateExtensionsBasicConstraints is retrieved outside this Changed() block
	}
	flagBasicConstraintsValue := m.BasicConstraints
	if swag.IsZero(flagBasicConstraintsValue) {
		flagBasicConstraintsValue = &models.CertificateCertificateHashResponseDataCertificateExtensionsBasicConstraints{}
	}

	err, BasicConstraintsAdded := retrieveModelCertificateCertificateHashResponseDataCertificateExtensionsBasicConstraintsFlags(depth+1, flagBasicConstraintsValue, flagBasicConstraintsName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BasicConstraintsAdded
	if BasicConstraintsAdded {
		m.BasicConstraints = flagBasicConstraintsValue
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateExtensionsPropCertificatePoliciesFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateExtensions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCertificatePoliciesName := fmt.Sprintf("%v.certificate_policies", cmdPrefix)
	if cmd.Flags().Changed(flagCertificatePoliciesName) {
		// warning: certificate_policies array type []*CertificateCertificateHashResponseDataCertificateExtensionsCertificatePoliciesItems0 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateExtensionsPropCtPoisonFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateExtensions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCtPoisonName := fmt.Sprintf("%v.ct_poison", cmdPrefix)
	if cmd.Flags().Changed(flagCtPoisonName) {

		var flagCtPoisonName string
		if cmdPrefix == "" {
			flagCtPoisonName = "ct_poison"
		} else {
			flagCtPoisonName = fmt.Sprintf("%v.ct_poison", cmdPrefix)
		}

		flagCtPoisonValue, err := cmd.Flags().GetBool(flagCtPoisonName)
		if err != nil {
			return err, false
		}
		m.CtPoison = flagCtPoisonValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateExtensionsPropExtendedKeyUsageFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateExtensions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagExtendedKeyUsageName := fmt.Sprintf("%v.extended_key_usage", cmdPrefix)
	if cmd.Flags().Changed(flagExtendedKeyUsageName) {
		// info: complex object extended_key_usage CertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsage is retrieved outside this Changed() block
	}
	flagExtendedKeyUsageValue := m.ExtendedKeyUsage
	if swag.IsZero(flagExtendedKeyUsageValue) {
		flagExtendedKeyUsageValue = &models.CertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsage{}
	}

	err, ExtendedKeyUsageAdded := retrieveModelCertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsageFlags(depth+1, flagExtendedKeyUsageValue, flagExtendedKeyUsageName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ExtendedKeyUsageAdded
	if ExtendedKeyUsageAdded {
		m.ExtendedKeyUsage = flagExtendedKeyUsageValue
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateExtensionsPropKeyUsageFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateExtensions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagKeyUsageName := fmt.Sprintf("%v.key_usage", cmdPrefix)
	if cmd.Flags().Changed(flagKeyUsageName) {
		// info: complex object key_usage CertificateCertificateHashResponseDataCertificateExtensionsKeyUsage is retrieved outside this Changed() block
	}
	flagKeyUsageValue := m.KeyUsage
	if swag.IsZero(flagKeyUsageValue) {
		flagKeyUsageValue = &models.CertificateCertificateHashResponseDataCertificateExtensionsKeyUsage{}
	}

	err, KeyUsageAdded := retrieveModelCertificateCertificateHashResponseDataCertificateExtensionsKeyUsageFlags(depth+1, flagKeyUsageValue, flagKeyUsageName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || KeyUsageAdded
	if KeyUsageAdded {
		m.KeyUsage = flagKeyUsageValue
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateExtensionsPropSubjectAltNameFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateExtensions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSubjectAltNameName := fmt.Sprintf("%v.subject_alt_name", cmdPrefix)
	if cmd.Flags().Changed(flagSubjectAltNameName) {
		// info: complex object subject_alt_name CertificateCertificateHashResponseDataCertificateExtensionsSubjectAltName is retrieved outside this Changed() block
	}
	flagSubjectAltNameValue := m.SubjectAltName
	if swag.IsZero(flagSubjectAltNameValue) {
		flagSubjectAltNameValue = &models.CertificateCertificateHashResponseDataCertificateExtensionsSubjectAltName{}
	}

	err, SubjectAltNameAdded := retrieveModelCertificateCertificateHashResponseDataCertificateExtensionsSubjectAltNameFlags(depth+1, flagSubjectAltNameValue, flagSubjectAltNameName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SubjectAltNameAdded
	if SubjectAltNameAdded {
		m.SubjectAltName = flagSubjectAltNameValue
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateExtensionsPropSubjectKeyIDFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateExtensions, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSubjectKeyIDName := fmt.Sprintf("%v.subject_key_id", cmdPrefix)
	if cmd.Flags().Changed(flagSubjectKeyIDName) {

		var flagSubjectKeyIDName string
		if cmdPrefix == "" {
			flagSubjectKeyIDName = "subject_key_id"
		} else {
			flagSubjectKeyIDName = fmt.Sprintf("%v.subject_key_id", cmdPrefix)
		}

		flagSubjectKeyIDValue, err := cmd.Flags().GetString(flagSubjectKeyIDName)
		if err != nil {
			return err, false
		}
		m.SubjectKeyID = flagSubjectKeyIDValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for CertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccess

// register flags to command
func registerModelCertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccessFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccessPropIssuerUrls(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccessPropOcspUrls(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccessPropIssuerUrls(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: issuer_urls []string array type is not supported by go-swagger cli yet

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccessPropOcspUrls(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: ocsp_urls []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccessFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccess, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, IssuerUrlsAdded := retrieveCertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccessPropIssuerUrlsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IssuerUrlsAdded

	err, OcspUrlsAdded := retrieveCertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccessPropOcspUrlsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OcspUrlsAdded

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccessPropIssuerUrlsFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccess, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIssuerUrlsName := fmt.Sprintf("%v.issuer_urls", cmdPrefix)
	if cmd.Flags().Changed(flagIssuerUrlsName) {
		// warning: issuer_urls array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccessPropOcspUrlsFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccess, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOcspUrlsName := fmt.Sprintf("%v.ocsp_urls", cmdPrefix)
	if cmd.Flags().Changed(flagOcspUrlsName) {
		// warning: ocsp_urls array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for CertificateCertificateHashResponseDataCertificateExtensionsBasicConstraints

// register flags to command
func registerModelCertificateCertificateHashResponseDataCertificateExtensionsBasicConstraintsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCertificateCertificateHashResponseDataCertificateExtensionsBasicConstraintsPropIsCa(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateExtensionsBasicConstraintsPropIsCa(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIsCaDescription := ``

	var flagIsCaName string
	if cmdPrefix == "" {
		flagIsCaName = "is_ca"
	} else {
		flagIsCaName = fmt.Sprintf("%v.is_ca", cmdPrefix)
	}

	var flagIsCaDefault bool

	_ = cmd.PersistentFlags().Bool(flagIsCaName, flagIsCaDefault, flagIsCaDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCertificateCertificateHashResponseDataCertificateExtensionsBasicConstraintsFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateExtensionsBasicConstraints, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, IsCaAdded := retrieveCertificateCertificateHashResponseDataCertificateExtensionsBasicConstraintsPropIsCaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IsCaAdded

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateExtensionsBasicConstraintsPropIsCaFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateExtensionsBasicConstraints, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIsCaName := fmt.Sprintf("%v.is_ca", cmdPrefix)
	if cmd.Flags().Changed(flagIsCaName) {

		var flagIsCaName string
		if cmdPrefix == "" {
			flagIsCaName = "is_ca"
		} else {
			flagIsCaName = fmt.Sprintf("%v.is_ca", cmdPrefix)
		}

		flagIsCaValue, err := cmd.Flags().GetBool(flagIsCaName)
		if err != nil {
			return err, false
		}
		m.IsCa = flagIsCaValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for CertificateCertificateHashResponseDataCertificateExtensionsCertificatePoliciesItems0

// register flags to command
func registerModelCertificateCertificateHashResponseDataCertificateExtensionsCertificatePoliciesItems0Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCertificateCertificateHashResponseDataCertificateExtensionsCertificatePoliciesItems0PropCps(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificateExtensionsCertificatePoliciesItems0PropID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateExtensionsCertificatePoliciesItems0PropCps(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: cps []string array type is not supported by go-swagger cli yet

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateExtensionsCertificatePoliciesItems0PropID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIDDescription := ``

	var flagIDName string
	if cmdPrefix == "" {
		flagIDName = "id"
	} else {
		flagIDName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var flagIDDefault string

	_ = cmd.PersistentFlags().String(flagIDName, flagIDDefault, flagIDDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCertificateCertificateHashResponseDataCertificateExtensionsCertificatePoliciesItems0Flags(depth int, m *models.CertificateCertificateHashResponseDataCertificateExtensionsCertificatePoliciesItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CpsAdded := retrieveCertificateCertificateHashResponseDataCertificateExtensionsCertificatePoliciesItems0PropCpsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CpsAdded

	err, IDAdded := retrieveCertificateCertificateHashResponseDataCertificateExtensionsCertificatePoliciesItems0PropIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IDAdded

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateExtensionsCertificatePoliciesItems0PropCpsFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateExtensionsCertificatePoliciesItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCpsName := fmt.Sprintf("%v.cps", cmdPrefix)
	if cmd.Flags().Changed(flagCpsName) {
		// warning: cps array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateExtensionsCertificatePoliciesItems0PropIDFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateExtensionsCertificatePoliciesItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIDName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(flagIDName) {

		var flagIDName string
		if cmdPrefix == "" {
			flagIDName = "id"
		} else {
			flagIDName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		flagIDValue, err := cmd.Flags().GetString(flagIDName)
		if err != nil {
			return err, false
		}
		m.ID = flagIDValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for CertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsage

// register flags to command
func registerModelCertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsageFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsagePropClientAuth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsagePropServerAuth(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsagePropClientAuth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagClientAuthDescription := ``

	var flagClientAuthName string
	if cmdPrefix == "" {
		flagClientAuthName = "client_auth"
	} else {
		flagClientAuthName = fmt.Sprintf("%v.client_auth", cmdPrefix)
	}

	var flagClientAuthDefault bool

	_ = cmd.PersistentFlags().Bool(flagClientAuthName, flagClientAuthDefault, flagClientAuthDescription)

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsagePropServerAuth(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagServerAuthDescription := ``

	var flagServerAuthName string
	if cmdPrefix == "" {
		flagServerAuthName = "server_auth"
	} else {
		flagServerAuthName = fmt.Sprintf("%v.server_auth", cmdPrefix)
	}

	var flagServerAuthDefault bool

	_ = cmd.PersistentFlags().Bool(flagServerAuthName, flagServerAuthDefault, flagServerAuthDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsageFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ClientAuthAdded := retrieveCertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsagePropClientAuthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ClientAuthAdded

	err, ServerAuthAdded := retrieveCertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsagePropServerAuthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ServerAuthAdded

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsagePropClientAuthFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagClientAuthName := fmt.Sprintf("%v.client_auth", cmdPrefix)
	if cmd.Flags().Changed(flagClientAuthName) {

		var flagClientAuthName string
		if cmdPrefix == "" {
			flagClientAuthName = "client_auth"
		} else {
			flagClientAuthName = fmt.Sprintf("%v.client_auth", cmdPrefix)
		}

		flagClientAuthValue, err := cmd.Flags().GetBool(flagClientAuthName)
		if err != nil {
			return err, false
		}
		m.ClientAuth = flagClientAuthValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsagePropServerAuthFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagServerAuthName := fmt.Sprintf("%v.server_auth", cmdPrefix)
	if cmd.Flags().Changed(flagServerAuthName) {

		var flagServerAuthName string
		if cmdPrefix == "" {
			flagServerAuthName = "server_auth"
		} else {
			flagServerAuthName = fmt.Sprintf("%v.server_auth", cmdPrefix)
		}

		flagServerAuthValue, err := cmd.Flags().GetBool(flagServerAuthName)
		if err != nil {
			return err, false
		}
		m.ServerAuth = flagServerAuthValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for CertificateCertificateHashResponseDataCertificateExtensionsKeyUsage

// register flags to command
func registerModelCertificateCertificateHashResponseDataCertificateExtensionsKeyUsageFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCertificateCertificateHashResponseDataCertificateExtensionsKeyUsagePropDigitalSignature(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateExtensionsKeyUsagePropDigitalSignature(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagDigitalSignatureDescription := ``

	var flagDigitalSignatureName string
	if cmdPrefix == "" {
		flagDigitalSignatureName = "digital_signature"
	} else {
		flagDigitalSignatureName = fmt.Sprintf("%v.digital_signature", cmdPrefix)
	}

	var flagDigitalSignatureDefault bool

	_ = cmd.PersistentFlags().Bool(flagDigitalSignatureName, flagDigitalSignatureDefault, flagDigitalSignatureDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCertificateCertificateHashResponseDataCertificateExtensionsKeyUsageFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateExtensionsKeyUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DigitalSignatureAdded := retrieveCertificateCertificateHashResponseDataCertificateExtensionsKeyUsagePropDigitalSignatureFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DigitalSignatureAdded

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateExtensionsKeyUsagePropDigitalSignatureFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateExtensionsKeyUsage, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDigitalSignatureName := fmt.Sprintf("%v.digital_signature", cmdPrefix)
	if cmd.Flags().Changed(flagDigitalSignatureName) {

		var flagDigitalSignatureName string
		if cmdPrefix == "" {
			flagDigitalSignatureName = "digital_signature"
		} else {
			flagDigitalSignatureName = fmt.Sprintf("%v.digital_signature", cmdPrefix)
		}

		flagDigitalSignatureValue, err := cmd.Flags().GetBool(flagDigitalSignatureName)
		if err != nil {
			return err, false
		}
		m.DigitalSignature = flagDigitalSignatureValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for CertificateCertificateHashResponseDataCertificateExtensionsSubjectAltName

// register flags to command
func registerModelCertificateCertificateHashResponseDataCertificateExtensionsSubjectAltNameFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCertificateCertificateHashResponseDataCertificateExtensionsSubjectAltNamePropDNSNames(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateExtensionsSubjectAltNamePropDNSNames(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: dns_names []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCertificateCertificateHashResponseDataCertificateExtensionsSubjectAltNameFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateExtensionsSubjectAltName, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DNSNamesAdded := retrieveCertificateCertificateHashResponseDataCertificateExtensionsSubjectAltNamePropDNSNamesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DNSNamesAdded

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateExtensionsSubjectAltNamePropDNSNamesFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateExtensionsSubjectAltName, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDNSNamesName := fmt.Sprintf("%v.dns_names", cmdPrefix)
	if cmd.Flags().Changed(flagDNSNamesName) {
		// warning: dns_names array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for CertificateCertificateHashResponseDataCertificateIssuer

// register flags to command
func registerModelCertificateCertificateHashResponseDataCertificateIssuerFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCertificateCertificateHashResponseDataCertificateIssuerPropCommonName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificateIssuerPropCountry(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificateIssuerPropOrganization(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateIssuerPropCommonName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: common_name []string array type is not supported by go-swagger cli yet

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateIssuerPropCountry(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: country []string array type is not supported by go-swagger cli yet

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateIssuerPropOrganization(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: organization []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCertificateCertificateHashResponseDataCertificateIssuerFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateIssuer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CommonNameAdded := retrieveCertificateCertificateHashResponseDataCertificateIssuerPropCommonNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CommonNameAdded

	err, CountryAdded := retrieveCertificateCertificateHashResponseDataCertificateIssuerPropCountryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountryAdded

	err, OrganizationAdded := retrieveCertificateCertificateHashResponseDataCertificateIssuerPropOrganizationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OrganizationAdded

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateIssuerPropCommonNameFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateIssuer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCommonNameName := fmt.Sprintf("%v.common_name", cmdPrefix)
	if cmd.Flags().Changed(flagCommonNameName) {
		// warning: common_name array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateIssuerPropCountryFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateIssuer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountryName := fmt.Sprintf("%v.country", cmdPrefix)
	if cmd.Flags().Changed(flagCountryName) {
		// warning: country array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateIssuerPropOrganizationFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateIssuer, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOrganizationName := fmt.Sprintf("%v.organization", cmdPrefix)
	if cmd.Flags().Changed(flagOrganizationName) {
		// warning: organization array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for CertificateCertificateHashResponseDataCertificateSignature

// register flags to command
func registerModelCertificateCertificateHashResponseDataCertificateSignatureFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCertificateCertificateHashResponseDataCertificateSignaturePropSignatureAlgorithm(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateSignaturePropSignatureAlgorithm(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagSignatureAlgorithmName string
	if cmdPrefix == "" {
		flagSignatureAlgorithmName = "signature_algorithm"
	} else {
		flagSignatureAlgorithmName = fmt.Sprintf("%v.signature_algorithm", cmdPrefix)
	}

	if err := registerModelCertificateCertificateHashResponseDataCertificateSignatureSignatureAlgorithmFlags(depth+1, flagSignatureAlgorithmName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCertificateCertificateHashResponseDataCertificateSignatureFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateSignature, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, SignatureAlgorithmAdded := retrieveCertificateCertificateHashResponseDataCertificateSignaturePropSignatureAlgorithmFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SignatureAlgorithmAdded

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateSignaturePropSignatureAlgorithmFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateSignature, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSignatureAlgorithmName := fmt.Sprintf("%v.signature_algorithm", cmdPrefix)
	if cmd.Flags().Changed(flagSignatureAlgorithmName) {
		// info: complex object signature_algorithm CertificateCertificateHashResponseDataCertificateSignatureSignatureAlgorithm is retrieved outside this Changed() block
	}
	flagSignatureAlgorithmValue := m.SignatureAlgorithm
	if swag.IsZero(flagSignatureAlgorithmValue) {
		flagSignatureAlgorithmValue = &models.CertificateCertificateHashResponseDataCertificateSignatureSignatureAlgorithm{}
	}

	err, SignatureAlgorithmAdded := retrieveModelCertificateCertificateHashResponseDataCertificateSignatureSignatureAlgorithmFlags(depth+1, flagSignatureAlgorithmValue, flagSignatureAlgorithmName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SignatureAlgorithmAdded
	if SignatureAlgorithmAdded {
		m.SignatureAlgorithm = flagSignatureAlgorithmValue
	}

	return nil, retAdded
}

// Extra schema cli for CertificateCertificateHashResponseDataCertificateSignatureSignatureAlgorithm

// register flags to command
func registerModelCertificateCertificateHashResponseDataCertificateSignatureSignatureAlgorithmFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCertificateCertificateHashResponseDataCertificateSignatureSignatureAlgorithmPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificateSignatureSignatureAlgorithmPropOid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateSignatureSignatureAlgorithmPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := ``

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateSignatureSignatureAlgorithmPropOid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagOidDescription := ``

	var flagOidName string
	if cmdPrefix == "" {
		flagOidName = "oid"
	} else {
		flagOidName = fmt.Sprintf("%v.oid", cmdPrefix)
	}

	var flagOidDefault string

	_ = cmd.PersistentFlags().String(flagOidName, flagOidDefault, flagOidDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCertificateCertificateHashResponseDataCertificateSignatureSignatureAlgorithmFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateSignatureSignatureAlgorithm, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, NameAdded := retrieveCertificateCertificateHashResponseDataCertificateSignatureSignatureAlgorithmPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, OidAdded := retrieveCertificateCertificateHashResponseDataCertificateSignatureSignatureAlgorithmPropOidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OidAdded

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateSignatureSignatureAlgorithmPropNameFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateSignatureSignatureAlgorithm, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateSignatureSignatureAlgorithmPropOidFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateSignatureSignatureAlgorithm, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOidName := fmt.Sprintf("%v.oid", cmdPrefix)
	if cmd.Flags().Changed(flagOidName) {

		var flagOidName string
		if cmdPrefix == "" {
			flagOidName = "oid"
		} else {
			flagOidName = fmt.Sprintf("%v.oid", cmdPrefix)
		}

		flagOidValue, err := cmd.Flags().GetString(flagOidName)
		if err != nil {
			return err, false
		}
		m.Oid = flagOidValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for CertificateCertificateHashResponseDataCertificateSubject

// register flags to command
func registerModelCertificateCertificateHashResponseDataCertificateSubjectFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCertificateCertificateHashResponseDataCertificateSubjectPropCommonName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateSubjectPropCommonName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: common_name []string array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCertificateCertificateHashResponseDataCertificateSubjectFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateSubject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CommonNameAdded := retrieveCertificateCertificateHashResponseDataCertificateSubjectPropCommonNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CommonNameAdded

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateSubjectPropCommonNameFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateSubject, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCommonNameName := fmt.Sprintf("%v.common_name", cmdPrefix)
	if cmd.Flags().Changed(flagCommonNameName) {
		// warning: common_name array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for CertificateCertificateHashResponseDataCertificateSubjectAltName

// register flags to command
func registerModelCertificateCertificateHashResponseDataCertificateSubjectAltNameFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCertificateCertificateHashResponseDataCertificateSubjectAltNamePropDNSNames(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificateSubjectAltNamePropExtendedDNSNames(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateSubjectAltNamePropDNSNames(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: dns_names []string array type is not supported by go-swagger cli yet

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateSubjectAltNamePropExtendedDNSNames(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: extended_dns_names []*CertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0 array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCertificateCertificateHashResponseDataCertificateSubjectAltNameFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateSubjectAltName, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DNSNamesAdded := retrieveCertificateCertificateHashResponseDataCertificateSubjectAltNamePropDNSNamesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DNSNamesAdded

	err, ExtendedDNSNamesAdded := retrieveCertificateCertificateHashResponseDataCertificateSubjectAltNamePropExtendedDNSNamesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ExtendedDNSNamesAdded

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateSubjectAltNamePropDNSNamesFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateSubjectAltName, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDNSNamesName := fmt.Sprintf("%v.dns_names", cmdPrefix)
	if cmd.Flags().Changed(flagDNSNamesName) {
		// warning: dns_names array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateSubjectAltNamePropExtendedDNSNamesFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateSubjectAltName, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagExtendedDNSNamesName := fmt.Sprintf("%v.extended_dns_names", cmdPrefix)
	if cmd.Flags().Changed(flagExtendedDNSNamesName) {
		// warning: extended_dns_names array type []*CertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

// Extra schema cli for CertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0

// register flags to command
func registerModelCertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0PropDomain(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0PropFld(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0PropSubdomain(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0PropTld(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0PropDomain(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagDomainDescription := ``

	var flagDomainName string
	if cmdPrefix == "" {
		flagDomainName = "domain"
	} else {
		flagDomainName = fmt.Sprintf("%v.domain", cmdPrefix)
	}

	var flagDomainDefault string

	_ = cmd.PersistentFlags().String(flagDomainName, flagDomainDefault, flagDomainDescription)

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0PropFld(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFldDescription := ``

	var flagFldName string
	if cmdPrefix == "" {
		flagFldName = "fld"
	} else {
		flagFldName = fmt.Sprintf("%v.fld", cmdPrefix)
	}

	var flagFldDefault string

	_ = cmd.PersistentFlags().String(flagFldName, flagFldDefault, flagFldDescription)

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0PropSubdomain(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSubdomainDescription := ``

	var flagSubdomainName string
	if cmdPrefix == "" {
		flagSubdomainName = "subdomain"
	} else {
		flagSubdomainName = fmt.Sprintf("%v.subdomain", cmdPrefix)
	}

	var flagSubdomainDefault string

	_ = cmd.PersistentFlags().String(flagSubdomainName, flagSubdomainDefault, flagSubdomainDescription)

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0PropTld(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTldDescription := ``

	var flagTldName string
	if cmdPrefix == "" {
		flagTldName = "tld"
	} else {
		flagTldName = fmt.Sprintf("%v.tld", cmdPrefix)
	}

	var flagTldDefault string

	_ = cmd.PersistentFlags().String(flagTldName, flagTldDefault, flagTldDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0Flags(depth int, m *models.CertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DomainAdded := retrieveCertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0PropDomainFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DomainAdded

	err, FldAdded := retrieveCertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0PropFldFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FldAdded

	err, SubdomainAdded := retrieveCertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0PropSubdomainFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SubdomainAdded

	err, TldAdded := retrieveCertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0PropTldFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TldAdded

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0PropDomainFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDomainName := fmt.Sprintf("%v.domain", cmdPrefix)
	if cmd.Flags().Changed(flagDomainName) {

		var flagDomainName string
		if cmdPrefix == "" {
			flagDomainName = "domain"
		} else {
			flagDomainName = fmt.Sprintf("%v.domain", cmdPrefix)
		}

		flagDomainValue, err := cmd.Flags().GetString(flagDomainName)
		if err != nil {
			return err, false
		}
		m.Domain = flagDomainValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0PropFldFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFldName := fmt.Sprintf("%v.fld", cmdPrefix)
	if cmd.Flags().Changed(flagFldName) {

		var flagFldName string
		if cmdPrefix == "" {
			flagFldName = "fld"
		} else {
			flagFldName = fmt.Sprintf("%v.fld", cmdPrefix)
		}

		flagFldValue, err := cmd.Flags().GetString(flagFldName)
		if err != nil {
			return err, false
		}
		m.Fld = flagFldValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0PropSubdomainFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSubdomainName := fmt.Sprintf("%v.subdomain", cmdPrefix)
	if cmd.Flags().Changed(flagSubdomainName) {

		var flagSubdomainName string
		if cmdPrefix == "" {
			flagSubdomainName = "subdomain"
		} else {
			flagSubdomainName = fmt.Sprintf("%v.subdomain", cmdPrefix)
		}

		flagSubdomainValue, err := cmd.Flags().GetString(flagSubdomainName)
		if err != nil {
			return err, false
		}
		m.Subdomain = flagSubdomainValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0PropTldFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTldName := fmt.Sprintf("%v.tld", cmdPrefix)
	if cmd.Flags().Changed(flagTldName) {

		var flagTldName string
		if cmdPrefix == "" {
			flagTldName = "tld"
		} else {
			flagTldName = fmt.Sprintf("%v.tld", cmdPrefix)
		}

		flagTldValue, err := cmd.Flags().GetString(flagTldName)
		if err != nil {
			return err, false
		}
		m.Tld = flagTldValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for CertificateCertificateHashResponseDataCertificateSubjectKeyInfo

// register flags to command
func registerModelCertificateCertificateHashResponseDataCertificateSubjectKeyInfoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPropFingerprintSha256(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPropKeyAlgorithm(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPropPublicKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPropFingerprintSha256(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFingerprintSha256Description := ``

	var flagFingerprintSha256Name string
	if cmdPrefix == "" {
		flagFingerprintSha256Name = "fingerprint_sha256"
	} else {
		flagFingerprintSha256Name = fmt.Sprintf("%v.fingerprint_sha256", cmdPrefix)
	}

	var flagFingerprintSha256Default string

	_ = cmd.PersistentFlags().String(flagFingerprintSha256Name, flagFingerprintSha256Default, flagFingerprintSha256Description)

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPropKeyAlgorithm(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagKeyAlgorithmDescription := ``

	var flagKeyAlgorithmName string
	if cmdPrefix == "" {
		flagKeyAlgorithmName = "key_algorithm"
	} else {
		flagKeyAlgorithmName = fmt.Sprintf("%v.key_algorithm", cmdPrefix)
	}

	var flagKeyAlgorithmDefault string

	_ = cmd.PersistentFlags().String(flagKeyAlgorithmName, flagKeyAlgorithmDefault, flagKeyAlgorithmDescription)

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPropPublicKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagPublicKeyName string
	if cmdPrefix == "" {
		flagPublicKeyName = "public_key"
	} else {
		flagPublicKeyName = fmt.Sprintf("%v.public_key", cmdPrefix)
	}

	if err := registerModelCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyFlags(depth+1, flagPublicKeyName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCertificateCertificateHashResponseDataCertificateSubjectKeyInfoFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateSubjectKeyInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, FingerprintSha256Added := retrieveCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPropFingerprintSha256Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FingerprintSha256Added

	err, KeyAlgorithmAdded := retrieveCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPropKeyAlgorithmFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || KeyAlgorithmAdded

	err, PublicKeyAdded := retrieveCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPropPublicKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PublicKeyAdded

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPropFingerprintSha256Flags(depth int, m *models.CertificateCertificateHashResponseDataCertificateSubjectKeyInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFingerprintSha256Name := fmt.Sprintf("%v.fingerprint_sha256", cmdPrefix)
	if cmd.Flags().Changed(flagFingerprintSha256Name) {

		var flagFingerprintSha256Name string
		if cmdPrefix == "" {
			flagFingerprintSha256Name = "fingerprint_sha256"
		} else {
			flagFingerprintSha256Name = fmt.Sprintf("%v.fingerprint_sha256", cmdPrefix)
		}

		flagFingerprintSha256Value, err := cmd.Flags().GetString(flagFingerprintSha256Name)
		if err != nil {
			return err, false
		}
		m.FingerprintSha256 = flagFingerprintSha256Value

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPropKeyAlgorithmFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateSubjectKeyInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagKeyAlgorithmName := fmt.Sprintf("%v.key_algorithm", cmdPrefix)
	if cmd.Flags().Changed(flagKeyAlgorithmName) {

		var flagKeyAlgorithmName string
		if cmdPrefix == "" {
			flagKeyAlgorithmName = "key_algorithm"
		} else {
			flagKeyAlgorithmName = fmt.Sprintf("%v.key_algorithm", cmdPrefix)
		}

		flagKeyAlgorithmValue, err := cmd.Flags().GetString(flagKeyAlgorithmName)
		if err != nil {
			return err, false
		}
		m.KeyAlgorithm = flagKeyAlgorithmValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPropPublicKeyFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateSubjectKeyInfo, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPublicKeyName := fmt.Sprintf("%v.public_key", cmdPrefix)
	if cmd.Flags().Changed(flagPublicKeyName) {
		// info: complex object public_key CertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKey is retrieved outside this Changed() block
	}
	flagPublicKeyValue := m.PublicKey
	if swag.IsZero(flagPublicKeyValue) {
		flagPublicKeyValue = &models.CertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKey{}
	}

	err, PublicKeyAdded := retrieveModelCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyFlags(depth+1, flagPublicKeyValue, flagPublicKeyName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PublicKeyAdded
	if PublicKeyAdded {
		m.PublicKey = flagPublicKeyValue
	}

	return nil, retAdded
}

// Extra schema cli for CertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKey

// register flags to command
func registerModelCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropB(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropCurve(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropGx(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropGy(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropLength(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropP(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropX(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropY(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropB(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagBDescription := ``

	var flagBName string
	if cmdPrefix == "" {
		flagBName = "b"
	} else {
		flagBName = fmt.Sprintf("%v.b", cmdPrefix)
	}

	var flagBDefault string

	_ = cmd.PersistentFlags().String(flagBName, flagBDefault, flagBDescription)

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropCurve(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCurveDescription := ``

	var flagCurveName string
	if cmdPrefix == "" {
		flagCurveName = "curve"
	} else {
		flagCurveName = fmt.Sprintf("%v.curve", cmdPrefix)
	}

	var flagCurveDefault string

	_ = cmd.PersistentFlags().String(flagCurveName, flagCurveDefault, flagCurveDescription)

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropGx(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagGxDescription := ``

	var flagGxName string
	if cmdPrefix == "" {
		flagGxName = "gx"
	} else {
		flagGxName = fmt.Sprintf("%v.gx", cmdPrefix)
	}

	var flagGxDefault string

	_ = cmd.PersistentFlags().String(flagGxName, flagGxDefault, flagGxDescription)

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropGy(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagGyDescription := ``

	var flagGyName string
	if cmdPrefix == "" {
		flagGyName = "gy"
	} else {
		flagGyName = fmt.Sprintf("%v.gy", cmdPrefix)
	}

	var flagGyDefault string

	_ = cmd.PersistentFlags().String(flagGyName, flagGyDefault, flagGyDescription)

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropLength(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLengthDescription := ``

	var flagLengthName string
	if cmdPrefix == "" {
		flagLengthName = "length"
	} else {
		flagLengthName = fmt.Sprintf("%v.length", cmdPrefix)
	}

	var flagLengthDefault int64

	_ = cmd.PersistentFlags().Int64(flagLengthName, flagLengthDefault, flagLengthDescription)

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropP(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagPDescription := ``

	var flagPName string
	if cmdPrefix == "" {
		flagPName = "p"
	} else {
		flagPName = fmt.Sprintf("%v.p", cmdPrefix)
	}

	var flagPDefault string

	_ = cmd.PersistentFlags().String(flagPName, flagPDefault, flagPDescription)

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropX(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagXDescription := ``

	var flagXName string
	if cmdPrefix == "" {
		flagXName = "x"
	} else {
		flagXName = fmt.Sprintf("%v.x", cmdPrefix)
	}

	var flagXDefault string

	_ = cmd.PersistentFlags().String(flagXName, flagXDefault, flagXDescription)

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropY(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagYDescription := ``

	var flagYName string
	if cmdPrefix == "" {
		flagYName = "y"
	} else {
		flagYName = fmt.Sprintf("%v.y", cmdPrefix)
	}

	var flagYDefault string

	_ = cmd.PersistentFlags().String(flagYName, flagYDefault, flagYDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKey, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, BAdded := retrieveCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropBFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BAdded

	err, CurveAdded := retrieveCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropCurveFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CurveAdded

	err, GxAdded := retrieveCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropGxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GxAdded

	err, GyAdded := retrieveCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropGyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GyAdded

	err, LengthAdded := retrieveCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropLengthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LengthAdded

	err, PAdded := retrieveCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropPFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PAdded

	err, XAdded := retrieveCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropXFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || XAdded

	err, YAdded := retrieveCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropYFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || YAdded

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropBFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKey, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagBName := fmt.Sprintf("%v.b", cmdPrefix)
	if cmd.Flags().Changed(flagBName) {

		var flagBName string
		if cmdPrefix == "" {
			flagBName = "b"
		} else {
			flagBName = fmt.Sprintf("%v.b", cmdPrefix)
		}

		flagBValue, err := cmd.Flags().GetString(flagBName)
		if err != nil {
			return err, false
		}
		m.B = flagBValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropCurveFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKey, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCurveName := fmt.Sprintf("%v.curve", cmdPrefix)
	if cmd.Flags().Changed(flagCurveName) {

		var flagCurveName string
		if cmdPrefix == "" {
			flagCurveName = "curve"
		} else {
			flagCurveName = fmt.Sprintf("%v.curve", cmdPrefix)
		}

		flagCurveValue, err := cmd.Flags().GetString(flagCurveName)
		if err != nil {
			return err, false
		}
		m.Curve = flagCurveValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropGxFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKey, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagGxName := fmt.Sprintf("%v.gx", cmdPrefix)
	if cmd.Flags().Changed(flagGxName) {

		var flagGxName string
		if cmdPrefix == "" {
			flagGxName = "gx"
		} else {
			flagGxName = fmt.Sprintf("%v.gx", cmdPrefix)
		}

		flagGxValue, err := cmd.Flags().GetString(flagGxName)
		if err != nil {
			return err, false
		}
		m.Gx = flagGxValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropGyFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKey, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagGyName := fmt.Sprintf("%v.gy", cmdPrefix)
	if cmd.Flags().Changed(flagGyName) {

		var flagGyName string
		if cmdPrefix == "" {
			flagGyName = "gy"
		} else {
			flagGyName = fmt.Sprintf("%v.gy", cmdPrefix)
		}

		flagGyValue, err := cmd.Flags().GetString(flagGyName)
		if err != nil {
			return err, false
		}
		m.Gy = flagGyValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropLengthFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKey, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLengthName := fmt.Sprintf("%v.length", cmdPrefix)
	if cmd.Flags().Changed(flagLengthName) {

		var flagLengthName string
		if cmdPrefix == "" {
			flagLengthName = "length"
		} else {
			flagLengthName = fmt.Sprintf("%v.length", cmdPrefix)
		}

		flagLengthValue, err := cmd.Flags().GetInt64(flagLengthName)
		if err != nil {
			return err, false
		}
		m.Length = flagLengthValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropPFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKey, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPName := fmt.Sprintf("%v.p", cmdPrefix)
	if cmd.Flags().Changed(flagPName) {

		var flagPName string
		if cmdPrefix == "" {
			flagPName = "p"
		} else {
			flagPName = fmt.Sprintf("%v.p", cmdPrefix)
		}

		flagPValue, err := cmd.Flags().GetString(flagPName)
		if err != nil {
			return err, false
		}
		m.P = flagPValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropXFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKey, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagXName := fmt.Sprintf("%v.x", cmdPrefix)
	if cmd.Flags().Changed(flagXName) {

		var flagXName string
		if cmdPrefix == "" {
			flagXName = "x"
		} else {
			flagXName = fmt.Sprintf("%v.x", cmdPrefix)
		}

		flagXValue, err := cmd.Flags().GetString(flagXName)
		if err != nil {
			return err, false
		}
		m.X = flagXValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKeyPropYFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKey, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagYName := fmt.Sprintf("%v.y", cmdPrefix)
	if cmd.Flags().Changed(flagYName) {

		var flagYName string
		if cmdPrefix == "" {
			flagYName = "y"
		} else {
			flagYName = fmt.Sprintf("%v.y", cmdPrefix)
		}

		flagYValue, err := cmd.Flags().GetString(flagYName)
		if err != nil {
			return err, false
		}
		m.Y = flagYValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for CertificateCertificateHashResponseDataCertificateValidity

// register flags to command
func registerModelCertificateCertificateHashResponseDataCertificateValidityFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCertificateCertificateHashResponseDataCertificateValidityPropEnd(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificateValidityPropLength(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateHashResponseDataCertificateValidityPropStart(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateValidityPropEnd(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagEndDescription := ``

	var flagEndName string
	if cmdPrefix == "" {
		flagEndName = "end"
	} else {
		flagEndName = fmt.Sprintf("%v.end", cmdPrefix)
	}

	var flagEndDefault string

	_ = cmd.PersistentFlags().String(flagEndName, flagEndDefault, flagEndDescription)

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateValidityPropLength(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLengthDescription := ``

	var flagLengthName string
	if cmdPrefix == "" {
		flagLengthName = "length"
	} else {
		flagLengthName = fmt.Sprintf("%v.length", cmdPrefix)
	}

	var flagLengthDefault int64

	_ = cmd.PersistentFlags().Int64(flagLengthName, flagLengthDefault, flagLengthDescription)

	return nil
}

func registerCertificateCertificateHashResponseDataCertificateValidityPropStart(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagStartDescription := ``

	var flagStartName string
	if cmdPrefix == "" {
		flagStartName = "start"
	} else {
		flagStartName = fmt.Sprintf("%v.start", cmdPrefix)
	}

	var flagStartDefault string

	_ = cmd.PersistentFlags().String(flagStartName, flagStartDefault, flagStartDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCertificateCertificateHashResponseDataCertificateValidityFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateValidity, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, EndAdded := retrieveCertificateCertificateHashResponseDataCertificateValidityPropEndFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EndAdded

	err, LengthAdded := retrieveCertificateCertificateHashResponseDataCertificateValidityPropLengthFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LengthAdded

	err, StartAdded := retrieveCertificateCertificateHashResponseDataCertificateValidityPropStartFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StartAdded

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateValidityPropEndFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateValidity, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagEndName := fmt.Sprintf("%v.end", cmdPrefix)
	if cmd.Flags().Changed(flagEndName) {

		var flagEndName string
		if cmdPrefix == "" {
			flagEndName = "end"
		} else {
			flagEndName = fmt.Sprintf("%v.end", cmdPrefix)
		}

		flagEndValue, err := cmd.Flags().GetString(flagEndName)
		if err != nil {
			return err, false
		}
		m.End = flagEndValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateValidityPropLengthFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateValidity, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLengthName := fmt.Sprintf("%v.length", cmdPrefix)
	if cmd.Flags().Changed(flagLengthName) {

		var flagLengthName string
		if cmdPrefix == "" {
			flagLengthName = "length"
		} else {
			flagLengthName = fmt.Sprintf("%v.length", cmdPrefix)
		}

		flagLengthValue, err := cmd.Flags().GetInt64(flagLengthName)
		if err != nil {
			return err, false
		}
		m.Length = flagLengthValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateCertificateHashResponseDataCertificateValidityPropStartFlags(depth int, m *models.CertificateCertificateHashResponseDataCertificateValidity, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStartName := fmt.Sprintf("%v.start", cmdPrefix)
	if cmd.Flags().Changed(flagStartName) {

		var flagStartName string
		if cmdPrefix == "" {
			flagStartName = "start"
		} else {
			flagStartName = fmt.Sprintf("%v.start", cmdPrefix)
		}

		flagStartValue, err := cmd.Flags().GetString(flagStartName)
		if err != nil {
			return err, false
		}
		m.Start = flagStartValue

		retAdded = true
	}

	return nil, retAdded
}
