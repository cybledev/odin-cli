// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for SummaryRequest

// register flags to command
func registerModelSummaryRequestFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSummaryRequestPropField(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSummaryRequestPropLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSummaryRequestPropQuery(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSummaryRequestPropField(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFieldDescription := `Required. `

	var flagFieldName string
	if cmdPrefix == "" {
		flagFieldName = "field"
	} else {
		flagFieldName = fmt.Sprintf("%v.field", cmdPrefix)
	}

	var flagFieldDefault string

	_ = cmd.PersistentFlags().String(flagFieldName, flagFieldDefault, flagFieldDescription)

	return nil
}

func registerSummaryRequestPropLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLimitDescription := `Required. `

	var flagLimitName string
	if cmdPrefix == "" {
		flagLimitName = "limit"
	} else {
		flagLimitName = fmt.Sprintf("%v.limit", cmdPrefix)
	}

	var flagLimitDefault int64

	_ = cmd.PersistentFlags().Int64(flagLimitName, flagLimitDefault, flagLimitDescription)

	return nil
}

func registerSummaryRequestPropQuery(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagQueryDescription := ``

	var flagQueryName string
	if cmdPrefix == "" {
		flagQueryName = "query"
	} else {
		flagQueryName = fmt.Sprintf("%v.query", cmdPrefix)
	}

	var flagQueryDefault string

	_ = cmd.PersistentFlags().String(flagQueryName, flagQueryDefault, flagQueryDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSummaryRequestFlags(depth int, m *models.SummaryRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, FieldAdded := retrieveSummaryRequestPropFieldFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FieldAdded

	err, LimitAdded := retrieveSummaryRequestPropLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LimitAdded

	err, QueryAdded := retrieveSummaryRequestPropQueryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || QueryAdded

	return nil, retAdded
}

func retrieveSummaryRequestPropFieldFlags(depth int, m *models.SummaryRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFieldName := fmt.Sprintf("%v.field", cmdPrefix)
	if cmd.Flags().Changed(flagFieldName) {

		var flagFieldName string
		if cmdPrefix == "" {
			flagFieldName = "field"
		} else {
			flagFieldName = fmt.Sprintf("%v.field", cmdPrefix)
		}

		flagFieldValue, err := cmd.Flags().GetString(flagFieldName)
		if err != nil {
			return err, false
		}
		m.Field = &flagFieldValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSummaryRequestPropLimitFlags(depth int, m *models.SummaryRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLimitName := fmt.Sprintf("%v.limit", cmdPrefix)
	if cmd.Flags().Changed(flagLimitName) {

		var flagLimitName string
		if cmdPrefix == "" {
			flagLimitName = "limit"
		} else {
			flagLimitName = fmt.Sprintf("%v.limit", cmdPrefix)
		}

		flagLimitValue, err := cmd.Flags().GetInt64(flagLimitName)
		if err != nil {
			return err, false
		}
		m.Limit = &flagLimitValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSummaryRequestPropQueryFlags(depth int, m *models.SummaryRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagQueryName := fmt.Sprintf("%v.query", cmdPrefix)
	if cmd.Flags().Changed(flagQueryName) {

		var flagQueryName string
		if cmdPrefix == "" {
			flagQueryName = "query"
		} else {
			flagQueryName = fmt.Sprintf("%v.query", cmdPrefix)
		}

		flagQueryValue, err := cmd.Flags().GetString(flagQueryName)
		if err != nil {
			return err, false
		}
		m.Query = flagQueryValue

		retAdded = true
	}

	return nil, retAdded
}
