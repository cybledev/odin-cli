// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for SchemaContact

// register flags to command
func registerModelSchemaContactFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSchemaContactPropAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaContactPropCity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaContactPropCompany(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaContactPropCountry(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaContactPropCountryCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaContactPropEmail(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaContactPropEmailDomain(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaContactPropFax(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaContactPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaContactPropPhone(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaContactPropState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaContactPropZip(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSchemaContactPropAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagAddressDescription := ``

	var flagAddressName string
	if cmdPrefix == "" {
		flagAddressName = "address"
	} else {
		flagAddressName = fmt.Sprintf("%v.address", cmdPrefix)
	}

	var flagAddressDefault string

	_ = cmd.PersistentFlags().String(flagAddressName, flagAddressDefault, flagAddressDescription)

	return nil
}

func registerSchemaContactPropCity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCityDescription := ``

	var flagCityName string
	if cmdPrefix == "" {
		flagCityName = "city"
	} else {
		flagCityName = fmt.Sprintf("%v.city", cmdPrefix)
	}

	var flagCityDefault string

	_ = cmd.PersistentFlags().String(flagCityName, flagCityDefault, flagCityDescription)

	return nil
}

func registerSchemaContactPropCompany(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCompanyDescription := ``

	var flagCompanyName string
	if cmdPrefix == "" {
		flagCompanyName = "company"
	} else {
		flagCompanyName = fmt.Sprintf("%v.company", cmdPrefix)
	}

	var flagCompanyDefault string

	_ = cmd.PersistentFlags().String(flagCompanyName, flagCompanyDefault, flagCompanyDescription)

	return nil
}

func registerSchemaContactPropCountry(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountryDescription := ``

	var flagCountryName string
	if cmdPrefix == "" {
		flagCountryName = "country"
	} else {
		flagCountryName = fmt.Sprintf("%v.country", cmdPrefix)
	}

	var flagCountryDefault string

	_ = cmd.PersistentFlags().String(flagCountryName, flagCountryDefault, flagCountryDescription)

	return nil
}

func registerSchemaContactPropCountryCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountryCodeDescription := ``

	var flagCountryCodeName string
	if cmdPrefix == "" {
		flagCountryCodeName = "country_code"
	} else {
		flagCountryCodeName = fmt.Sprintf("%v.country_code", cmdPrefix)
	}

	var flagCountryCodeDefault string

	_ = cmd.PersistentFlags().String(flagCountryCodeName, flagCountryCodeDefault, flagCountryCodeDescription)

	return nil
}

func registerSchemaContactPropEmail(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagEmailDescription := ``

	var flagEmailName string
	if cmdPrefix == "" {
		flagEmailName = "email"
	} else {
		flagEmailName = fmt.Sprintf("%v.email", cmdPrefix)
	}

	var flagEmailDefault string

	_ = cmd.PersistentFlags().String(flagEmailName, flagEmailDefault, flagEmailDescription)

	return nil
}

func registerSchemaContactPropEmailDomain(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagEmailDomainDescription := ``

	var flagEmailDomainName string
	if cmdPrefix == "" {
		flagEmailDomainName = "email_domain"
	} else {
		flagEmailDomainName = fmt.Sprintf("%v.email_domain", cmdPrefix)
	}

	var flagEmailDomainDefault string

	_ = cmd.PersistentFlags().String(flagEmailDomainName, flagEmailDomainDefault, flagEmailDomainDescription)

	return nil
}

func registerSchemaContactPropFax(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFaxDescription := ``

	var flagFaxName string
	if cmdPrefix == "" {
		flagFaxName = "fax"
	} else {
		flagFaxName = fmt.Sprintf("%v.fax", cmdPrefix)
	}

	var flagFaxDefault string

	_ = cmd.PersistentFlags().String(flagFaxName, flagFaxDefault, flagFaxDescription)

	return nil
}

func registerSchemaContactPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := ``

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerSchemaContactPropPhone(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagPhoneDescription := ``

	var flagPhoneName string
	if cmdPrefix == "" {
		flagPhoneName = "phone"
	} else {
		flagPhoneName = fmt.Sprintf("%v.phone", cmdPrefix)
	}

	var flagPhoneDefault string

	_ = cmd.PersistentFlags().String(flagPhoneName, flagPhoneDefault, flagPhoneDescription)

	return nil
}

func registerSchemaContactPropState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagStateDescription := ``

	var flagStateName string
	if cmdPrefix == "" {
		flagStateName = "state"
	} else {
		flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
	}

	var flagStateDefault string

	_ = cmd.PersistentFlags().String(flagStateName, flagStateDefault, flagStateDescription)

	return nil
}

func registerSchemaContactPropZip(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagZipDescription := ``

	var flagZipName string
	if cmdPrefix == "" {
		flagZipName = "zip"
	} else {
		flagZipName = fmt.Sprintf("%v.zip", cmdPrefix)
	}

	var flagZipDefault string

	_ = cmd.PersistentFlags().String(flagZipName, flagZipDefault, flagZipDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSchemaContactFlags(depth int, m *models.SchemaContact, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AddressAdded := retrieveSchemaContactPropAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AddressAdded

	err, CityAdded := retrieveSchemaContactPropCityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CityAdded

	err, CompanyAdded := retrieveSchemaContactPropCompanyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CompanyAdded

	err, CountryAdded := retrieveSchemaContactPropCountryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountryAdded

	err, CountryCodeAdded := retrieveSchemaContactPropCountryCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountryCodeAdded

	err, EmailAdded := retrieveSchemaContactPropEmailFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EmailAdded

	err, EmailDomainAdded := retrieveSchemaContactPropEmailDomainFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EmailDomainAdded

	err, FaxAdded := retrieveSchemaContactPropFaxFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FaxAdded

	err, NameAdded := retrieveSchemaContactPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, PhoneAdded := retrieveSchemaContactPropPhoneFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PhoneAdded

	err, StateAdded := retrieveSchemaContactPropStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StateAdded

	err, ZipAdded := retrieveSchemaContactPropZipFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ZipAdded

	return nil, retAdded
}

func retrieveSchemaContactPropAddressFlags(depth int, m *models.SchemaContact, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAddressName := fmt.Sprintf("%v.address", cmdPrefix)
	if cmd.Flags().Changed(flagAddressName) {

		var flagAddressName string
		if cmdPrefix == "" {
			flagAddressName = "address"
		} else {
			flagAddressName = fmt.Sprintf("%v.address", cmdPrefix)
		}

		flagAddressValue, err := cmd.Flags().GetString(flagAddressName)
		if err != nil {
			return err, false
		}
		m.Address = flagAddressValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSchemaContactPropCityFlags(depth int, m *models.SchemaContact, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCityName := fmt.Sprintf("%v.city", cmdPrefix)
	if cmd.Flags().Changed(flagCityName) {

		var flagCityName string
		if cmdPrefix == "" {
			flagCityName = "city"
		} else {
			flagCityName = fmt.Sprintf("%v.city", cmdPrefix)
		}

		flagCityValue, err := cmd.Flags().GetString(flagCityName)
		if err != nil {
			return err, false
		}
		m.City = flagCityValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSchemaContactPropCompanyFlags(depth int, m *models.SchemaContact, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCompanyName := fmt.Sprintf("%v.company", cmdPrefix)
	if cmd.Flags().Changed(flagCompanyName) {

		var flagCompanyName string
		if cmdPrefix == "" {
			flagCompanyName = "company"
		} else {
			flagCompanyName = fmt.Sprintf("%v.company", cmdPrefix)
		}

		flagCompanyValue, err := cmd.Flags().GetString(flagCompanyName)
		if err != nil {
			return err, false
		}
		m.Company = flagCompanyValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSchemaContactPropCountryFlags(depth int, m *models.SchemaContact, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountryName := fmt.Sprintf("%v.country", cmdPrefix)
	if cmd.Flags().Changed(flagCountryName) {

		var flagCountryName string
		if cmdPrefix == "" {
			flagCountryName = "country"
		} else {
			flagCountryName = fmt.Sprintf("%v.country", cmdPrefix)
		}

		flagCountryValue, err := cmd.Flags().GetString(flagCountryName)
		if err != nil {
			return err, false
		}
		m.Country = flagCountryValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSchemaContactPropCountryCodeFlags(depth int, m *models.SchemaContact, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountryCodeName := fmt.Sprintf("%v.country_code", cmdPrefix)
	if cmd.Flags().Changed(flagCountryCodeName) {

		var flagCountryCodeName string
		if cmdPrefix == "" {
			flagCountryCodeName = "country_code"
		} else {
			flagCountryCodeName = fmt.Sprintf("%v.country_code", cmdPrefix)
		}

		flagCountryCodeValue, err := cmd.Flags().GetString(flagCountryCodeName)
		if err != nil {
			return err, false
		}
		m.CountryCode = flagCountryCodeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSchemaContactPropEmailFlags(depth int, m *models.SchemaContact, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagEmailName := fmt.Sprintf("%v.email", cmdPrefix)
	if cmd.Flags().Changed(flagEmailName) {

		var flagEmailName string
		if cmdPrefix == "" {
			flagEmailName = "email"
		} else {
			flagEmailName = fmt.Sprintf("%v.email", cmdPrefix)
		}

		flagEmailValue, err := cmd.Flags().GetString(flagEmailName)
		if err != nil {
			return err, false
		}
		m.Email = flagEmailValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSchemaContactPropEmailDomainFlags(depth int, m *models.SchemaContact, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagEmailDomainName := fmt.Sprintf("%v.email_domain", cmdPrefix)
	if cmd.Flags().Changed(flagEmailDomainName) {

		var flagEmailDomainName string
		if cmdPrefix == "" {
			flagEmailDomainName = "email_domain"
		} else {
			flagEmailDomainName = fmt.Sprintf("%v.email_domain", cmdPrefix)
		}

		flagEmailDomainValue, err := cmd.Flags().GetString(flagEmailDomainName)
		if err != nil {
			return err, false
		}
		m.EmailDomain = flagEmailDomainValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSchemaContactPropFaxFlags(depth int, m *models.SchemaContact, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFaxName := fmt.Sprintf("%v.fax", cmdPrefix)
	if cmd.Flags().Changed(flagFaxName) {

		var flagFaxName string
		if cmdPrefix == "" {
			flagFaxName = "fax"
		} else {
			flagFaxName = fmt.Sprintf("%v.fax", cmdPrefix)
		}

		flagFaxValue, err := cmd.Flags().GetString(flagFaxName)
		if err != nil {
			return err, false
		}
		m.Fax = flagFaxValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSchemaContactPropNameFlags(depth int, m *models.SchemaContact, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSchemaContactPropPhoneFlags(depth int, m *models.SchemaContact, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPhoneName := fmt.Sprintf("%v.phone", cmdPrefix)
	if cmd.Flags().Changed(flagPhoneName) {

		var flagPhoneName string
		if cmdPrefix == "" {
			flagPhoneName = "phone"
		} else {
			flagPhoneName = fmt.Sprintf("%v.phone", cmdPrefix)
		}

		flagPhoneValue, err := cmd.Flags().GetString(flagPhoneName)
		if err != nil {
			return err, false
		}
		m.Phone = flagPhoneValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSchemaContactPropStateFlags(depth int, m *models.SchemaContact, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStateName := fmt.Sprintf("%v.state", cmdPrefix)
	if cmd.Flags().Changed(flagStateName) {

		var flagStateName string
		if cmdPrefix == "" {
			flagStateName = "state"
		} else {
			flagStateName = fmt.Sprintf("%v.state", cmdPrefix)
		}

		flagStateValue, err := cmd.Flags().GetString(flagStateName)
		if err != nil {
			return err, false
		}
		m.State = flagStateValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSchemaContactPropZipFlags(depth int, m *models.SchemaContact, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagZipName := fmt.Sprintf("%v.zip", cmdPrefix)
	if cmd.Flags().Changed(flagZipName) {

		var flagZipName string
		if cmdPrefix == "" {
			flagZipName = "zip"
		} else {
			flagZipName = fmt.Sprintf("%v.zip", cmdPrefix)
		}

		flagZipValue, err := cmd.Flags().GetString(flagZipName)
		if err != nil {
			return err, false
		}
		m.Zip = flagZipValue

		retAdded = true
	}

	return nil, retAdded
}
