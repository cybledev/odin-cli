// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for IpservicesHostsSummaryResponse

// register flags to command
func registerModelIpservicesHostsSummaryResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIpservicesHostsSummaryResponsePropData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesHostsSummaryResponsePropMessage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesHostsSummaryResponsePropSuccess(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIpservicesHostsSummaryResponsePropData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagDataName string
	if cmdPrefix == "" {
		flagDataName = "data"
	} else {
		flagDataName = fmt.Sprintf("%v.data", cmdPrefix)
	}

	if err := registerModelIpservicesHostsSummaryResponseDataFlags(depth+1, flagDataName, cmd); err != nil {
		return err
	}

	return nil
}

func registerIpservicesHostsSummaryResponsePropMessage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMessageDescription := ``

	var flagMessageName string
	if cmdPrefix == "" {
		flagMessageName = "message"
	} else {
		flagMessageName = fmt.Sprintf("%v.message", cmdPrefix)
	}

	var flagMessageDefault string

	_ = cmd.PersistentFlags().String(flagMessageName, flagMessageDefault, flagMessageDescription)

	return nil
}

func registerIpservicesHostsSummaryResponsePropSuccess(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSuccessDescription := ``

	var flagSuccessName string
	if cmdPrefix == "" {
		flagSuccessName = "success"
	} else {
		flagSuccessName = fmt.Sprintf("%v.success", cmdPrefix)
	}

	var flagSuccessDefault bool

	_ = cmd.PersistentFlags().Bool(flagSuccessName, flagSuccessDefault, flagSuccessDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIpservicesHostsSummaryResponseFlags(depth int, m *models.IpservicesHostsSummaryResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DataAdded := retrieveIpservicesHostsSummaryResponsePropDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DataAdded

	err, MessageAdded := retrieveIpservicesHostsSummaryResponsePropMessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MessageAdded

	err, SuccessAdded := retrieveIpservicesHostsSummaryResponsePropSuccessFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SuccessAdded

	return nil, retAdded
}

func retrieveIpservicesHostsSummaryResponsePropDataFlags(depth int, m *models.IpservicesHostsSummaryResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDataName := fmt.Sprintf("%v.data", cmdPrefix)
	if cmd.Flags().Changed(flagDataName) {
		// info: complex object data IpservicesHostsSummaryResponseData is retrieved outside this Changed() block
	}
	flagDataValue := m.Data
	if swag.IsZero(flagDataValue) {
		flagDataValue = &models.IpservicesHostsSummaryResponseData{}
	}

	err, DataAdded := retrieveModelIpservicesHostsSummaryResponseDataFlags(depth+1, flagDataValue, flagDataName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DataAdded
	if DataAdded {
		m.Data = flagDataValue
	}

	return nil, retAdded
}

func retrieveIpservicesHostsSummaryResponsePropMessageFlags(depth int, m *models.IpservicesHostsSummaryResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMessageName := fmt.Sprintf("%v.message", cmdPrefix)
	if cmd.Flags().Changed(flagMessageName) {

		var flagMessageName string
		if cmdPrefix == "" {
			flagMessageName = "message"
		} else {
			flagMessageName = fmt.Sprintf("%v.message", cmdPrefix)
		}

		flagMessageValue, err := cmd.Flags().GetString(flagMessageName)
		if err != nil {
			return err, false
		}
		m.Message = flagMessageValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIpservicesHostsSummaryResponsePropSuccessFlags(depth int, m *models.IpservicesHostsSummaryResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSuccessName := fmt.Sprintf("%v.success", cmdPrefix)
	if cmd.Flags().Changed(flagSuccessName) {

		var flagSuccessName string
		if cmdPrefix == "" {
			flagSuccessName = "success"
		} else {
			flagSuccessName = fmt.Sprintf("%v.success", cmdPrefix)
		}

		flagSuccessValue, err := cmd.Flags().GetBool(flagSuccessName)
		if err != nil {
			return err, false
		}
		m.Success = flagSuccessValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for IpservicesHostsSummaryResponseData

// register flags to command
func registerModelIpservicesHostsSummaryResponseDataFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIpservicesHostsSummaryResponseDataPropBuckets(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesHostsSummaryResponseDataPropDocCountErrorUpperBound(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesHostsSummaryResponseDataPropSumOtherDocCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIpservicesHostsSummaryResponseDataPropBuckets(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: buckets []*IpservicesHostsSummaryResponseDataBucketsItems0 array type is not supported by go-swagger cli yet

	return nil
}

func registerIpservicesHostsSummaryResponseDataPropDocCountErrorUpperBound(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagDocCountErrorUpperBoundDescription := ``

	var flagDocCountErrorUpperBoundName string
	if cmdPrefix == "" {
		flagDocCountErrorUpperBoundName = "doc_count_error_upper_bound"
	} else {
		flagDocCountErrorUpperBoundName = fmt.Sprintf("%v.doc_count_error_upper_bound", cmdPrefix)
	}

	var flagDocCountErrorUpperBoundDefault int64

	_ = cmd.PersistentFlags().Int64(flagDocCountErrorUpperBoundName, flagDocCountErrorUpperBoundDefault, flagDocCountErrorUpperBoundDescription)

	return nil
}

func registerIpservicesHostsSummaryResponseDataPropSumOtherDocCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSumOtherDocCountDescription := ``

	var flagSumOtherDocCountName string
	if cmdPrefix == "" {
		flagSumOtherDocCountName = "sum_other_doc_count"
	} else {
		flagSumOtherDocCountName = fmt.Sprintf("%v.sum_other_doc_count", cmdPrefix)
	}

	var flagSumOtherDocCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagSumOtherDocCountName, flagSumOtherDocCountDefault, flagSumOtherDocCountDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIpservicesHostsSummaryResponseDataFlags(depth int, m *models.IpservicesHostsSummaryResponseData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, BucketsAdded := retrieveIpservicesHostsSummaryResponseDataPropBucketsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BucketsAdded

	err, DocCountErrorUpperBoundAdded := retrieveIpservicesHostsSummaryResponseDataPropDocCountErrorUpperBoundFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DocCountErrorUpperBoundAdded

	err, SumOtherDocCountAdded := retrieveIpservicesHostsSummaryResponseDataPropSumOtherDocCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SumOtherDocCountAdded

	return nil, retAdded
}

func retrieveIpservicesHostsSummaryResponseDataPropBucketsFlags(depth int, m *models.IpservicesHostsSummaryResponseData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagBucketsName := fmt.Sprintf("%v.buckets", cmdPrefix)
	if cmd.Flags().Changed(flagBucketsName) {
		// warning: buckets array type []*IpservicesHostsSummaryResponseDataBucketsItems0 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIpservicesHostsSummaryResponseDataPropDocCountErrorUpperBoundFlags(depth int, m *models.IpservicesHostsSummaryResponseData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDocCountErrorUpperBoundName := fmt.Sprintf("%v.doc_count_error_upper_bound", cmdPrefix)
	if cmd.Flags().Changed(flagDocCountErrorUpperBoundName) {

		var flagDocCountErrorUpperBoundName string
		if cmdPrefix == "" {
			flagDocCountErrorUpperBoundName = "doc_count_error_upper_bound"
		} else {
			flagDocCountErrorUpperBoundName = fmt.Sprintf("%v.doc_count_error_upper_bound", cmdPrefix)
		}

		flagDocCountErrorUpperBoundValue, err := cmd.Flags().GetInt64(flagDocCountErrorUpperBoundName)
		if err != nil {
			return err, false
		}
		m.DocCountErrorUpperBound = flagDocCountErrorUpperBoundValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIpservicesHostsSummaryResponseDataPropSumOtherDocCountFlags(depth int, m *models.IpservicesHostsSummaryResponseData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSumOtherDocCountName := fmt.Sprintf("%v.sum_other_doc_count", cmdPrefix)
	if cmd.Flags().Changed(flagSumOtherDocCountName) {

		var flagSumOtherDocCountName string
		if cmdPrefix == "" {
			flagSumOtherDocCountName = "sum_other_doc_count"
		} else {
			flagSumOtherDocCountName = fmt.Sprintf("%v.sum_other_doc_count", cmdPrefix)
		}

		flagSumOtherDocCountValue, err := cmd.Flags().GetInt64(flagSumOtherDocCountName)
		if err != nil {
			return err, false
		}
		m.SumOtherDocCount = flagSumOtherDocCountValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for IpservicesHostsSummaryResponseDataBucketsItems0

// register flags to command
func registerModelIpservicesHostsSummaryResponseDataBucketsItems0Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIpservicesHostsSummaryResponseDataBucketsItems0PropDocCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesHostsSummaryResponseDataBucketsItems0PropKey(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIpservicesHostsSummaryResponseDataBucketsItems0PropDocCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagDocCountDescription := ``

	var flagDocCountName string
	if cmdPrefix == "" {
		flagDocCountName = "doc_count"
	} else {
		flagDocCountName = fmt.Sprintf("%v.doc_count", cmdPrefix)
	}

	var flagDocCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagDocCountName, flagDocCountDefault, flagDocCountDescription)

	return nil
}

func registerIpservicesHostsSummaryResponseDataBucketsItems0PropKey(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: key interface{} map type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIpservicesHostsSummaryResponseDataBucketsItems0Flags(depth int, m *models.IpservicesHostsSummaryResponseDataBucketsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DocCountAdded := retrieveIpservicesHostsSummaryResponseDataBucketsItems0PropDocCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DocCountAdded

	err, KeyAdded := retrieveIpservicesHostsSummaryResponseDataBucketsItems0PropKeyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || KeyAdded

	return nil, retAdded
}

func retrieveIpservicesHostsSummaryResponseDataBucketsItems0PropDocCountFlags(depth int, m *models.IpservicesHostsSummaryResponseDataBucketsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDocCountName := fmt.Sprintf("%v.doc_count", cmdPrefix)
	if cmd.Flags().Changed(flagDocCountName) {

		var flagDocCountName string
		if cmdPrefix == "" {
			flagDocCountName = "doc_count"
		} else {
			flagDocCountName = fmt.Sprintf("%v.doc_count", cmdPrefix)
		}

		flagDocCountValue, err := cmd.Flags().GetInt64(flagDocCountName)
		if err != nil {
			return err, false
		}
		m.DocCount = flagDocCountValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIpservicesHostsSummaryResponseDataBucketsItems0PropKeyFlags(depth int, m *models.IpservicesHostsSummaryResponseDataBucketsItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagKeyName := fmt.Sprintf("%v.key", cmdPrefix)
	if cmd.Flags().Changed(flagKeyName) {
		// warning: key map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
