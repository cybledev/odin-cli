// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for SchemaDomainWhoisResponse

// register flags to command
func registerModelSchemaDomainWhoisResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSchemaDomainWhoisResponsePropAdministrativeContact(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaDomainWhoisResponsePropAuditedFields(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaDomainWhoisResponsePropBillingContact(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaDomainWhoisResponsePropCreatedDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaDomainWhoisResponsePropDomainName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaDomainWhoisResponsePropDomainStatus(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaDomainWhoisResponsePropExpiresDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaDomainWhoisResponsePropNameServers(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaDomainWhoisResponsePropRawData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaDomainWhoisResponsePropRegistrantContact(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaDomainWhoisResponsePropRegistrar(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaDomainWhoisResponsePropTechnicalContact(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaDomainWhoisResponsePropTld(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaDomainWhoisResponsePropUpdatedDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSchemaDomainWhoisResponsePropAdministrativeContact(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagAdministrativeContactName string
	if cmdPrefix == "" {
		flagAdministrativeContactName = "administrative_contact"
	} else {
		flagAdministrativeContactName = fmt.Sprintf("%v.administrative_contact", cmdPrefix)
	}

	if err := registerModelSchemaContactFlags(depth+1, flagAdministrativeContactName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSchemaDomainWhoisResponsePropAuditedFields(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagAuditedFieldsName string
	if cmdPrefix == "" {
		flagAuditedFieldsName = "audited_fields"
	} else {
		flagAuditedFieldsName = fmt.Sprintf("%v.audited_fields", cmdPrefix)
	}

	if err := registerModelSchemaAuditFlags(depth+1, flagAuditedFieldsName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSchemaDomainWhoisResponsePropBillingContact(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagBillingContactName string
	if cmdPrefix == "" {
		flagBillingContactName = "billing_contact"
	} else {
		flagBillingContactName = fmt.Sprintf("%v.billing_contact", cmdPrefix)
	}

	if err := registerModelSchemaContactFlags(depth+1, flagBillingContactName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSchemaDomainWhoisResponsePropCreatedDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCreatedDateDescription := ``

	var flagCreatedDateName string
	if cmdPrefix == "" {
		flagCreatedDateName = "created_date"
	} else {
		flagCreatedDateName = fmt.Sprintf("%v.created_date", cmdPrefix)
	}

	var flagCreatedDateDefault string

	_ = cmd.PersistentFlags().String(flagCreatedDateName, flagCreatedDateDefault, flagCreatedDateDescription)

	return nil
}

func registerSchemaDomainWhoisResponsePropDomainName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagDomainNameDescription := ``

	var flagDomainNameName string
	if cmdPrefix == "" {
		flagDomainNameName = "domain_name"
	} else {
		flagDomainNameName = fmt.Sprintf("%v.domain_name", cmdPrefix)
	}

	var flagDomainNameDefault string

	_ = cmd.PersistentFlags().String(flagDomainNameName, flagDomainNameDefault, flagDomainNameDescription)

	return nil
}

func registerSchemaDomainWhoisResponsePropDomainStatus(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: domain_status []string array type is not supported by go-swagger cli yet

	return nil
}

func registerSchemaDomainWhoisResponsePropExpiresDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagExpiresDateDescription := ``

	var flagExpiresDateName string
	if cmdPrefix == "" {
		flagExpiresDateName = "expires_date"
	} else {
		flagExpiresDateName = fmt.Sprintf("%v.expires_date", cmdPrefix)
	}

	var flagExpiresDateDefault string

	_ = cmd.PersistentFlags().String(flagExpiresDateName, flagExpiresDateDefault, flagExpiresDateDescription)

	return nil
}

func registerSchemaDomainWhoisResponsePropNameServers(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: name_servers []string array type is not supported by go-swagger cli yet

	return nil
}

func registerSchemaDomainWhoisResponsePropRawData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagRawDataDescription := `IngestedAt            time.Time  ` + "`" + `json:"ingested_at"` + "`" + ``

	var flagRawDataName string
	if cmdPrefix == "" {
		flagRawDataName = "raw_data"
	} else {
		flagRawDataName = fmt.Sprintf("%v.raw_data", cmdPrefix)
	}

	var flagRawDataDefault string

	_ = cmd.PersistentFlags().String(flagRawDataName, flagRawDataDefault, flagRawDataDescription)

	return nil
}

func registerSchemaDomainWhoisResponsePropRegistrantContact(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagRegistrantContactName string
	if cmdPrefix == "" {
		flagRegistrantContactName = "registrant_contact"
	} else {
		flagRegistrantContactName = fmt.Sprintf("%v.registrant_contact", cmdPrefix)
	}

	if err := registerModelSchemaContactFlags(depth+1, flagRegistrantContactName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSchemaDomainWhoisResponsePropRegistrar(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagRegistrarName string
	if cmdPrefix == "" {
		flagRegistrarName = "registrar"
	} else {
		flagRegistrarName = fmt.Sprintf("%v.registrar", cmdPrefix)
	}

	if err := registerModelSchemaRegistrarFlags(depth+1, flagRegistrarName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSchemaDomainWhoisResponsePropTechnicalContact(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagTechnicalContactName string
	if cmdPrefix == "" {
		flagTechnicalContactName = "technical_contact"
	} else {
		flagTechnicalContactName = fmt.Sprintf("%v.technical_contact", cmdPrefix)
	}

	if err := registerModelSchemaContactFlags(depth+1, flagTechnicalContactName, cmd); err != nil {
		return err
	}

	return nil
}

func registerSchemaDomainWhoisResponsePropTld(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTldDescription := ``

	var flagTldName string
	if cmdPrefix == "" {
		flagTldName = "tld"
	} else {
		flagTldName = fmt.Sprintf("%v.tld", cmdPrefix)
	}

	var flagTldDefault string

	_ = cmd.PersistentFlags().String(flagTldName, flagTldDefault, flagTldDescription)

	return nil
}

func registerSchemaDomainWhoisResponsePropUpdatedDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUpdatedDateDescription := ``

	var flagUpdatedDateName string
	if cmdPrefix == "" {
		flagUpdatedDateName = "updated_date"
	} else {
		flagUpdatedDateName = fmt.Sprintf("%v.updated_date", cmdPrefix)
	}

	var flagUpdatedDateDefault string

	_ = cmd.PersistentFlags().String(flagUpdatedDateName, flagUpdatedDateDefault, flagUpdatedDateDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSchemaDomainWhoisResponseFlags(depth int, m *models.SchemaDomainWhoisResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AdministrativeContactAdded := retrieveSchemaDomainWhoisResponsePropAdministrativeContactFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AdministrativeContactAdded

	err, AuditedFieldsAdded := retrieveSchemaDomainWhoisResponsePropAuditedFieldsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AuditedFieldsAdded

	err, BillingContactAdded := retrieveSchemaDomainWhoisResponsePropBillingContactFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BillingContactAdded

	err, CreatedDateAdded := retrieveSchemaDomainWhoisResponsePropCreatedDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CreatedDateAdded

	err, DomainNameAdded := retrieveSchemaDomainWhoisResponsePropDomainNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DomainNameAdded

	err, DomainStatusAdded := retrieveSchemaDomainWhoisResponsePropDomainStatusFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DomainStatusAdded

	err, ExpiresDateAdded := retrieveSchemaDomainWhoisResponsePropExpiresDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ExpiresDateAdded

	err, NameServersAdded := retrieveSchemaDomainWhoisResponsePropNameServersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameServersAdded

	err, RawDataAdded := retrieveSchemaDomainWhoisResponsePropRawDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RawDataAdded

	err, RegistrantContactAdded := retrieveSchemaDomainWhoisResponsePropRegistrantContactFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RegistrantContactAdded

	err, RegistrarAdded := retrieveSchemaDomainWhoisResponsePropRegistrarFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RegistrarAdded

	err, TechnicalContactAdded := retrieveSchemaDomainWhoisResponsePropTechnicalContactFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TechnicalContactAdded

	err, TldAdded := retrieveSchemaDomainWhoisResponsePropTldFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TldAdded

	err, UpdatedDateAdded := retrieveSchemaDomainWhoisResponsePropUpdatedDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UpdatedDateAdded

	return nil, retAdded
}

func retrieveSchemaDomainWhoisResponsePropAdministrativeContactFlags(depth int, m *models.SchemaDomainWhoisResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAdministrativeContactName := fmt.Sprintf("%v.administrative_contact", cmdPrefix)
	if cmd.Flags().Changed(flagAdministrativeContactName) {
		// info: complex object administrative_contact SchemaContact is retrieved outside this Changed() block
	}
	flagAdministrativeContactValue := m.AdministrativeContact
	if swag.IsZero(flagAdministrativeContactValue) {
		flagAdministrativeContactValue = &models.SchemaContact{}
	}

	err, AdministrativeContactAdded := retrieveModelSchemaContactFlags(depth+1, flagAdministrativeContactValue, flagAdministrativeContactName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AdministrativeContactAdded
	if AdministrativeContactAdded {
		m.AdministrativeContact = flagAdministrativeContactValue
	}

	return nil, retAdded
}

func retrieveSchemaDomainWhoisResponsePropAuditedFieldsFlags(depth int, m *models.SchemaDomainWhoisResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAuditedFieldsName := fmt.Sprintf("%v.audited_fields", cmdPrefix)
	if cmd.Flags().Changed(flagAuditedFieldsName) {
		// info: complex object audited_fields SchemaAudit is retrieved outside this Changed() block
	}
	flagAuditedFieldsValue := m.AuditedFields
	if swag.IsZero(flagAuditedFieldsValue) {
		flagAuditedFieldsValue = &models.SchemaAudit{}
	}

	err, AuditedFieldsAdded := retrieveModelSchemaAuditFlags(depth+1, flagAuditedFieldsValue, flagAuditedFieldsName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AuditedFieldsAdded
	if AuditedFieldsAdded {
		m.AuditedFields = flagAuditedFieldsValue
	}

	return nil, retAdded
}

func retrieveSchemaDomainWhoisResponsePropBillingContactFlags(depth int, m *models.SchemaDomainWhoisResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagBillingContactName := fmt.Sprintf("%v.billing_contact", cmdPrefix)
	if cmd.Flags().Changed(flagBillingContactName) {
		// info: complex object billing_contact SchemaContact is retrieved outside this Changed() block
	}
	flagBillingContactValue := m.BillingContact
	if swag.IsZero(flagBillingContactValue) {
		flagBillingContactValue = &models.SchemaContact{}
	}

	err, BillingContactAdded := retrieveModelSchemaContactFlags(depth+1, flagBillingContactValue, flagBillingContactName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BillingContactAdded
	if BillingContactAdded {
		m.BillingContact = flagBillingContactValue
	}

	return nil, retAdded
}

func retrieveSchemaDomainWhoisResponsePropCreatedDateFlags(depth int, m *models.SchemaDomainWhoisResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCreatedDateName := fmt.Sprintf("%v.created_date", cmdPrefix)
	if cmd.Flags().Changed(flagCreatedDateName) {

		var flagCreatedDateName string
		if cmdPrefix == "" {
			flagCreatedDateName = "created_date"
		} else {
			flagCreatedDateName = fmt.Sprintf("%v.created_date", cmdPrefix)
		}

		flagCreatedDateValue, err := cmd.Flags().GetString(flagCreatedDateName)
		if err != nil {
			return err, false
		}
		m.CreatedDate = flagCreatedDateValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSchemaDomainWhoisResponsePropDomainNameFlags(depth int, m *models.SchemaDomainWhoisResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDomainNameName := fmt.Sprintf("%v.domain_name", cmdPrefix)
	if cmd.Flags().Changed(flagDomainNameName) {

		var flagDomainNameName string
		if cmdPrefix == "" {
			flagDomainNameName = "domain_name"
		} else {
			flagDomainNameName = fmt.Sprintf("%v.domain_name", cmdPrefix)
		}

		flagDomainNameValue, err := cmd.Flags().GetString(flagDomainNameName)
		if err != nil {
			return err, false
		}
		m.DomainName = flagDomainNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSchemaDomainWhoisResponsePropDomainStatusFlags(depth int, m *models.SchemaDomainWhoisResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDomainStatusName := fmt.Sprintf("%v.domain_status", cmdPrefix)
	if cmd.Flags().Changed(flagDomainStatusName) {
		// warning: domain_status array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveSchemaDomainWhoisResponsePropExpiresDateFlags(depth int, m *models.SchemaDomainWhoisResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagExpiresDateName := fmt.Sprintf("%v.expires_date", cmdPrefix)
	if cmd.Flags().Changed(flagExpiresDateName) {

		var flagExpiresDateName string
		if cmdPrefix == "" {
			flagExpiresDateName = "expires_date"
		} else {
			flagExpiresDateName = fmt.Sprintf("%v.expires_date", cmdPrefix)
		}

		flagExpiresDateValue, err := cmd.Flags().GetString(flagExpiresDateName)
		if err != nil {
			return err, false
		}
		m.ExpiresDate = flagExpiresDateValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSchemaDomainWhoisResponsePropNameServersFlags(depth int, m *models.SchemaDomainWhoisResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameServersName := fmt.Sprintf("%v.name_servers", cmdPrefix)
	if cmd.Flags().Changed(flagNameServersName) {
		// warning: name_servers array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveSchemaDomainWhoisResponsePropRawDataFlags(depth int, m *models.SchemaDomainWhoisResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagRawDataName := fmt.Sprintf("%v.raw_data", cmdPrefix)
	if cmd.Flags().Changed(flagRawDataName) {

		var flagRawDataName string
		if cmdPrefix == "" {
			flagRawDataName = "raw_data"
		} else {
			flagRawDataName = fmt.Sprintf("%v.raw_data", cmdPrefix)
		}

		flagRawDataValue, err := cmd.Flags().GetString(flagRawDataName)
		if err != nil {
			return err, false
		}
		m.RawData = flagRawDataValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSchemaDomainWhoisResponsePropRegistrantContactFlags(depth int, m *models.SchemaDomainWhoisResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagRegistrantContactName := fmt.Sprintf("%v.registrant_contact", cmdPrefix)
	if cmd.Flags().Changed(flagRegistrantContactName) {
		// info: complex object registrant_contact SchemaContact is retrieved outside this Changed() block
	}
	flagRegistrantContactValue := m.RegistrantContact
	if swag.IsZero(flagRegistrantContactValue) {
		flagRegistrantContactValue = &models.SchemaContact{}
	}

	err, RegistrantContactAdded := retrieveModelSchemaContactFlags(depth+1, flagRegistrantContactValue, flagRegistrantContactName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RegistrantContactAdded
	if RegistrantContactAdded {
		m.RegistrantContact = flagRegistrantContactValue
	}

	return nil, retAdded
}

func retrieveSchemaDomainWhoisResponsePropRegistrarFlags(depth int, m *models.SchemaDomainWhoisResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagRegistrarName := fmt.Sprintf("%v.registrar", cmdPrefix)
	if cmd.Flags().Changed(flagRegistrarName) {
		// info: complex object registrar SchemaRegistrar is retrieved outside this Changed() block
	}
	flagRegistrarValue := m.Registrar
	if swag.IsZero(flagRegistrarValue) {
		flagRegistrarValue = &models.SchemaRegistrar{}
	}

	err, RegistrarAdded := retrieveModelSchemaRegistrarFlags(depth+1, flagRegistrarValue, flagRegistrarName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || RegistrarAdded
	if RegistrarAdded {
		m.Registrar = flagRegistrarValue
	}

	return nil, retAdded
}

func retrieveSchemaDomainWhoisResponsePropTechnicalContactFlags(depth int, m *models.SchemaDomainWhoisResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTechnicalContactName := fmt.Sprintf("%v.technical_contact", cmdPrefix)
	if cmd.Flags().Changed(flagTechnicalContactName) {
		// info: complex object technical_contact SchemaContact is retrieved outside this Changed() block
	}
	flagTechnicalContactValue := m.TechnicalContact
	if swag.IsZero(flagTechnicalContactValue) {
		flagTechnicalContactValue = &models.SchemaContact{}
	}

	err, TechnicalContactAdded := retrieveModelSchemaContactFlags(depth+1, flagTechnicalContactValue, flagTechnicalContactName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TechnicalContactAdded
	if TechnicalContactAdded {
		m.TechnicalContact = flagTechnicalContactValue
	}

	return nil, retAdded
}

func retrieveSchemaDomainWhoisResponsePropTldFlags(depth int, m *models.SchemaDomainWhoisResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTldName := fmt.Sprintf("%v.tld", cmdPrefix)
	if cmd.Flags().Changed(flagTldName) {

		var flagTldName string
		if cmdPrefix == "" {
			flagTldName = "tld"
		} else {
			flagTldName = fmt.Sprintf("%v.tld", cmdPrefix)
		}

		flagTldValue, err := cmd.Flags().GetString(flagTldName)
		if err != nil {
			return err, false
		}
		m.Tld = flagTldValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSchemaDomainWhoisResponsePropUpdatedDateFlags(depth int, m *models.SchemaDomainWhoisResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUpdatedDateName := fmt.Sprintf("%v.updated_date", cmdPrefix)
	if cmd.Flags().Changed(flagUpdatedDateName) {

		var flagUpdatedDateName string
		if cmdPrefix == "" {
			flagUpdatedDateName = "updated_date"
		} else {
			flagUpdatedDateName = fmt.Sprintf("%v.updated_date", cmdPrefix)
		}

		flagUpdatedDateValue, err := cmd.Flags().GetString(flagUpdatedDateName)
		if err != nil {
			return err, false
		}
		m.UpdatedDate = flagUpdatedDateValue

		retAdded = true
	}

	return nil, retAdded
}
