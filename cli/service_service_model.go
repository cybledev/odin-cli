// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for ServiceService

// register flags to command
func registerModelServiceServiceFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerServiceServicePropMeta(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceServicePropAsn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceServicePropAsnUpdatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceServicePropBanners(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceServicePropCve(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceServicePropDomains(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceServicePropExtraInfo(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceServicePropHostnames(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceServicePropIP(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceServicePropIsIPV4(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceServicePropIsIPV6(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceServicePropIsVuln(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceServicePropLastUpdatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceServicePropLocation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceServicePropLocationUpdatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceServicePropModules(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceServicePropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceServicePropPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceServicePropProduct(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceServicePropProtocol(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceServicePropScanID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceServicePropSoftwares(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceServicePropTags(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceServicePropTunnel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceServicePropVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceServicePropWhois(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceServicePropWhoisUpdatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerServiceServicePropMeta(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagMetaName string
	if cmdPrefix == "" {
		flagMetaName = "_meta"
	} else {
		flagMetaName = fmt.Sprintf("%v._meta", cmdPrefix)
	}

	if err := registerModelServiceIPServiceMetaFlags(depth+1, flagMetaName, cmd); err != nil {
		return err
	}

	return nil
}

func registerServiceServicePropAsn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagAsnName string
	if cmdPrefix == "" {
		flagAsnName = "asn"
	} else {
		flagAsnName = fmt.Sprintf("%v.asn", cmdPrefix)
	}

	if err := registerModelServiceIPASNFlags(depth+1, flagAsnName, cmd); err != nil {
		return err
	}

	return nil
}

func registerServiceServicePropAsnUpdatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagAsnUpdatedAtDescription := ``

	var flagAsnUpdatedAtName string
	if cmdPrefix == "" {
		flagAsnUpdatedAtName = "asn_updated_at"
	} else {
		flagAsnUpdatedAtName = fmt.Sprintf("%v.asn_updated_at", cmdPrefix)
	}

	var flagAsnUpdatedAtDefault string

	_ = cmd.PersistentFlags().String(flagAsnUpdatedAtName, flagAsnUpdatedAtDefault, flagAsnUpdatedAtDescription)

	return nil
}

func registerServiceServicePropBanners(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: banners []string array type is not supported by go-swagger cli yet

	return nil
}

func registerServiceServicePropCve(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: cve []*ServiceFullCveData array type is not supported by go-swagger cli yet

	return nil
}

func registerServiceServicePropDomains(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: domains []*ServiceIPDomain array type is not supported by go-swagger cli yet

	return nil
}

func registerServiceServicePropExtraInfo(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagExtraInfoDescription := ``

	var flagExtraInfoName string
	if cmdPrefix == "" {
		flagExtraInfoName = "extra_info"
	} else {
		flagExtraInfoName = fmt.Sprintf("%v.extra_info", cmdPrefix)
	}

	var flagExtraInfoDefault string

	_ = cmd.PersistentFlags().String(flagExtraInfoName, flagExtraInfoDefault, flagExtraInfoDescription)

	return nil
}

func registerServiceServicePropHostnames(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: hostnames []*ServiceIPHostname array type is not supported by go-swagger cli yet

	return nil
}

func registerServiceServicePropIP(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIPDescription := ``

	var flagIPName string
	if cmdPrefix == "" {
		flagIPName = "ip"
	} else {
		flagIPName = fmt.Sprintf("%v.ip", cmdPrefix)
	}

	var flagIPDefault string

	_ = cmd.PersistentFlags().String(flagIPName, flagIPDefault, flagIPDescription)

	return nil
}

func registerServiceServicePropIsIPV4(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIsIPV4Description := ``

	var flagIsIPV4Name string
	if cmdPrefix == "" {
		flagIsIPV4Name = "is_ipv4"
	} else {
		flagIsIPV4Name = fmt.Sprintf("%v.is_ipv4", cmdPrefix)
	}

	var flagIsIPV4Default bool

	_ = cmd.PersistentFlags().Bool(flagIsIPV4Name, flagIsIPV4Default, flagIsIPV4Description)

	return nil
}

func registerServiceServicePropIsIPV6(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIsIPV6Description := ``

	var flagIsIPV6Name string
	if cmdPrefix == "" {
		flagIsIPV6Name = "is_ipv6"
	} else {
		flagIsIPV6Name = fmt.Sprintf("%v.is_ipv6", cmdPrefix)
	}

	var flagIsIPV6Default bool

	_ = cmd.PersistentFlags().Bool(flagIsIPV6Name, flagIsIPV6Default, flagIsIPV6Description)

	return nil
}

func registerServiceServicePropIsVuln(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIsVulnDescription := ``

	var flagIsVulnName string
	if cmdPrefix == "" {
		flagIsVulnName = "is_vuln"
	} else {
		flagIsVulnName = fmt.Sprintf("%v.is_vuln", cmdPrefix)
	}

	var flagIsVulnDefault bool

	_ = cmd.PersistentFlags().Bool(flagIsVulnName, flagIsVulnDefault, flagIsVulnDescription)

	return nil
}

func registerServiceServicePropLastUpdatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLastUpdatedAtDescription := ``

	var flagLastUpdatedAtName string
	if cmdPrefix == "" {
		flagLastUpdatedAtName = "last_updated_at"
	} else {
		flagLastUpdatedAtName = fmt.Sprintf("%v.last_updated_at", cmdPrefix)
	}

	var flagLastUpdatedAtDefault string

	_ = cmd.PersistentFlags().String(flagLastUpdatedAtName, flagLastUpdatedAtDefault, flagLastUpdatedAtDescription)

	return nil
}

func registerServiceServicePropLocation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLocationName string
	if cmdPrefix == "" {
		flagLocationName = "location"
	} else {
		flagLocationName = fmt.Sprintf("%v.location", cmdPrefix)
	}

	if err := registerModelServiceIPLocationFlags(depth+1, flagLocationName, cmd); err != nil {
		return err
	}

	return nil
}

func registerServiceServicePropLocationUpdatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLocationUpdatedAtDescription := ``

	var flagLocationUpdatedAtName string
	if cmdPrefix == "" {
		flagLocationUpdatedAtName = "location_updated_at"
	} else {
		flagLocationUpdatedAtName = fmt.Sprintf("%v.location_updated_at", cmdPrefix)
	}

	var flagLocationUpdatedAtDefault string

	_ = cmd.PersistentFlags().String(flagLocationUpdatedAtName, flagLocationUpdatedAtDefault, flagLocationUpdatedAtDescription)

	return nil
}

func registerServiceServicePropModules(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: modules interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerServiceServicePropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := ``

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerServiceServicePropPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagPortDescription := ``

	var flagPortName string
	if cmdPrefix == "" {
		flagPortName = "port"
	} else {
		flagPortName = fmt.Sprintf("%v.port", cmdPrefix)
	}

	var flagPortDefault int64

	_ = cmd.PersistentFlags().Int64(flagPortName, flagPortDefault, flagPortDescription)

	return nil
}

func registerServiceServicePropProduct(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagProductDescription := ``

	var flagProductName string
	if cmdPrefix == "" {
		flagProductName = "product"
	} else {
		flagProductName = fmt.Sprintf("%v.product", cmdPrefix)
	}

	var flagProductDefault string

	_ = cmd.PersistentFlags().String(flagProductName, flagProductDefault, flagProductDescription)

	return nil
}

func registerServiceServicePropProtocol(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagProtocolDescription := ``

	var flagProtocolName string
	if cmdPrefix == "" {
		flagProtocolName = "protocol"
	} else {
		flagProtocolName = fmt.Sprintf("%v.protocol", cmdPrefix)
	}

	var flagProtocolDefault string

	_ = cmd.PersistentFlags().String(flagProtocolName, flagProtocolDefault, flagProtocolDescription)

	return nil
}

func registerServiceServicePropScanID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagScanIDDescription := ``

	var flagScanIDName string
	if cmdPrefix == "" {
		flagScanIDName = "scan_id"
	} else {
		flagScanIDName = fmt.Sprintf("%v.scan_id", cmdPrefix)
	}

	var flagScanIDDefault int64

	_ = cmd.PersistentFlags().Int64(flagScanIDName, flagScanIDDefault, flagScanIDDescription)

	return nil
}

func registerServiceServicePropSoftwares(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: softwares []*ServiceIPServiceSoftware array type is not supported by go-swagger cli yet

	return nil
}

func registerServiceServicePropTags(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: tags []*ServiceIPTag array type is not supported by go-swagger cli yet

	return nil
}

func registerServiceServicePropTunnel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTunnelDescription := ``

	var flagTunnelName string
	if cmdPrefix == "" {
		flagTunnelName = "tunnel"
	} else {
		flagTunnelName = fmt.Sprintf("%v.tunnel", cmdPrefix)
	}

	var flagTunnelDefault string

	_ = cmd.PersistentFlags().String(flagTunnelName, flagTunnelDefault, flagTunnelDescription)

	return nil
}

func registerServiceServicePropVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagVersionDescription := ``

	var flagVersionName string
	if cmdPrefix == "" {
		flagVersionName = "version"
	} else {
		flagVersionName = fmt.Sprintf("%v.version", cmdPrefix)
	}

	var flagVersionDefault string

	_ = cmd.PersistentFlags().String(flagVersionName, flagVersionDefault, flagVersionDescription)

	return nil
}

func registerServiceServicePropWhois(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagWhoisName string
	if cmdPrefix == "" {
		flagWhoisName = "whois"
	} else {
		flagWhoisName = fmt.Sprintf("%v.whois", cmdPrefix)
	}

	if err := registerModelServiceIPWhoisFlags(depth+1, flagWhoisName, cmd); err != nil {
		return err
	}

	return nil
}

func registerServiceServicePropWhoisUpdatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagWhoisUpdatedAtDescription := ``

	var flagWhoisUpdatedAtName string
	if cmdPrefix == "" {
		flagWhoisUpdatedAtName = "whois_updated_at"
	} else {
		flagWhoisUpdatedAtName = fmt.Sprintf("%v.whois_updated_at", cmdPrefix)
	}

	var flagWhoisUpdatedAtDefault string

	_ = cmd.PersistentFlags().String(flagWhoisUpdatedAtName, flagWhoisUpdatedAtDefault, flagWhoisUpdatedAtDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelServiceServiceFlags(depth int, m *models.ServiceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, MetaAdded := retrieveServiceServicePropMetaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MetaAdded

	err, AsnAdded := retrieveServiceServicePropAsnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AsnAdded

	err, AsnUpdatedAtAdded := retrieveServiceServicePropAsnUpdatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AsnUpdatedAtAdded

	err, BannersAdded := retrieveServiceServicePropBannersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BannersAdded

	err, CveAdded := retrieveServiceServicePropCveFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CveAdded

	err, DomainsAdded := retrieveServiceServicePropDomainsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DomainsAdded

	err, ExtraInfoAdded := retrieveServiceServicePropExtraInfoFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ExtraInfoAdded

	err, HostnamesAdded := retrieveServiceServicePropHostnamesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HostnamesAdded

	err, IPAdded := retrieveServiceServicePropIPFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IPAdded

	err, IsIPV4Added := retrieveServiceServicePropIsIPV4Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IsIPV4Added

	err, IsIPV6Added := retrieveServiceServicePropIsIPV6Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IsIPV6Added

	err, IsVulnAdded := retrieveServiceServicePropIsVulnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IsVulnAdded

	err, LastUpdatedAtAdded := retrieveServiceServicePropLastUpdatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LastUpdatedAtAdded

	err, LocationAdded := retrieveServiceServicePropLocationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LocationAdded

	err, LocationUpdatedAtAdded := retrieveServiceServicePropLocationUpdatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LocationUpdatedAtAdded

	err, ModulesAdded := retrieveServiceServicePropModulesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ModulesAdded

	err, NameAdded := retrieveServiceServicePropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, PortAdded := retrieveServiceServicePropPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PortAdded

	err, ProductAdded := retrieveServiceServicePropProductFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ProductAdded

	err, ProtocolAdded := retrieveServiceServicePropProtocolFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ProtocolAdded

	err, ScanIDAdded := retrieveServiceServicePropScanIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ScanIDAdded

	err, SoftwaresAdded := retrieveServiceServicePropSoftwaresFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SoftwaresAdded

	err, TagsAdded := retrieveServiceServicePropTagsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TagsAdded

	err, TunnelAdded := retrieveServiceServicePropTunnelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TunnelAdded

	err, VersionAdded := retrieveServiceServicePropVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VersionAdded

	err, WhoisAdded := retrieveServiceServicePropWhoisFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WhoisAdded

	err, WhoisUpdatedAtAdded := retrieveServiceServicePropWhoisUpdatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WhoisUpdatedAtAdded

	return nil, retAdded
}

func retrieveServiceServicePropMetaFlags(depth int, m *models.ServiceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMetaName := fmt.Sprintf("%v._meta", cmdPrefix)
	if cmd.Flags().Changed(flagMetaName) {
		// info: complex object _meta ServiceIPServiceMeta is retrieved outside this Changed() block
	}
	flagMetaValue := m.Meta
	if swag.IsZero(flagMetaValue) {
		flagMetaValue = &models.ServiceIPServiceMeta{}
	}

	err, MetaAdded := retrieveModelServiceIPServiceMetaFlags(depth+1, flagMetaValue, flagMetaName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MetaAdded
	if MetaAdded {
		m.Meta = flagMetaValue
	}

	return nil, retAdded
}

func retrieveServiceServicePropAsnFlags(depth int, m *models.ServiceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAsnName := fmt.Sprintf("%v.asn", cmdPrefix)
	if cmd.Flags().Changed(flagAsnName) {
		// info: complex object asn ServiceIPASN is retrieved outside this Changed() block
	}
	flagAsnValue := m.Asn
	if swag.IsZero(flagAsnValue) {
		flagAsnValue = &models.ServiceIPASN{}
	}

	err, AsnAdded := retrieveModelServiceIPASNFlags(depth+1, flagAsnValue, flagAsnName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AsnAdded
	if AsnAdded {
		m.Asn = flagAsnValue
	}

	return nil, retAdded
}

func retrieveServiceServicePropAsnUpdatedAtFlags(depth int, m *models.ServiceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAsnUpdatedAtName := fmt.Sprintf("%v.asn_updated_at", cmdPrefix)
	if cmd.Flags().Changed(flagAsnUpdatedAtName) {

		var flagAsnUpdatedAtName string
		if cmdPrefix == "" {
			flagAsnUpdatedAtName = "asn_updated_at"
		} else {
			flagAsnUpdatedAtName = fmt.Sprintf("%v.asn_updated_at", cmdPrefix)
		}

		flagAsnUpdatedAtValue, err := cmd.Flags().GetString(flagAsnUpdatedAtName)
		if err != nil {
			return err, false
		}
		m.AsnUpdatedAt = flagAsnUpdatedAtValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceServicePropBannersFlags(depth int, m *models.ServiceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagBannersName := fmt.Sprintf("%v.banners", cmdPrefix)
	if cmd.Flags().Changed(flagBannersName) {
		// warning: banners array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveServiceServicePropCveFlags(depth int, m *models.ServiceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCveName := fmt.Sprintf("%v.cve", cmdPrefix)
	if cmd.Flags().Changed(flagCveName) {
		// warning: cve array type []*ServiceFullCveData is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveServiceServicePropDomainsFlags(depth int, m *models.ServiceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDomainsName := fmt.Sprintf("%v.domains", cmdPrefix)
	if cmd.Flags().Changed(flagDomainsName) {
		// warning: domains array type []*ServiceIPDomain is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveServiceServicePropExtraInfoFlags(depth int, m *models.ServiceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagExtraInfoName := fmt.Sprintf("%v.extra_info", cmdPrefix)
	if cmd.Flags().Changed(flagExtraInfoName) {

		var flagExtraInfoName string
		if cmdPrefix == "" {
			flagExtraInfoName = "extra_info"
		} else {
			flagExtraInfoName = fmt.Sprintf("%v.extra_info", cmdPrefix)
		}

		flagExtraInfoValue, err := cmd.Flags().GetString(flagExtraInfoName)
		if err != nil {
			return err, false
		}
		m.ExtraInfo = flagExtraInfoValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceServicePropHostnamesFlags(depth int, m *models.ServiceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagHostnamesName := fmt.Sprintf("%v.hostnames", cmdPrefix)
	if cmd.Flags().Changed(flagHostnamesName) {
		// warning: hostnames array type []*ServiceIPHostname is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveServiceServicePropIPFlags(depth int, m *models.ServiceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIPName := fmt.Sprintf("%v.ip", cmdPrefix)
	if cmd.Flags().Changed(flagIPName) {

		var flagIPName string
		if cmdPrefix == "" {
			flagIPName = "ip"
		} else {
			flagIPName = fmt.Sprintf("%v.ip", cmdPrefix)
		}

		flagIPValue, err := cmd.Flags().GetString(flagIPName)
		if err != nil {
			return err, false
		}
		m.IP = flagIPValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceServicePropIsIPV4Flags(depth int, m *models.ServiceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIsIPV4Name := fmt.Sprintf("%v.is_ipv4", cmdPrefix)
	if cmd.Flags().Changed(flagIsIPV4Name) {

		var flagIsIPV4Name string
		if cmdPrefix == "" {
			flagIsIPV4Name = "is_ipv4"
		} else {
			flagIsIPV4Name = fmt.Sprintf("%v.is_ipv4", cmdPrefix)
		}

		flagIsIPV4Value, err := cmd.Flags().GetBool(flagIsIPV4Name)
		if err != nil {
			return err, false
		}
		m.IsIPV4 = flagIsIPV4Value

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceServicePropIsIPV6Flags(depth int, m *models.ServiceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIsIPV6Name := fmt.Sprintf("%v.is_ipv6", cmdPrefix)
	if cmd.Flags().Changed(flagIsIPV6Name) {

		var flagIsIPV6Name string
		if cmdPrefix == "" {
			flagIsIPV6Name = "is_ipv6"
		} else {
			flagIsIPV6Name = fmt.Sprintf("%v.is_ipv6", cmdPrefix)
		}

		flagIsIPV6Value, err := cmd.Flags().GetBool(flagIsIPV6Name)
		if err != nil {
			return err, false
		}
		m.IsIPV6 = flagIsIPV6Value

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceServicePropIsVulnFlags(depth int, m *models.ServiceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIsVulnName := fmt.Sprintf("%v.is_vuln", cmdPrefix)
	if cmd.Flags().Changed(flagIsVulnName) {

		var flagIsVulnName string
		if cmdPrefix == "" {
			flagIsVulnName = "is_vuln"
		} else {
			flagIsVulnName = fmt.Sprintf("%v.is_vuln", cmdPrefix)
		}

		flagIsVulnValue, err := cmd.Flags().GetBool(flagIsVulnName)
		if err != nil {
			return err, false
		}
		m.IsVuln = flagIsVulnValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceServicePropLastUpdatedAtFlags(depth int, m *models.ServiceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLastUpdatedAtName := fmt.Sprintf("%v.last_updated_at", cmdPrefix)
	if cmd.Flags().Changed(flagLastUpdatedAtName) {

		var flagLastUpdatedAtName string
		if cmdPrefix == "" {
			flagLastUpdatedAtName = "last_updated_at"
		} else {
			flagLastUpdatedAtName = fmt.Sprintf("%v.last_updated_at", cmdPrefix)
		}

		flagLastUpdatedAtValue, err := cmd.Flags().GetString(flagLastUpdatedAtName)
		if err != nil {
			return err, false
		}
		m.LastUpdatedAt = flagLastUpdatedAtValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceServicePropLocationFlags(depth int, m *models.ServiceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLocationName := fmt.Sprintf("%v.location", cmdPrefix)
	if cmd.Flags().Changed(flagLocationName) {
		// info: complex object location ServiceIPLocation is retrieved outside this Changed() block
	}
	flagLocationValue := m.Location
	if swag.IsZero(flagLocationValue) {
		flagLocationValue = &models.ServiceIPLocation{}
	}

	err, LocationAdded := retrieveModelServiceIPLocationFlags(depth+1, flagLocationValue, flagLocationName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LocationAdded
	if LocationAdded {
		m.Location = flagLocationValue
	}

	return nil, retAdded
}

func retrieveServiceServicePropLocationUpdatedAtFlags(depth int, m *models.ServiceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLocationUpdatedAtName := fmt.Sprintf("%v.location_updated_at", cmdPrefix)
	if cmd.Flags().Changed(flagLocationUpdatedAtName) {

		var flagLocationUpdatedAtName string
		if cmdPrefix == "" {
			flagLocationUpdatedAtName = "location_updated_at"
		} else {
			flagLocationUpdatedAtName = fmt.Sprintf("%v.location_updated_at", cmdPrefix)
		}

		flagLocationUpdatedAtValue, err := cmd.Flags().GetString(flagLocationUpdatedAtName)
		if err != nil {
			return err, false
		}
		m.LocationUpdatedAt = flagLocationUpdatedAtValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceServicePropModulesFlags(depth int, m *models.ServiceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagModulesName := fmt.Sprintf("%v.modules", cmdPrefix)
	if cmd.Flags().Changed(flagModulesName) {
		// warning: modules map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveServiceServicePropNameFlags(depth int, m *models.ServiceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceServicePropPortFlags(depth int, m *models.ServiceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPortName := fmt.Sprintf("%v.port", cmdPrefix)
	if cmd.Flags().Changed(flagPortName) {

		var flagPortName string
		if cmdPrefix == "" {
			flagPortName = "port"
		} else {
			flagPortName = fmt.Sprintf("%v.port", cmdPrefix)
		}

		flagPortValue, err := cmd.Flags().GetInt64(flagPortName)
		if err != nil {
			return err, false
		}
		m.Port = flagPortValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceServicePropProductFlags(depth int, m *models.ServiceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagProductName := fmt.Sprintf("%v.product", cmdPrefix)
	if cmd.Flags().Changed(flagProductName) {

		var flagProductName string
		if cmdPrefix == "" {
			flagProductName = "product"
		} else {
			flagProductName = fmt.Sprintf("%v.product", cmdPrefix)
		}

		flagProductValue, err := cmd.Flags().GetString(flagProductName)
		if err != nil {
			return err, false
		}
		m.Product = flagProductValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceServicePropProtocolFlags(depth int, m *models.ServiceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagProtocolName := fmt.Sprintf("%v.protocol", cmdPrefix)
	if cmd.Flags().Changed(flagProtocolName) {

		var flagProtocolName string
		if cmdPrefix == "" {
			flagProtocolName = "protocol"
		} else {
			flagProtocolName = fmt.Sprintf("%v.protocol", cmdPrefix)
		}

		flagProtocolValue, err := cmd.Flags().GetString(flagProtocolName)
		if err != nil {
			return err, false
		}
		m.Protocol = flagProtocolValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceServicePropScanIDFlags(depth int, m *models.ServiceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagScanIDName := fmt.Sprintf("%v.scan_id", cmdPrefix)
	if cmd.Flags().Changed(flagScanIDName) {

		var flagScanIDName string
		if cmdPrefix == "" {
			flagScanIDName = "scan_id"
		} else {
			flagScanIDName = fmt.Sprintf("%v.scan_id", cmdPrefix)
		}

		flagScanIDValue, err := cmd.Flags().GetInt64(flagScanIDName)
		if err != nil {
			return err, false
		}
		m.ScanID = flagScanIDValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceServicePropSoftwaresFlags(depth int, m *models.ServiceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSoftwaresName := fmt.Sprintf("%v.softwares", cmdPrefix)
	if cmd.Flags().Changed(flagSoftwaresName) {
		// warning: softwares array type []*ServiceIPServiceSoftware is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveServiceServicePropTagsFlags(depth int, m *models.ServiceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTagsName := fmt.Sprintf("%v.tags", cmdPrefix)
	if cmd.Flags().Changed(flagTagsName) {
		// warning: tags array type []*ServiceIPTag is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveServiceServicePropTunnelFlags(depth int, m *models.ServiceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTunnelName := fmt.Sprintf("%v.tunnel", cmdPrefix)
	if cmd.Flags().Changed(flagTunnelName) {

		var flagTunnelName string
		if cmdPrefix == "" {
			flagTunnelName = "tunnel"
		} else {
			flagTunnelName = fmt.Sprintf("%v.tunnel", cmdPrefix)
		}

		flagTunnelValue, err := cmd.Flags().GetString(flagTunnelName)
		if err != nil {
			return err, false
		}
		m.Tunnel = flagTunnelValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceServicePropVersionFlags(depth int, m *models.ServiceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVersionName := fmt.Sprintf("%v.version", cmdPrefix)
	if cmd.Flags().Changed(flagVersionName) {

		var flagVersionName string
		if cmdPrefix == "" {
			flagVersionName = "version"
		} else {
			flagVersionName = fmt.Sprintf("%v.version", cmdPrefix)
		}

		flagVersionValue, err := cmd.Flags().GetString(flagVersionName)
		if err != nil {
			return err, false
		}
		m.Version = flagVersionValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceServicePropWhoisFlags(depth int, m *models.ServiceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagWhoisName := fmt.Sprintf("%v.whois", cmdPrefix)
	if cmd.Flags().Changed(flagWhoisName) {
		// info: complex object whois ServiceIPWhois is retrieved outside this Changed() block
	}
	flagWhoisValue := m.Whois
	if swag.IsZero(flagWhoisValue) {
		flagWhoisValue = &models.ServiceIPWhois{}
	}

	err, WhoisAdded := retrieveModelServiceIPWhoisFlags(depth+1, flagWhoisValue, flagWhoisName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WhoisAdded
	if WhoisAdded {
		m.Whois = flagWhoisValue
	}

	return nil, retAdded
}

func retrieveServiceServicePropWhoisUpdatedAtFlags(depth int, m *models.ServiceService, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagWhoisUpdatedAtName := fmt.Sprintf("%v.whois_updated_at", cmdPrefix)
	if cmd.Flags().Changed(flagWhoisUpdatedAtName) {

		var flagWhoisUpdatedAtName string
		if cmdPrefix == "" {
			flagWhoisUpdatedAtName = "whois_updated_at"
		} else {
			flagWhoisUpdatedAtName = fmt.Sprintf("%v.whois_updated_at", cmdPrefix)
		}

		flagWhoisUpdatedAtValue, err := cmd.Flags().GetString(flagWhoisUpdatedAtName)
		if err != nil {
			return err, false
		}
		m.WhoisUpdatedAt = flagWhoisUpdatedAtValue

		retAdded = true
	}

	return nil, retAdded
}
