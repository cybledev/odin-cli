// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for ExposedAggregate

// register flags to command
func registerModelExposedAggregateFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerExposedAggregatePropBuckets(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExposedAggregatePropDocCountErrorUpperBound(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExposedAggregatePropSumOtherDocCount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerExposedAggregatePropBuckets(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: buckets []interface{} array type is not supported by go-swagger cli yet

	return nil
}

func registerExposedAggregatePropDocCountErrorUpperBound(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagDocCountErrorUpperBoundDescription := ``

	var flagDocCountErrorUpperBoundName string
	if cmdPrefix == "" {
		flagDocCountErrorUpperBoundName = "doc_count_error_upper_bound"
	} else {
		flagDocCountErrorUpperBoundName = fmt.Sprintf("%v.doc_count_error_upper_bound", cmdPrefix)
	}

	var flagDocCountErrorUpperBoundDefault int64

	_ = cmd.PersistentFlags().Int64(flagDocCountErrorUpperBoundName, flagDocCountErrorUpperBoundDefault, flagDocCountErrorUpperBoundDescription)

	return nil
}

func registerExposedAggregatePropSumOtherDocCount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSumOtherDocCountDescription := ``

	var flagSumOtherDocCountName string
	if cmdPrefix == "" {
		flagSumOtherDocCountName = "sum_other_doc_count"
	} else {
		flagSumOtherDocCountName = fmt.Sprintf("%v.sum_other_doc_count", cmdPrefix)
	}

	var flagSumOtherDocCountDefault int64

	_ = cmd.PersistentFlags().Int64(flagSumOtherDocCountName, flagSumOtherDocCountDefault, flagSumOtherDocCountDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelExposedAggregateFlags(depth int, m *models.ExposedAggregate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, BucketsAdded := retrieveExposedAggregatePropBucketsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BucketsAdded

	err, DocCountErrorUpperBoundAdded := retrieveExposedAggregatePropDocCountErrorUpperBoundFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DocCountErrorUpperBoundAdded

	err, SumOtherDocCountAdded := retrieveExposedAggregatePropSumOtherDocCountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SumOtherDocCountAdded

	return nil, retAdded
}

func retrieveExposedAggregatePropBucketsFlags(depth int, m *models.ExposedAggregate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagBucketsName := fmt.Sprintf("%v.buckets", cmdPrefix)
	if cmd.Flags().Changed(flagBucketsName) {
		// warning: buckets array type []interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveExposedAggregatePropDocCountErrorUpperBoundFlags(depth int, m *models.ExposedAggregate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDocCountErrorUpperBoundName := fmt.Sprintf("%v.doc_count_error_upper_bound", cmdPrefix)
	if cmd.Flags().Changed(flagDocCountErrorUpperBoundName) {

		var flagDocCountErrorUpperBoundName string
		if cmdPrefix == "" {
			flagDocCountErrorUpperBoundName = "doc_count_error_upper_bound"
		} else {
			flagDocCountErrorUpperBoundName = fmt.Sprintf("%v.doc_count_error_upper_bound", cmdPrefix)
		}

		flagDocCountErrorUpperBoundValue, err := cmd.Flags().GetInt64(flagDocCountErrorUpperBoundName)
		if err != nil {
			return err, false
		}
		m.DocCountErrorUpperBound = flagDocCountErrorUpperBoundValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveExposedAggregatePropSumOtherDocCountFlags(depth int, m *models.ExposedAggregate, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSumOtherDocCountName := fmt.Sprintf("%v.sum_other_doc_count", cmdPrefix)
	if cmd.Flags().Changed(flagSumOtherDocCountName) {

		var flagSumOtherDocCountName string
		if cmdPrefix == "" {
			flagSumOtherDocCountName = "sum_other_doc_count"
		} else {
			flagSumOtherDocCountName = fmt.Sprintf("%v.sum_other_doc_count", cmdPrefix)
		}

		flagSumOtherDocCountValue, err := cmd.Flags().GetInt64(flagSumOtherDocCountName)
		if err != nil {
			return err, false
		}
		m.SumOtherDocCount = flagSumOtherDocCountValue

		retAdded = true
	}

	return nil, retAdded
}
