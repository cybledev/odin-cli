// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for SchemaPaginationMeta

// register flags to command
func registerModelSchemaPaginationMetaFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSchemaPaginationMetaPropLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaPaginationMetaPropPageState(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSchemaPaginationMetaPropLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLimitDescription := ``

	var flagLimitName string
	if cmdPrefix == "" {
		flagLimitName = "limit"
	} else {
		flagLimitName = fmt.Sprintf("%v.limit", cmdPrefix)
	}

	var flagLimitDefault int64

	_ = cmd.PersistentFlags().Int64(flagLimitName, flagLimitDefault, flagLimitDescription)

	return nil
}

func registerSchemaPaginationMetaPropPageState(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagPageStateDescription := ``

	var flagPageStateName string
	if cmdPrefix == "" {
		flagPageStateName = "pageState"
	} else {
		flagPageStateName = fmt.Sprintf("%v.pageState", cmdPrefix)
	}

	var flagPageStateDefault string

	_ = cmd.PersistentFlags().String(flagPageStateName, flagPageStateDefault, flagPageStateDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSchemaPaginationMetaFlags(depth int, m *models.SchemaPaginationMeta, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, LimitAdded := retrieveSchemaPaginationMetaPropLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LimitAdded

	err, PageStateAdded := retrieveSchemaPaginationMetaPropPageStateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PageStateAdded

	return nil, retAdded
}

func retrieveSchemaPaginationMetaPropLimitFlags(depth int, m *models.SchemaPaginationMeta, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLimitName := fmt.Sprintf("%v.limit", cmdPrefix)
	if cmd.Flags().Changed(flagLimitName) {

		var flagLimitName string
		if cmdPrefix == "" {
			flagLimitName = "limit"
		} else {
			flagLimitName = fmt.Sprintf("%v.limit", cmdPrefix)
		}

		flagLimitValue, err := cmd.Flags().GetInt64(flagLimitName)
		if err != nil {
			return err, false
		}
		m.Limit = flagLimitValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSchemaPaginationMetaPropPageStateFlags(depth int, m *models.SchemaPaginationMeta, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPageStateName := fmt.Sprintf("%v.pageState", cmdPrefix)
	if cmd.Flags().Changed(flagPageStateName) {

		var flagPageStateName string
		if cmdPrefix == "" {
			flagPageStateName = "pageState"
		} else {
			flagPageStateName = fmt.Sprintf("%v.pageState", cmdPrefix)
		}

		flagPageStateValue, err := cmd.Flags().GetString(flagPageStateName)
		if err != nil {
			return err, false
		}
		m.PageState = flagPageStateValue

		retAdded = true
	}

	return nil, retAdded
}
