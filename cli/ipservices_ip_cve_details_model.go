// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for IpservicesIPCveDetails

// register flags to command
func registerModelIpservicesIPCveDetailsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIpservicesIPCveDetailsPropExploit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPCveDetailsPropID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPCveDetailsPropReferences(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPCveDetailsPropScore(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPCveDetailsPropServices(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPCveDetailsPropSeverity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPCveDetailsPropSummary(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPCveDetailsPropVectorString(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPCveDetailsPropWeakness(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIpservicesIPCveDetailsPropExploit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: exploit []*IpservicesIPCveDetailsExploitItems0 array type is not supported by go-swagger cli yet

	return nil
}

func registerIpservicesIPCveDetailsPropID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIDDescription := ``

	var flagIDName string
	if cmdPrefix == "" {
		flagIDName = "id"
	} else {
		flagIDName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var flagIDDefault string

	_ = cmd.PersistentFlags().String(flagIDName, flagIDDefault, flagIDDescription)

	return nil
}

func registerIpservicesIPCveDetailsPropReferences(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: references []string array type is not supported by go-swagger cli yet

	return nil
}

func registerIpservicesIPCveDetailsPropScore(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagScoreDescription := ``

	var flagScoreName string
	if cmdPrefix == "" {
		flagScoreName = "score"
	} else {
		flagScoreName = fmt.Sprintf("%v.score", cmdPrefix)
	}

	var flagScoreDefault float64

	_ = cmd.PersistentFlags().Float64(flagScoreName, flagScoreDefault, flagScoreDescription)

	return nil
}

func registerIpservicesIPCveDetailsPropServices(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: services []string array type is not supported by go-swagger cli yet

	return nil
}

func registerIpservicesIPCveDetailsPropSeverity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSeverityDescription := ``

	var flagSeverityName string
	if cmdPrefix == "" {
		flagSeverityName = "severity"
	} else {
		flagSeverityName = fmt.Sprintf("%v.severity", cmdPrefix)
	}

	var flagSeverityDefault string

	_ = cmd.PersistentFlags().String(flagSeverityName, flagSeverityDefault, flagSeverityDescription)

	return nil
}

func registerIpservicesIPCveDetailsPropSummary(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSummaryDescription := ``

	var flagSummaryName string
	if cmdPrefix == "" {
		flagSummaryName = "summary"
	} else {
		flagSummaryName = fmt.Sprintf("%v.summary", cmdPrefix)
	}

	var flagSummaryDefault string

	_ = cmd.PersistentFlags().String(flagSummaryName, flagSummaryDefault, flagSummaryDescription)

	return nil
}

func registerIpservicesIPCveDetailsPropVectorString(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagVectorStringDescription := ``

	var flagVectorStringName string
	if cmdPrefix == "" {
		flagVectorStringName = "vector_string"
	} else {
		flagVectorStringName = fmt.Sprintf("%v.vector_string", cmdPrefix)
	}

	var flagVectorStringDefault string

	_ = cmd.PersistentFlags().String(flagVectorStringName, flagVectorStringDefault, flagVectorStringDescription)

	return nil
}

func registerIpservicesIPCveDetailsPropWeakness(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagWeaknessDescription := ``

	var flagWeaknessName string
	if cmdPrefix == "" {
		flagWeaknessName = "weakness"
	} else {
		flagWeaknessName = fmt.Sprintf("%v.weakness", cmdPrefix)
	}

	var flagWeaknessDefault string

	_ = cmd.PersistentFlags().String(flagWeaknessName, flagWeaknessDefault, flagWeaknessDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIpservicesIPCveDetailsFlags(depth int, m *models.IpservicesIPCveDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ExploitAdded := retrieveIpservicesIPCveDetailsPropExploitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ExploitAdded

	err, IDAdded := retrieveIpservicesIPCveDetailsPropIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IDAdded

	err, ReferencesAdded := retrieveIpservicesIPCveDetailsPropReferencesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ReferencesAdded

	err, ScoreAdded := retrieveIpservicesIPCveDetailsPropScoreFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ScoreAdded

	err, ServicesAdded := retrieveIpservicesIPCveDetailsPropServicesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ServicesAdded

	err, SeverityAdded := retrieveIpservicesIPCveDetailsPropSeverityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SeverityAdded

	err, SummaryAdded := retrieveIpservicesIPCveDetailsPropSummaryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SummaryAdded

	err, VectorStringAdded := retrieveIpservicesIPCveDetailsPropVectorStringFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VectorStringAdded

	err, WeaknessAdded := retrieveIpservicesIPCveDetailsPropWeaknessFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WeaknessAdded

	return nil, retAdded
}

func retrieveIpservicesIPCveDetailsPropExploitFlags(depth int, m *models.IpservicesIPCveDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagExploitName := fmt.Sprintf("%v.exploit", cmdPrefix)
	if cmd.Flags().Changed(flagExploitName) {
		// warning: exploit array type []*IpservicesIPCveDetailsExploitItems0 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIpservicesIPCveDetailsPropIDFlags(depth int, m *models.IpservicesIPCveDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIDName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(flagIDName) {

		var flagIDName string
		if cmdPrefix == "" {
			flagIDName = "id"
		} else {
			flagIDName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		flagIDValue, err := cmd.Flags().GetString(flagIDName)
		if err != nil {
			return err, false
		}
		m.ID = flagIDValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIpservicesIPCveDetailsPropReferencesFlags(depth int, m *models.IpservicesIPCveDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagReferencesName := fmt.Sprintf("%v.references", cmdPrefix)
	if cmd.Flags().Changed(flagReferencesName) {
		// warning: references array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIpservicesIPCveDetailsPropScoreFlags(depth int, m *models.IpservicesIPCveDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagScoreName := fmt.Sprintf("%v.score", cmdPrefix)
	if cmd.Flags().Changed(flagScoreName) {

		var flagScoreName string
		if cmdPrefix == "" {
			flagScoreName = "score"
		} else {
			flagScoreName = fmt.Sprintf("%v.score", cmdPrefix)
		}

		flagScoreValue, err := cmd.Flags().GetFloat64(flagScoreName)
		if err != nil {
			return err, false
		}
		m.Score = flagScoreValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIpservicesIPCveDetailsPropServicesFlags(depth int, m *models.IpservicesIPCveDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagServicesName := fmt.Sprintf("%v.services", cmdPrefix)
	if cmd.Flags().Changed(flagServicesName) {
		// warning: services array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIpservicesIPCveDetailsPropSeverityFlags(depth int, m *models.IpservicesIPCveDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSeverityName := fmt.Sprintf("%v.severity", cmdPrefix)
	if cmd.Flags().Changed(flagSeverityName) {

		var flagSeverityName string
		if cmdPrefix == "" {
			flagSeverityName = "severity"
		} else {
			flagSeverityName = fmt.Sprintf("%v.severity", cmdPrefix)
		}

		flagSeverityValue, err := cmd.Flags().GetString(flagSeverityName)
		if err != nil {
			return err, false
		}
		m.Severity = flagSeverityValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIpservicesIPCveDetailsPropSummaryFlags(depth int, m *models.IpservicesIPCveDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSummaryName := fmt.Sprintf("%v.summary", cmdPrefix)
	if cmd.Flags().Changed(flagSummaryName) {

		var flagSummaryName string
		if cmdPrefix == "" {
			flagSummaryName = "summary"
		} else {
			flagSummaryName = fmt.Sprintf("%v.summary", cmdPrefix)
		}

		flagSummaryValue, err := cmd.Flags().GetString(flagSummaryName)
		if err != nil {
			return err, false
		}
		m.Summary = flagSummaryValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIpservicesIPCveDetailsPropVectorStringFlags(depth int, m *models.IpservicesIPCveDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVectorStringName := fmt.Sprintf("%v.vector_string", cmdPrefix)
	if cmd.Flags().Changed(flagVectorStringName) {

		var flagVectorStringName string
		if cmdPrefix == "" {
			flagVectorStringName = "vector_string"
		} else {
			flagVectorStringName = fmt.Sprintf("%v.vector_string", cmdPrefix)
		}

		flagVectorStringValue, err := cmd.Flags().GetString(flagVectorStringName)
		if err != nil {
			return err, false
		}
		m.VectorString = flagVectorStringValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIpservicesIPCveDetailsPropWeaknessFlags(depth int, m *models.IpservicesIPCveDetails, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagWeaknessName := fmt.Sprintf("%v.weakness", cmdPrefix)
	if cmd.Flags().Changed(flagWeaknessName) {

		var flagWeaknessName string
		if cmdPrefix == "" {
			flagWeaknessName = "weakness"
		} else {
			flagWeaknessName = fmt.Sprintf("%v.weakness", cmdPrefix)
		}

		flagWeaknessValue, err := cmd.Flags().GetString(flagWeaknessName)
		if err != nil {
			return err, false
		}
		m.Weakness = flagWeaknessValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for IpservicesIPCveDetailsExploitItems0

// register flags to command
func registerModelIpservicesIPCveDetailsExploitItems0Flags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIpservicesIPCveDetailsExploitItems0PropDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPCveDetailsExploitItems0PropFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPCveDetailsExploitItems0PropID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPCveDetailsExploitItems0PropPlatform(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPCveDetailsExploitItems0PropType(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPCveDetailsExploitItems0PropURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIpservicesIPCveDetailsExploitItems0PropDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagDescriptionDescription := ``

	var flagDescriptionName string
	if cmdPrefix == "" {
		flagDescriptionName = "description"
	} else {
		flagDescriptionName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var flagDescriptionDefault string

	_ = cmd.PersistentFlags().String(flagDescriptionName, flagDescriptionDefault, flagDescriptionDescription)

	return nil
}

func registerIpservicesIPCveDetailsExploitItems0PropFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagFileDescription := ``

	var flagFileName string
	if cmdPrefix == "" {
		flagFileName = "file"
	} else {
		flagFileName = fmt.Sprintf("%v.file", cmdPrefix)
	}

	var flagFileDefault string

	_ = cmd.PersistentFlags().String(flagFileName, flagFileDefault, flagFileDescription)

	return nil
}

func registerIpservicesIPCveDetailsExploitItems0PropID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIDDescription := ``

	var flagIDName string
	if cmdPrefix == "" {
		flagIDName = "id"
	} else {
		flagIDName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var flagIDDefault string

	_ = cmd.PersistentFlags().String(flagIDName, flagIDDefault, flagIDDescription)

	return nil
}

func registerIpservicesIPCveDetailsExploitItems0PropPlatform(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagPlatformDescription := ``

	var flagPlatformName string
	if cmdPrefix == "" {
		flagPlatformName = "platform"
	} else {
		flagPlatformName = fmt.Sprintf("%v.platform", cmdPrefix)
	}

	var flagPlatformDefault string

	_ = cmd.PersistentFlags().String(flagPlatformName, flagPlatformDefault, flagPlatformDescription)

	return nil
}

func registerIpservicesIPCveDetailsExploitItems0PropType(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTypeDescription := ``

	var flagTypeName string
	if cmdPrefix == "" {
		flagTypeName = "type"
	} else {
		flagTypeName = fmt.Sprintf("%v.type", cmdPrefix)
	}

	var flagTypeDefault string

	_ = cmd.PersistentFlags().String(flagTypeName, flagTypeDefault, flagTypeDescription)

	return nil
}

func registerIpservicesIPCveDetailsExploitItems0PropURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagURLDescription := ``

	var flagURLName string
	if cmdPrefix == "" {
		flagURLName = "url"
	} else {
		flagURLName = fmt.Sprintf("%v.url", cmdPrefix)
	}

	var flagURLDefault string

	_ = cmd.PersistentFlags().String(flagURLName, flagURLDefault, flagURLDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIpservicesIPCveDetailsExploitItems0Flags(depth int, m *models.IpservicesIPCveDetailsExploitItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DescriptionAdded := retrieveIpservicesIPCveDetailsExploitItems0PropDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DescriptionAdded

	err, FileAdded := retrieveIpservicesIPCveDetailsExploitItems0PropFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || FileAdded

	err, IDAdded := retrieveIpservicesIPCveDetailsExploitItems0PropIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IDAdded

	err, PlatformAdded := retrieveIpservicesIPCveDetailsExploitItems0PropPlatformFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PlatformAdded

	err, TypeAdded := retrieveIpservicesIPCveDetailsExploitItems0PropTypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TypeAdded

	err, URLAdded := retrieveIpservicesIPCveDetailsExploitItems0PropURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || URLAdded

	return nil, retAdded
}

func retrieveIpservicesIPCveDetailsExploitItems0PropDescriptionFlags(depth int, m *models.IpservicesIPCveDetailsExploitItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDescriptionName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(flagDescriptionName) {

		var flagDescriptionName string
		if cmdPrefix == "" {
			flagDescriptionName = "description"
		} else {
			flagDescriptionName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		flagDescriptionValue, err := cmd.Flags().GetString(flagDescriptionName)
		if err != nil {
			return err, false
		}
		m.Description = flagDescriptionValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIpservicesIPCveDetailsExploitItems0PropFileFlags(depth int, m *models.IpservicesIPCveDetailsExploitItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagFileName := fmt.Sprintf("%v.file", cmdPrefix)
	if cmd.Flags().Changed(flagFileName) {

		var flagFileName string
		if cmdPrefix == "" {
			flagFileName = "file"
		} else {
			flagFileName = fmt.Sprintf("%v.file", cmdPrefix)
		}

		flagFileValue, err := cmd.Flags().GetString(flagFileName)
		if err != nil {
			return err, false
		}
		m.File = flagFileValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIpservicesIPCveDetailsExploitItems0PropIDFlags(depth int, m *models.IpservicesIPCveDetailsExploitItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIDName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(flagIDName) {

		var flagIDName string
		if cmdPrefix == "" {
			flagIDName = "id"
		} else {
			flagIDName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		flagIDValue, err := cmd.Flags().GetString(flagIDName)
		if err != nil {
			return err, false
		}
		m.ID = flagIDValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIpservicesIPCveDetailsExploitItems0PropPlatformFlags(depth int, m *models.IpservicesIPCveDetailsExploitItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPlatformName := fmt.Sprintf("%v.platform", cmdPrefix)
	if cmd.Flags().Changed(flagPlatformName) {

		var flagPlatformName string
		if cmdPrefix == "" {
			flagPlatformName = "platform"
		} else {
			flagPlatformName = fmt.Sprintf("%v.platform", cmdPrefix)
		}

		flagPlatformValue, err := cmd.Flags().GetString(flagPlatformName)
		if err != nil {
			return err, false
		}
		m.Platform = flagPlatformValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIpservicesIPCveDetailsExploitItems0PropTypeFlags(depth int, m *models.IpservicesIPCveDetailsExploitItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTypeName := fmt.Sprintf("%v.type", cmdPrefix)
	if cmd.Flags().Changed(flagTypeName) {

		var flagTypeName string
		if cmdPrefix == "" {
			flagTypeName = "type"
		} else {
			flagTypeName = fmt.Sprintf("%v.type", cmdPrefix)
		}

		flagTypeValue, err := cmd.Flags().GetString(flagTypeName)
		if err != nil {
			return err, false
		}
		m.Type = flagTypeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIpservicesIPCveDetailsExploitItems0PropURLFlags(depth int, m *models.IpservicesIPCveDetailsExploitItems0, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagURLName := fmt.Sprintf("%v.url", cmdPrefix)
	if cmd.Flags().Changed(flagURLName) {

		var flagURLName string
		if cmdPrefix == "" {
			flagURLName = "url"
		} else {
			flagURLName = fmt.Sprintf("%v.url", cmdPrefix)
		}

		flagURLValue, err := cmd.Flags().GetString(flagURLName)
		if err != nil {
			return err, false
		}
		m.URL = flagURLValue

		retAdded = true
	}

	return nil, retAdded
}
