// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for ServiceFullCveData

// register flags to command
func registerModelServiceFullCveDataFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerServiceFullCveDataPropID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceFullCveDataPropScore(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceFullCveDataPropSeverity(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerServiceFullCveDataPropID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIDDescription := ``

	var flagIDName string
	if cmdPrefix == "" {
		flagIDName = "id"
	} else {
		flagIDName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var flagIDDefault string

	_ = cmd.PersistentFlags().String(flagIDName, flagIDDefault, flagIDDescription)

	return nil
}

func registerServiceFullCveDataPropScore(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagScoreDescription := ``

	var flagScoreName string
	if cmdPrefix == "" {
		flagScoreName = "score"
	} else {
		flagScoreName = fmt.Sprintf("%v.score", cmdPrefix)
	}

	var flagScoreDefault float64

	_ = cmd.PersistentFlags().Float64(flagScoreName, flagScoreDefault, flagScoreDescription)

	return nil
}

func registerServiceFullCveDataPropSeverity(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSeverityDescription := ``

	var flagSeverityName string
	if cmdPrefix == "" {
		flagSeverityName = "severity"
	} else {
		flagSeverityName = fmt.Sprintf("%v.severity", cmdPrefix)
	}

	var flagSeverityDefault string

	_ = cmd.PersistentFlags().String(flagSeverityName, flagSeverityDefault, flagSeverityDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelServiceFullCveDataFlags(depth int, m *models.ServiceFullCveData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, IDAdded := retrieveServiceFullCveDataPropIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IDAdded

	err, ScoreAdded := retrieveServiceFullCveDataPropScoreFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ScoreAdded

	err, SeverityAdded := retrieveServiceFullCveDataPropSeverityFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SeverityAdded

	return nil, retAdded
}

func retrieveServiceFullCveDataPropIDFlags(depth int, m *models.ServiceFullCveData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIDName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(flagIDName) {

		var flagIDName string
		if cmdPrefix == "" {
			flagIDName = "id"
		} else {
			flagIDName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		flagIDValue, err := cmd.Flags().GetString(flagIDName)
		if err != nil {
			return err, false
		}
		m.ID = flagIDValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceFullCveDataPropScoreFlags(depth int, m *models.ServiceFullCveData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagScoreName := fmt.Sprintf("%v.score", cmdPrefix)
	if cmd.Flags().Changed(flagScoreName) {

		var flagScoreName string
		if cmdPrefix == "" {
			flagScoreName = "score"
		} else {
			flagScoreName = fmt.Sprintf("%v.score", cmdPrefix)
		}

		flagScoreValue, err := cmd.Flags().GetFloat64(flagScoreName)
		if err != nil {
			return err, false
		}
		m.Score = flagScoreValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceFullCveDataPropSeverityFlags(depth int, m *models.ServiceFullCveData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSeverityName := fmt.Sprintf("%v.severity", cmdPrefix)
	if cmd.Flags().Changed(flagSeverityName) {

		var flagSeverityName string
		if cmdPrefix == "" {
			flagSeverityName = "severity"
		} else {
			flagSeverityName = fmt.Sprintf("%v.severity", cmdPrefix)
		}

		flagSeverityValue, err := cmd.Flags().GetString(flagSeverityName)
		if err != nil {
			return err, false
		}
		m.Severity = flagSeverityValue

		retAdded = true
	}

	return nil, retAdded
}
