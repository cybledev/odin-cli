// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for TokensSearchStat

// register flags to command
func registerModelTokensSearchStatFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTokensSearchStatPropBucketFile(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTokensSearchStatPropData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTokensSearchStatPropHostCert(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTokensSearchStatPropBucketFile(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagBucketFileName string
	if cmdPrefix == "" {
		flagBucketFileName = "bucket_file"
	} else {
		flagBucketFileName = fmt.Sprintf("%v.bucket_file", cmdPrefix)
	}

	if err := registerModelTokensFinalStatsFlags(depth+1, flagBucketFileName, cmd); err != nil {
		return err
	}

	return nil
}

func registerTokensSearchStatPropData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: data interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerTokensSearchStatPropHostCert(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagHostCertName string
	if cmdPrefix == "" {
		flagHostCertName = "host_cert"
	} else {
		flagHostCertName = fmt.Sprintf("%v.host_cert", cmdPrefix)
	}

	if err := registerModelTokensFinalStatsFlags(depth+1, flagHostCertName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTokensSearchStatFlags(depth int, m *models.TokensSearchStat, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, BucketFileAdded := retrieveTokensSearchStatPropBucketFileFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BucketFileAdded

	err, DataAdded := retrieveTokensSearchStatPropDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DataAdded

	err, HostCertAdded := retrieveTokensSearchStatPropHostCertFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HostCertAdded

	return nil, retAdded
}

func retrieveTokensSearchStatPropBucketFileFlags(depth int, m *models.TokensSearchStat, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagBucketFileName := fmt.Sprintf("%v.bucket_file", cmdPrefix)
	if cmd.Flags().Changed(flagBucketFileName) {
		// info: complex object bucket_file TokensFinalStats is retrieved outside this Changed() block
	}
	flagBucketFileValue := m.BucketFile
	if swag.IsZero(flagBucketFileValue) {
		flagBucketFileValue = &models.TokensFinalStats{}
	}

	err, BucketFileAdded := retrieveModelTokensFinalStatsFlags(depth+1, flagBucketFileValue, flagBucketFileName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BucketFileAdded
	if BucketFileAdded {
		m.BucketFile = flagBucketFileValue
	}

	return nil, retAdded
}

func retrieveTokensSearchStatPropDataFlags(depth int, m *models.TokensSearchStat, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDataName := fmt.Sprintf("%v.data", cmdPrefix)
	if cmd.Flags().Changed(flagDataName) {
		// warning: data map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveTokensSearchStatPropHostCertFlags(depth int, m *models.TokensSearchStat, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagHostCertName := fmt.Sprintf("%v.host_cert", cmdPrefix)
	if cmd.Flags().Changed(flagHostCertName) {
		// info: complex object host_cert TokensFinalStats is retrieved outside this Changed() block
	}
	flagHostCertValue := m.HostCert
	if swag.IsZero(flagHostCertValue) {
		flagHostCertValue = &models.TokensFinalStats{}
	}

	err, HostCertAdded := retrieveModelTokensFinalStatsFlags(depth+1, flagHostCertValue, flagHostCertName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HostCertAdded
	if HostCertAdded {
		m.HostCert = flagHostCertValue
	}

	return nil, retAdded
}
