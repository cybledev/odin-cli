// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/cybledev/odin-cli/decorator"
	"github.com/cybledev/odin-cli/models"
	"github.com/cybledev/odin-cli/odin_cli/dns"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationDomainWhoisGetDomainWhoisDomainNameCmd returns a command to handle operation getDomainWhoisDomainName
func makeOperationDomainWhoisGetDomainWhoisDomainNameCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "whois",
		Short: `Provides extensive details about the domain whois record like name servers, domain status, registrar, etc.`,
		RunE:  decorator.RunEColorWrapper(runOperationDomainWhoisGetDomainWhoisDomainName),
		Example: `$ odin domain whois --domain-name="cloudflare.com"`,
	}

	if err := registerOperationDomainWhoisGetDomainWhoisDomainNameParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationDomainWhoisGetDomainWhoisDomainName uses cmd flags to call endpoint api
func runOperationDomainWhoisGetDomainWhoisDomainName(cmd *cobra.Command, args []string) (string, error) {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return "", err
	}
	// retrieve flag values from cmd and fill params
	params := dns.NewGetDomainWhoisDomainNameParams()
	if err, _ = retrieveOperationDomainWhoisGetDomainWhoisDomainNameDomainNameFlag(params, "", cmd); err != nil {
		return "", err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return "", nil
	}
	// make request and then print result
	msgStr, err := parseOperationDomainWhoisGetDomainWhoisDomainNameResult(appCli.DNS.GetDomainWhoisDomainName(params, nil))
	if err != nil {
		return "", err
	}

	if !debug {
		return msgStr, nil
	}

	return "", nil
}

// registerOperationDomainWhoisGetDomainWhoisDomainNameParamFlags registers all flags needed to fill params
func registerOperationDomainWhoisGetDomainWhoisDomainNameParamFlags(cmd *cobra.Command) error {
	if err := registerOperationDomainWhoisGetDomainWhoisDomainNameDomainNameParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationDomainWhoisGetDomainWhoisDomainNameDomainNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagDomainNameDescription := `Required. domain`

	var flagDomainNameName string
	if cmdPrefix == "" {
		flagDomainNameName = "domain-name"
	} else {
		flagDomainNameName = fmt.Sprintf("%v.domain-name", cmdPrefix)
	}

	var flagDomainNameDefault string

	_ = cmd.PersistentFlags().String(flagDomainNameName, flagDomainNameDefault, flagDomainNameDescription)

	return nil
}

func retrieveOperationDomainWhoisGetDomainWhoisDomainNameDomainNameFlag(m *dns.GetDomainWhoisDomainNameParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("domain-name") {

		var flagDomainNameName string
		if cmdPrefix == "" {
			flagDomainNameName = "domain-name"
		} else {
			flagDomainNameName = fmt.Sprintf("%v.domain-name", cmdPrefix)
		}

		flagDomainNameValue, err := cmd.Flags().GetString(flagDomainNameName)
		if err != nil {
			return err, false
		}
		m.DomainName = flagDomainNameValue

	}

	return nil, retAdded
}

// parseOperationDomainWhoisGetDomainWhoisDomainNameResult parses request result and return the string content
func parseOperationDomainWhoisGetDomainWhoisDomainNameResult(resp0 *dns.GetDomainWhoisDomainNameOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*dns.GetDomainWhoisDomainNameOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*dns.GetDomainWhoisDomainNameBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*dns.GetDomainWhoisDomainNamePaymentRequired)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*dns.GetDomainWhoisDomainNameRequestTimeout)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*dns.GetDomainWhoisDomainNameInternalServerError)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}

// register flags to command
func registerModelGetDomainWhoisDomainNameOKBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	// register embedded models.SchemaAPIResponse flags

	if err := registerModelSchemaAPIResponseFlags(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	// register anonymous fields for getDomainWhoisDomainNameOKBodyAO1

	if err := registerGetDomainWhoisDomainNameOKBodyPropAnonGetDomainWhoisDomainNameOKBodyAO1Data(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

// inline definition name getDomainWhoisDomainNameOKBodyAO1, type

func registerGetDomainWhoisDomainNameOKBodyPropAnonGetDomainWhoisDomainNameOKBodyAO1Data(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagDataName string
	if cmdPrefix == "" {
		flagDataName = "data"
	} else {
		flagDataName = fmt.Sprintf("%v.data", cmdPrefix)
	}

	if err := registerModelSchemaDomainWhoisResponseFlags(depth+1, flagDataName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelGetDomainWhoisDomainNameOKBodyFlags(depth int, m *dns.GetDomainWhoisDomainNameOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	// retrieve model models.SchemaAPIResponse
	err, GetDomainWhoisDomainNameOKBodyAO0Added := retrieveModelSchemaAPIResponseFlags(depth, &m.SchemaAPIResponse, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GetDomainWhoisDomainNameOKBodyAO0Added

	// retrieve allOf getDomainWhoisDomainNameOKBodyAO1 fields

	err, DataAdded := retrieveGetDomainWhoisDomainNameOKBodyPropAnonGetDomainWhoisDomainNameOKBodyAO1DataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DataAdded

	return nil, retAdded
}

// define retrieve functions for fields for inline definition name getDomainWhoisDomainNameOKBodyAO1

func retrieveGetDomainWhoisDomainNameOKBodyPropAnonGetDomainWhoisDomainNameOKBodyAO1DataFlags(depth int, m *dns.GetDomainWhoisDomainNameOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDataName := fmt.Sprintf("%v.data", cmdPrefix)
	if cmd.Flags().Changed(flagDataName) {
		// info: complex object data models.SchemaDomainWhoisResponse is retrieved outside this Changed() block
	}
	flagDataValue := m.Data
	if swag.IsZero(flagDataValue) {
		flagDataValue = &models.SchemaDomainWhoisResponse{}
	}

	err, DataAdded := retrieveModelSchemaDomainWhoisResponseFlags(depth+1, flagDataValue, flagDataName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DataAdded
	if DataAdded {
		m.Data = flagDataValue
	}

	return nil, retAdded
}
