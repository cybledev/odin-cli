// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/cybledev/odin-cli/decorator"
	"github.com/cybledev/odin-cli/odin_cli/certificate"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationCertificateGetCertificatesHashCmd returns a command to handle operation getCertificatesHash
func makeOperationCertificateGetCertificatesHashCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Args:  cobra.NoArgs,
		Use:   "hash",
		Short: `Returns the complete certificate`,
		RunE:  decorator.RunEColorWrapper(runOperationCertificateGetCertificatesHash),
	}

	if err := registerOperationCertificateGetCertificatesHashParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationCertificateGetCertificatesHash uses cmd flags to call endpoint api
func runOperationCertificateGetCertificatesHash(cmd *cobra.Command, args []string) (string, error) {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return "", err
	}
	// retrieve flag values from cmd and fill params
	params := certificate.NewGetCertificatesHashParams()
	if err, _ = retrieveOperationCertificateGetCertificatesHashHashFlag(params, "", cmd); err != nil {
		return "", err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return "", nil
	}
	// make request and then print result
	msgStr, err := parseOperationCertificateGetCertificatesHashResult(appCli.Certificate.GetCertificatesHash(params, nil))
	if err != nil {
		return "", err
	}

	if !debug {
		return msgStr, nil
	}

	return "", nil
}

// registerOperationCertificateGetCertificatesHashParamFlags registers all flags needed to fill params
func registerOperationCertificateGetCertificatesHashParamFlags(cmd *cobra.Command) error {
	if err := registerOperationCertificateGetCertificatesHashHashParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationCertificateGetCertificatesHashHashParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagHashDescription := `Required. get the complete cert by hash`

	var flagHashName string
	if cmdPrefix == "" {
		flagHashName = "hash"
	} else {
		flagHashName = fmt.Sprintf("%v.hash", cmdPrefix)
	}

	var flagHashDefault string

	_ = cmd.PersistentFlags().String(flagHashName, flagHashDefault, flagHashDescription)

	return nil
}

func retrieveOperationCertificateGetCertificatesHashHashFlag(m *certificate.GetCertificatesHashParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("hash") {

		var flagHashName string
		if cmdPrefix == "" {
			flagHashName = "hash"
		} else {
			flagHashName = fmt.Sprintf("%v.hash", cmdPrefix)
		}

		flagHashValue, err := cmd.Flags().GetString(flagHashName)
		if err != nil {
			return err, false
		}
		m.Hash = flagHashValue

	}

	return nil, retAdded
}

// parseOperationCertificateGetCertificatesHashResult parses request result and return the string content
func parseOperationCertificateGetCertificatesHashResult(resp0 *certificate.GetCertificatesHashOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*certificate.GetCertificatesHashOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*certificate.GetCertificatesHashBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*certificate.GetCertificatesHashRequestTimeout)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*certificate.GetCertificatesHashInternalServerError)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
