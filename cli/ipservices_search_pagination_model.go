// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for IpservicesSearchPagination

// register flags to command
func registerModelIpservicesSearchPaginationFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIpservicesSearchPaginationPropLast(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesSearchPaginationPropLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesSearchPaginationPropStart(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesSearchPaginationPropTotal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIpservicesSearchPaginationPropLast(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: last []float64 array type is not supported by go-swagger cli yet

	return nil
}

func registerIpservicesSearchPaginationPropLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLimitDescription := ``

	var flagLimitName string
	if cmdPrefix == "" {
		flagLimitName = "limit"
	} else {
		flagLimitName = fmt.Sprintf("%v.limit", cmdPrefix)
	}

	var flagLimitDefault int64

	_ = cmd.PersistentFlags().Int64(flagLimitName, flagLimitDefault, flagLimitDescription)

	return nil
}

func registerIpservicesSearchPaginationPropStart(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: start []float64 array type is not supported by go-swagger cli yet

	return nil
}

func registerIpservicesSearchPaginationPropTotal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalDescription := ``

	var flagTotalName string
	if cmdPrefix == "" {
		flagTotalName = "total"
	} else {
		flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
	}

	var flagTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalName, flagTotalDefault, flagTotalDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIpservicesSearchPaginationFlags(depth int, m *models.IpservicesSearchPagination, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, LastAdded := retrieveIpservicesSearchPaginationPropLastFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LastAdded

	err, LimitAdded := retrieveIpservicesSearchPaginationPropLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LimitAdded

	err, StartAdded := retrieveIpservicesSearchPaginationPropStartFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StartAdded

	err, TotalAdded := retrieveIpservicesSearchPaginationPropTotalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalAdded

	return nil, retAdded
}

func retrieveIpservicesSearchPaginationPropLastFlags(depth int, m *models.IpservicesSearchPagination, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLastName := fmt.Sprintf("%v.last", cmdPrefix)
	if cmd.Flags().Changed(flagLastName) {
		// warning: last array type []float64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIpservicesSearchPaginationPropLimitFlags(depth int, m *models.IpservicesSearchPagination, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := true

	flagLimitName := fmt.Sprintf("%v.limit", cmdPrefix)
	if cmd.Flags().Changed(flagLimitName) {

		var flagLimitName string
		if cmdPrefix == "" {
			flagLimitName = "limit"
		} else {
			flagLimitName = fmt.Sprintf("%v.limit", cmdPrefix)
		}

		flagLimitValue, err := cmd.Flags().GetInt64(flagLimitName)
		if err != nil {
			return err, false
		}
		m.Limit = flagLimitValue

		retAdded = true
	} else {
		m.Limit = *defaultLimit
	}

	return nil, retAdded
}

func retrieveIpservicesSearchPaginationPropStartFlags(depth int, m *models.IpservicesSearchPagination, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStartName := fmt.Sprintf("%v.start", cmdPrefix)
	if cmd.Flags().Changed(flagStartName) {
		// warning: start array type []float64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIpservicesSearchPaginationPropTotalFlags(depth int, m *models.IpservicesSearchPagination, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalName := fmt.Sprintf("%v.total", cmdPrefix)
	if cmd.Flags().Changed(flagTotalName) {

		var flagTotalName string
		if cmdPrefix == "" {
			flagTotalName = "total"
		} else {
			flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
		}

		flagTotalValue, err := cmd.Flags().GetInt64(flagTotalName)
		if err != nil {
			return err, false
		}
		m.Total = flagTotalValue

		retAdded = true
	}

	return nil, retAdded
}
