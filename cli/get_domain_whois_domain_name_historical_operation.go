// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/cybledev/odin-cli/decorator"
	"github.com/cybledev/odin-cli/models"
	"github.com/cybledev/odin-cli/odin_cli/dns"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationDomainWhoisGetDomainWhoisDomainNameHistoricalCmd returns a command to handle operation getDomainWhoisDomainNameHistorical
func makeOperationDomainWhoisGetDomainWhoisDomainNameHistoricalCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "whois-historical",
		Short: `Provides historical details about the domain whois record`,
		RunE:  decorator.RunEColorWrapper(runOperationDomainWhoisGetDomainWhoisDomainNameHistorical),
	}

	if err := registerOperationDomainWhoisGetDomainWhoisDomainNameHistoricalParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationDomainWhoisGetDomainWhoisDomainNameHistorical uses cmd flags to call endpoint api
func runOperationDomainWhoisGetDomainWhoisDomainNameHistorical(cmd *cobra.Command, args []string) (string, error) {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return "", err
	}
	// retrieve flag values from cmd and fill params
	params := dns.NewGetDomainWhoisDomainNameHistoricalParams()
	if err, _ = retrieveOperationDomainWhoisGetDomainWhoisDomainNameHistoricalDomainNameFlag(params, "", cmd); err != nil {
		return "", err
	}
	if dryRun {
		logDebugf("dry-run flag specified. Skip sending request.")
		return "", nil
	}
	// make request and then print result
	msgStr, err := parseOperationDomainWhoisGetDomainWhoisDomainNameHistoricalResult(appCli.DNS.GetDomainWhoisDomainNameHistorical(params, nil))
	if err != nil {
		return "", err
	}
	if !debug {
		return msgStr, nil
	}

	return "", nil
}

// registerOperationDomainWhoisGetDomainWhoisDomainNameHistoricalParamFlags registers all flags needed to fill params
func registerOperationDomainWhoisGetDomainWhoisDomainNameHistoricalParamFlags(cmd *cobra.Command) error {
	if err := registerOperationDomainWhoisGetDomainWhoisDomainNameHistoricalDomainNameParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationDomainWhoisGetDomainWhoisDomainNameHistoricalDomainNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	flagDomainNameDescription := `Required. domain`

	var flagDomainNameName string
	if cmdPrefix == "" {
		flagDomainNameName = "domain-name"
	} else {
		flagDomainNameName = fmt.Sprintf("%v.domain-name", cmdPrefix)
	}

	var flagDomainNameDefault string

	_ = cmd.PersistentFlags().String(flagDomainNameName, flagDomainNameDefault, flagDomainNameDescription)

	return nil
}

func retrieveOperationDomainWhoisGetDomainWhoisDomainNameHistoricalDomainNameFlag(m *dns.GetDomainWhoisDomainNameHistoricalParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("domain-name") {

		var flagDomainNameName string
		if cmdPrefix == "" {
			flagDomainNameName = "domain-name"
		} else {
			flagDomainNameName = fmt.Sprintf("%v.domain-name", cmdPrefix)
		}

		flagDomainNameValue, err := cmd.Flags().GetString(flagDomainNameName)
		if err != nil {
			return err, false
		}
		m.DomainName = flagDomainNameValue

	}

	return nil, retAdded
}

// parseOperationDomainWhoisGetDomainWhoisDomainNameHistoricalResult parses request result and return the string content
func parseOperationDomainWhoisGetDomainWhoisDomainNameHistoricalResult(resp0 *dns.GetDomainWhoisDomainNameHistoricalOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*dns.GetDomainWhoisDomainNameHistoricalOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*dns.GetDomainWhoisDomainNameHistoricalBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp2 interface{} = respErr
		resp2, ok := iResp2.(*dns.GetDomainWhoisDomainNameHistoricalPaymentRequired)
		if ok {
			if !swag.IsZero(resp2) && !swag.IsZero(resp2.Payload) {
				msgStr, err := json.Marshal(resp2.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp3 interface{} = respErr
		resp3, ok := iResp3.(*dns.GetDomainWhoisDomainNameHistoricalRequestTimeout)
		if ok {
			if !swag.IsZero(resp3) && !swag.IsZero(resp3.Payload) {
				msgStr, err := json.Marshal(resp3.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp4 interface{} = respErr
		resp4, ok := iResp4.(*dns.GetDomainWhoisDomainNameHistoricalInternalServerError)
		if ok {
			if !swag.IsZero(resp4) && !swag.IsZero(resp4.Payload) {
				msgStr, err := json.Marshal(resp4.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}

// register flags to command
func registerModelGetDomainWhoisDomainNameHistoricalOKBodyFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	// register embedded models.SchemaAPIResponse flags

	if err := registerModelSchemaAPIResponseFlags(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	// register anonymous fields for getDomainWhoisDomainNameHistoricalOKBodyAO1

	if err := registerGetDomainWhoisDomainNameHistoricalOKBodyPropAnonGetDomainWhoisDomainNameHistoricalOKBodyAO1Meta(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerGetDomainWhoisDomainNameHistoricalOKBodyPropAnonGetDomainWhoisDomainNameHistoricalOKBodyAO1Data(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

// inline definition name getDomainWhoisDomainNameHistoricalOKBodyAO1, type

func registerGetDomainWhoisDomainNameHistoricalOKBodyPropAnonGetDomainWhoisDomainNameHistoricalOKBodyAO1Meta(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagMetaName string
	if cmdPrefix == "" {
		flagMetaName = " meta"
	} else {
		flagMetaName = fmt.Sprintf("%v. meta", cmdPrefix)
	}

	if err := registerModelSchemaPaginationMetaFlags(depth+1, flagMetaName, cmd); err != nil {
		return err
	}

	return nil
}

func registerGetDomainWhoisDomainNameHistoricalOKBodyPropAnonGetDomainWhoisDomainNameHistoricalOKBodyAO1Data(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: data []*models.SchemaDomainWhoisResponse array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelGetDomainWhoisDomainNameHistoricalOKBodyFlags(depth int, m *dns.GetDomainWhoisDomainNameHistoricalOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	// retrieve model models.SchemaAPIResponse
	err, GetDomainWhoisDomainNameHistoricalOKBodyAO0Added := retrieveModelSchemaAPIResponseFlags(depth, &m.SchemaAPIResponse, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || GetDomainWhoisDomainNameHistoricalOKBodyAO0Added

	// retrieve allOf getDomainWhoisDomainNameHistoricalOKBodyAO1 fields

	err, MetaAdded := retrieveGetDomainWhoisDomainNameHistoricalOKBodyPropAnonGetDomainWhoisDomainNameHistoricalOKBodyAO1MetaFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MetaAdded

	err, DataAdded := retrieveGetDomainWhoisDomainNameHistoricalOKBodyPropAnonGetDomainWhoisDomainNameHistoricalOKBodyAO1DataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DataAdded

	return nil, retAdded
}

// define retrieve functions for fields for inline definition name getDomainWhoisDomainNameHistoricalOKBodyAO1

func retrieveGetDomainWhoisDomainNameHistoricalOKBodyPropAnonGetDomainWhoisDomainNameHistoricalOKBodyAO1MetaFlags(depth int, m *dns.GetDomainWhoisDomainNameHistoricalOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMetaName := fmt.Sprintf("%v. meta", cmdPrefix)
	if cmd.Flags().Changed(flagMetaName) {
		// info: complex object  meta models.SchemaPaginationMeta is retrieved outside this Changed() block
	}
	flagMetaValue := m.Meta
	if swag.IsZero(flagMetaValue) {
		flagMetaValue = &models.SchemaPaginationMeta{}
	}

	err, MetaAdded := retrieveModelSchemaPaginationMetaFlags(depth+1, flagMetaValue, flagMetaName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MetaAdded
	if MetaAdded {
		m.Meta = flagMetaValue
	}

	return nil, retAdded
}

func retrieveGetDomainWhoisDomainNameHistoricalOKBodyPropAnonGetDomainWhoisDomainNameHistoricalOKBodyAO1DataFlags(depth int, m *dns.GetDomainWhoisDomainNameHistoricalOKBody, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDataName := fmt.Sprintf("%v.data", cmdPrefix)
	if cmd.Flags().Changed(flagDataName) {
		// warning: data array type []*models.SchemaDomainWhoisResponse is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
