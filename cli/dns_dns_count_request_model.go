// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for DNSDNSCountRequest

// register flags to command
func registerModelDNSDNSCountRequestFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDNSDNSCountRequestPropDomain(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDNSDNSCountRequestPropPublishedAfter(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDNSDNSCountRequestPropPublishedBefore(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDNSDNSCountRequestPropDomain(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagDomainDescription := `Required. `

	var flagDomainName string
	if cmdPrefix == "" {
		flagDomainName = "domain"
	} else {
		flagDomainName = fmt.Sprintf("%v.domain", cmdPrefix)
	}

	var flagDomainDefault string

	_ = cmd.PersistentFlags().String(flagDomainName, flagDomainDefault, flagDomainDescription)

	return nil
}

func registerDNSDNSCountRequestPropPublishedAfter(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagPublishedAfterDescription := ``

	var flagPublishedAfterName string
	if cmdPrefix == "" {
		flagPublishedAfterName = "publishedAfter"
	} else {
		flagPublishedAfterName = fmt.Sprintf("%v.publishedAfter", cmdPrefix)
	}

	var flagPublishedAfterDefault string

	_ = cmd.PersistentFlags().String(flagPublishedAfterName, flagPublishedAfterDefault, flagPublishedAfterDescription)

	return nil
}

func registerDNSDNSCountRequestPropPublishedBefore(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagPublishedBeforeDescription := ``

	var flagPublishedBeforeName string
	if cmdPrefix == "" {
		flagPublishedBeforeName = "publishedBefore"
	} else {
		flagPublishedBeforeName = fmt.Sprintf("%v.publishedBefore", cmdPrefix)
	}

	var flagPublishedBeforeDefault string

	_ = cmd.PersistentFlags().String(flagPublishedBeforeName, flagPublishedBeforeDefault, flagPublishedBeforeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDNSDNSCountRequestFlags(depth int, m *models.DNSDNSCountRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DomainAdded := retrieveDNSDNSCountRequestPropDomainFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DomainAdded

	err, KeywordAdded := retrieveDNSDNSCountRequestPropKeywordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || KeywordAdded

	err, PublishedAfterAdded := retrieveDNSDNSCountRequestPropPublishedAfterFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PublishedAfterAdded

	err, PublishedBeforeAdded := retrieveDNSDNSCountRequestPropPublishedBeforeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PublishedBeforeAdded

	return nil, retAdded
}

func retrieveDNSDNSCountRequestPropKeywordFlags(depth int, m *models.DNSDNSCountRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagKeywordName := fmt.Sprintf("%v.keyword", cmdPrefix)
	if cmd.Flags().Changed(flagKeywordName) {
		var flagKeywordName string
		if cmdPrefix == "" {
			flagKeywordName = "keyword"
		} else {
			flagKeywordName = fmt.Sprintf("%v.keyword", cmdPrefix)
		}

		flagKeywordName, err := cmd.Flags().GetString(flagKeywordName)
		if err != nil {
			return err, false
		}
		m.Keyword = flagKeywordName

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDNSDNSCountRequestPropDomainFlags(depth int, m *models.DNSDNSCountRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDomainName := fmt.Sprintf("%v.domain", cmdPrefix)
	if cmd.Flags().Changed(flagDomainName) {

		var flagDomainName string
		if cmdPrefix == "" {
			flagDomainName = "domain"
		} else {
			flagDomainName = fmt.Sprintf("%v.domain", cmdPrefix)
		}

		flagDomainValue, err := cmd.Flags().GetString(flagDomainName)
		if err != nil {
			return err, false
		}
		m.Domain = flagDomainValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDNSDNSCountRequestPropPublishedAfterFlags(depth int, m *models.DNSDNSCountRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPublishedAfterName := fmt.Sprintf("%v.publishedAfter", cmdPrefix)
	if cmd.Flags().Changed(flagPublishedAfterName) {

		var flagPublishedAfterName string
		if cmdPrefix == "" {
			flagPublishedAfterName = "publishedAfter"
		} else {
			flagPublishedAfterName = fmt.Sprintf("%v.publishedAfter", cmdPrefix)
		}

		flagPublishedAfterValue, err := cmd.Flags().GetString(flagPublishedAfterName)
		if err != nil {
			return err, false
		}
		m.PublishedAfter = flagPublishedAfterValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDNSDNSCountRequestPropPublishedBeforeFlags(depth int, m *models.DNSDNSCountRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPublishedBeforeName := fmt.Sprintf("%v.publishedBefore", cmdPrefix)
	if cmd.Flags().Changed(flagPublishedBeforeName) {

		var flagPublishedBeforeName string
		if cmdPrefix == "" {
			flagPublishedBeforeName = "publishedBefore"
		} else {
			flagPublishedBeforeName = fmt.Sprintf("%v.publishedBefore", cmdPrefix)
		}

		flagPublishedBeforeValue, err := cmd.Flags().GetString(flagPublishedBeforeName)
		if err != nil {
			return err, false
		}
		m.PublishedBefore = flagPublishedBeforeValue

		retAdded = true
	}

	return nil, retAdded
}
