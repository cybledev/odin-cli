// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for IPTag

// register flags to command
func registerModelIPTagFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIPTagPropLastUpdatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPTagPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPTagPropPrettyName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIPTagPropValue(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIPTagPropLastUpdatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLastUpdatedAtDescription := ``

	var flagLastUpdatedAtName string
	if cmdPrefix == "" {
		flagLastUpdatedAtName = "last_updated_at"
	} else {
		flagLastUpdatedAtName = fmt.Sprintf("%v.last_updated_at", cmdPrefix)
	}

	var flagLastUpdatedAtDefault string

	_ = cmd.PersistentFlags().String(flagLastUpdatedAtName, flagLastUpdatedAtDefault, flagLastUpdatedAtDescription)

	return nil
}

func registerIPTagPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := ``

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerIPTagPropPrettyName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagPrettyNameDescription := ``

	var flagPrettyNameName string
	if cmdPrefix == "" {
		flagPrettyNameName = "pretty_name"
	} else {
		flagPrettyNameName = fmt.Sprintf("%v.pretty_name", cmdPrefix)
	}

	var flagPrettyNameDefault string

	_ = cmd.PersistentFlags().String(flagPrettyNameName, flagPrettyNameDefault, flagPrettyNameDescription)

	return nil
}

func registerIPTagPropValue(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagValueDescription := ``

	var flagValueName string
	if cmdPrefix == "" {
		flagValueName = "value"
	} else {
		flagValueName = fmt.Sprintf("%v.value", cmdPrefix)
	}

	var flagValueDefault bool

	_ = cmd.PersistentFlags().Bool(flagValueName, flagValueDefault, flagValueDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIPTagFlags(depth int, m *models.IPTag, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, LastUpdatedAtAdded := retrieveIPTagPropLastUpdatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LastUpdatedAtAdded

	err, NameAdded := retrieveIPTagPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, PrettyNameAdded := retrieveIPTagPropPrettyNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PrettyNameAdded

	err, ValueAdded := retrieveIPTagPropValueFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ValueAdded

	return nil, retAdded
}

func retrieveIPTagPropLastUpdatedAtFlags(depth int, m *models.IPTag, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLastUpdatedAtName := fmt.Sprintf("%v.last_updated_at", cmdPrefix)
	if cmd.Flags().Changed(flagLastUpdatedAtName) {

		var flagLastUpdatedAtName string
		if cmdPrefix == "" {
			flagLastUpdatedAtName = "last_updated_at"
		} else {
			flagLastUpdatedAtName = fmt.Sprintf("%v.last_updated_at", cmdPrefix)
		}

		flagLastUpdatedAtValue, err := cmd.Flags().GetString(flagLastUpdatedAtName)
		if err != nil {
			return err, false
		}
		m.LastUpdatedAt = flagLastUpdatedAtValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPTagPropNameFlags(depth int, m *models.IPTag, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPTagPropPrettyNameFlags(depth int, m *models.IPTag, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPrettyNameName := fmt.Sprintf("%v.pretty_name", cmdPrefix)
	if cmd.Flags().Changed(flagPrettyNameName) {

		var flagPrettyNameName string
		if cmdPrefix == "" {
			flagPrettyNameName = "pretty_name"
		} else {
			flagPrettyNameName = fmt.Sprintf("%v.pretty_name", cmdPrefix)
		}

		flagPrettyNameValue, err := cmd.Flags().GetString(flagPrettyNameName)
		if err != nil {
			return err, false
		}
		m.PrettyName = flagPrettyNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIPTagPropValueFlags(depth int, m *models.IPTag, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagValueName := fmt.Sprintf("%v.value", cmdPrefix)
	if cmd.Flags().Changed(flagValueName) {

		var flagValueName string
		if cmdPrefix == "" {
			flagValueName = "value"
		} else {
			flagValueName = fmt.Sprintf("%v.value", cmdPrefix)
		}

		flagValueValue, err := cmd.Flags().GetBool(flagValueName)
		if err != nil {
			return err, false
		}
		m.Value = flagValueValue

		retAdded = true
	}

	return nil, retAdded
}
