// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for TokensUserTokenStats

// register flags to command
func registerModelTokensUserTokenStatsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerTokensUserTokenStatsPropExpiresOn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTokensUserTokenStatsPropLeft(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerTokensUserTokenStatsPropPlan(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerTokensUserTokenStatsPropExpiresOn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagExpiresOnDescription := ``

	var flagExpiresOnName string
	if cmdPrefix == "" {
		flagExpiresOnName = "expires_on"
	} else {
		flagExpiresOnName = fmt.Sprintf("%v.expires_on", cmdPrefix)
	}

	var flagExpiresOnDefault int64

	_ = cmd.PersistentFlags().Int64(flagExpiresOnName, flagExpiresOnDefault, flagExpiresOnDescription)

	return nil
}

func registerTokensUserTokenStatsPropLeft(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLeftDescription := ``

	var flagLeftName string
	if cmdPrefix == "" {
		flagLeftName = "left"
	} else {
		flagLeftName = fmt.Sprintf("%v.left", cmdPrefix)
	}

	var flagLeftDefault int64

	_ = cmd.PersistentFlags().Int64(flagLeftName, flagLeftDefault, flagLeftDescription)

	return nil
}

func registerTokensUserTokenStatsPropPlan(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagPlanDescription := ``

	var flagPlanName string
	if cmdPrefix == "" {
		flagPlanName = "plan"
	} else {
		flagPlanName = fmt.Sprintf("%v.plan", cmdPrefix)
	}

	var flagPlanDefault int64

	_ = cmd.PersistentFlags().Int64(flagPlanName, flagPlanDefault, flagPlanDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelTokensUserTokenStatsFlags(depth int, m *models.TokensUserTokenStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ExpiresOnAdded := retrieveTokensUserTokenStatsPropExpiresOnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ExpiresOnAdded

	err, LeftAdded := retrieveTokensUserTokenStatsPropLeftFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LeftAdded

	err, PlanAdded := retrieveTokensUserTokenStatsPropPlanFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PlanAdded

	return nil, retAdded
}

func retrieveTokensUserTokenStatsPropExpiresOnFlags(depth int, m *models.TokensUserTokenStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagExpiresOnName := fmt.Sprintf("%v.expires_on", cmdPrefix)
	if cmd.Flags().Changed(flagExpiresOnName) {

		var flagExpiresOnName string
		if cmdPrefix == "" {
			flagExpiresOnName = "expires_on"
		} else {
			flagExpiresOnName = fmt.Sprintf("%v.expires_on", cmdPrefix)
		}

		flagExpiresOnValue, err := cmd.Flags().GetInt64(flagExpiresOnName)
		if err != nil {
			return err, false
		}
		m.ExpiresOn = flagExpiresOnValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTokensUserTokenStatsPropLeftFlags(depth int, m *models.TokensUserTokenStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLeftName := fmt.Sprintf("%v.left", cmdPrefix)
	if cmd.Flags().Changed(flagLeftName) {

		var flagLeftName string
		if cmdPrefix == "" {
			flagLeftName = "left"
		} else {
			flagLeftName = fmt.Sprintf("%v.left", cmdPrefix)
		}

		flagLeftValue, err := cmd.Flags().GetInt64(flagLeftName)
		if err != nil {
			return err, false
		}
		m.Left = flagLeftValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveTokensUserTokenStatsPropPlanFlags(depth int, m *models.TokensUserTokenStats, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPlanName := fmt.Sprintf("%v.plan", cmdPrefix)
	if cmd.Flags().Changed(flagPlanName) {

		var flagPlanName string
		if cmdPrefix == "" {
			flagPlanName = "plan"
		} else {
			flagPlanName = fmt.Sprintf("%v.plan", cmdPrefix)
		}

		flagPlanValue, err := cmd.Flags().GetInt64(flagPlanName)
		if err != nil {
			return err, false
		}
		m.Plan = flagPlanValue

		retAdded = true
	}

	return nil, retAdded
}
