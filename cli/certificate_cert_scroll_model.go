// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for CertificateCertScroll

// register flags to command
func registerModelCertificateCertScrollFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCertificateCertScrollPropCertificates(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertScrollPropNextBatch(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertScrollPropCertificates(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: certificates []interface{} array type is not supported by go-swagger cli yet

	return nil
}

func registerCertificateCertScrollPropNextBatch(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNextBatchDescription := ``

	var flagNextBatchName string
	if cmdPrefix == "" {
		flagNextBatchName = "next_batch"
	} else {
		flagNextBatchName = fmt.Sprintf("%v.next_batch", cmdPrefix)
	}

	var flagNextBatchDefault string

	_ = cmd.PersistentFlags().String(flagNextBatchName, flagNextBatchDefault, flagNextBatchDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCertificateCertScrollFlags(depth int, m *models.CertificateCertScroll, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CertificatesAdded := retrieveCertificateCertScrollPropCertificatesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CertificatesAdded

	err, NextBatchAdded := retrieveCertificateCertScrollPropNextBatchFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NextBatchAdded

	return nil, retAdded
}

func retrieveCertificateCertScrollPropCertificatesFlags(depth int, m *models.CertificateCertScroll, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCertificatesName := fmt.Sprintf("%v.certificates", cmdPrefix)
	if cmd.Flags().Changed(flagCertificatesName) {
		// warning: certificates array type []interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveCertificateCertScrollPropNextBatchFlags(depth int, m *models.CertificateCertScroll, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNextBatchName := fmt.Sprintf("%v.next_batch", cmdPrefix)
	if cmd.Flags().Changed(flagNextBatchName) {

		var flagNextBatchName string
		if cmdPrefix == "" {
			flagNextBatchName = "next_batch"
		} else {
			flagNextBatchName = fmt.Sprintf("%v.next_batch", cmdPrefix)
		}

		flagNextBatchValue, err := cmd.Flags().GetString(flagNextBatchName)
		if err != nil {
			return err, false
		}
		m.NextBatch = flagNextBatchValue

		retAdded = true
	}

	return nil, retAdded
}
