// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for PaginationStruct

// register flags to command
func registerModelPaginationStructFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerPaginationStructPropCurrent(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerPaginationStructPropTotal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerPaginationStructPropCurrent(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCurrentDescription := ``

	var flagCurrentName string
	if cmdPrefix == "" {
		flagCurrentName = "current"
	} else {
		flagCurrentName = fmt.Sprintf("%v.current", cmdPrefix)
	}

	var flagCurrentDefault string

	_ = cmd.PersistentFlags().String(flagCurrentName, flagCurrentDefault, flagCurrentDescription)

	return nil
}

func registerPaginationStructPropTotal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalDescription := ``

	var flagTotalName string
	if cmdPrefix == "" {
		flagTotalName = "total"
	} else {
		flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
	}

	var flagTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalName, flagTotalDefault, flagTotalDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelPaginationStructFlags(depth int, m *models.PaginationStruct, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CurrentAdded := retrievePaginationStructPropCurrentFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CurrentAdded

	err, TotalAdded := retrievePaginationStructPropTotalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalAdded

	return nil, retAdded
}

func retrievePaginationStructPropCurrentFlags(depth int, m *models.PaginationStruct, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCurrentName := fmt.Sprintf("%v.current", cmdPrefix)
	if cmd.Flags().Changed(flagCurrentName) {

		var flagCurrentName string
		if cmdPrefix == "" {
			flagCurrentName = "current"
		} else {
			flagCurrentName = fmt.Sprintf("%v.current", cmdPrefix)
		}

		flagCurrentValue, err := cmd.Flags().GetString(flagCurrentName)
		if err != nil {
			return err, false
		}
		m.Current = flagCurrentValue

		retAdded = true
	}

	return nil, retAdded
}

func retrievePaginationStructPropTotalFlags(depth int, m *models.PaginationStruct, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalName := fmt.Sprintf("%v.total", cmdPrefix)
	if cmd.Flags().Changed(flagTotalName) {

		var flagTotalName string
		if cmdPrefix == "" {
			flagTotalName = "total"
		} else {
			flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
		}

		flagTotalValue, err := cmd.Flags().GetInt64(flagTotalName)
		if err != nil {
			return err, false
		}
		m.Total = flagTotalValue

		retAdded = true
	}

	return nil, retAdded
}
