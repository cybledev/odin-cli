// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for ServiceIPASN

// register flags to command
func registerModelServiceIPASNFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerServiceIPASNPropCountryCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceIPASNPropNumber(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceIPASNPropOrganization(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerServiceIPASNPropCountryCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCountryCodeDescription := ``

	var flagCountryCodeName string
	if cmdPrefix == "" {
		flagCountryCodeName = "country_code"
	} else {
		flagCountryCodeName = fmt.Sprintf("%v.country_code", cmdPrefix)
	}

	var flagCountryCodeDefault string

	_ = cmd.PersistentFlags().String(flagCountryCodeName, flagCountryCodeDefault, flagCountryCodeDescription)

	return nil
}

func registerServiceIPASNPropNumber(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNumberDescription := ``

	var flagNumberName string
	if cmdPrefix == "" {
		flagNumberName = "number"
	} else {
		flagNumberName = fmt.Sprintf("%v.number", cmdPrefix)
	}

	var flagNumberDefault string

	_ = cmd.PersistentFlags().String(flagNumberName, flagNumberDefault, flagNumberDescription)

	return nil
}

func registerServiceIPASNPropOrganization(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagOrganizationDescription := ``

	var flagOrganizationName string
	if cmdPrefix == "" {
		flagOrganizationName = "organization"
	} else {
		flagOrganizationName = fmt.Sprintf("%v.organization", cmdPrefix)
	}

	var flagOrganizationDefault string

	_ = cmd.PersistentFlags().String(flagOrganizationName, flagOrganizationDefault, flagOrganizationDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelServiceIPASNFlags(depth int, m *models.ServiceIPASN, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CountryCodeAdded := retrieveServiceIPASNPropCountryCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CountryCodeAdded

	err, NumberAdded := retrieveServiceIPASNPropNumberFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NumberAdded

	err, OrganizationAdded := retrieveServiceIPASNPropOrganizationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || OrganizationAdded

	return nil, retAdded
}

func retrieveServiceIPASNPropCountryCodeFlags(depth int, m *models.ServiceIPASN, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCountryCodeName := fmt.Sprintf("%v.country_code", cmdPrefix)
	if cmd.Flags().Changed(flagCountryCodeName) {

		var flagCountryCodeName string
		if cmdPrefix == "" {
			flagCountryCodeName = "country_code"
		} else {
			flagCountryCodeName = fmt.Sprintf("%v.country_code", cmdPrefix)
		}

		flagCountryCodeValue, err := cmd.Flags().GetString(flagCountryCodeName)
		if err != nil {
			return err, false
		}
		m.CountryCode = flagCountryCodeValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceIPASNPropNumberFlags(depth int, m *models.ServiceIPASN, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNumberName := fmt.Sprintf("%v.number", cmdPrefix)
	if cmd.Flags().Changed(flagNumberName) {

		var flagNumberName string
		if cmdPrefix == "" {
			flagNumberName = "number"
		} else {
			flagNumberName = fmt.Sprintf("%v.number", cmdPrefix)
		}

		flagNumberValue, err := cmd.Flags().GetString(flagNumberName)
		if err != nil {
			return err, false
		}
		m.Number = flagNumberValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceIPASNPropOrganizationFlags(depth int, m *models.ServiceIPASN, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagOrganizationName := fmt.Sprintf("%v.organization", cmdPrefix)
	if cmd.Flags().Changed(flagOrganizationName) {

		var flagOrganizationName string
		if cmdPrefix == "" {
			flagOrganizationName = "organization"
		} else {
			flagOrganizationName = fmt.Sprintf("%v.organization", cmdPrefix)
		}

		flagOrganizationValue, err := cmd.Flags().GetString(flagOrganizationName)
		if err != nil {
			return err, false
		}
		m.Organization = flagOrganizationValue

		retAdded = true
	}

	return nil, retAdded
}
