// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for ExposedAPIResponse

// register flags to command
func registerModelExposedAPIResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerExposedAPIResponsePropData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExposedAPIResponsePropPagination(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerExposedAPIResponsePropSuccess(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerExposedAPIResponsePropData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: data interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerExposedAPIResponsePropPagination(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: pagination interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerExposedAPIResponsePropSuccess(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSuccessDescription := ``

	var flagSuccessName string
	if cmdPrefix == "" {
		flagSuccessName = "success"
	} else {
		flagSuccessName = fmt.Sprintf("%v.success", cmdPrefix)
	}

	var flagSuccessDefault bool

	_ = cmd.PersistentFlags().Bool(flagSuccessName, flagSuccessDefault, flagSuccessDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelExposedAPIResponseFlags(depth int, m *models.ExposedAPIResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DataAdded := retrieveExposedAPIResponsePropDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DataAdded

	err, PaginationAdded := retrieveExposedAPIResponsePropPaginationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PaginationAdded

	err, SuccessAdded := retrieveExposedAPIResponsePropSuccessFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SuccessAdded

	return nil, retAdded
}

func retrieveExposedAPIResponsePropDataFlags(depth int, m *models.ExposedAPIResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDataName := fmt.Sprintf("%v.data", cmdPrefix)
	if cmd.Flags().Changed(flagDataName) {
		// warning: data map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveExposedAPIResponsePropPaginationFlags(depth int, m *models.ExposedAPIResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPaginationName := fmt.Sprintf("%v.pagination", cmdPrefix)
	if cmd.Flags().Changed(flagPaginationName) {
		// warning: pagination map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveExposedAPIResponsePropSuccessFlags(depth int, m *models.ExposedAPIResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSuccessName := fmt.Sprintf("%v.success", cmdPrefix)
	if cmd.Flags().Changed(flagSuccessName) {

		var flagSuccessName string
		if cmdPrefix == "" {
			flagSuccessName = "success"
		} else {
			flagSuccessName = fmt.Sprintf("%v.success", cmdPrefix)
		}

		flagSuccessValue, err := cmd.Flags().GetBool(flagSuccessName)
		if err != nil {
			return err, false
		}
		m.Success = flagSuccessValue

		retAdded = true
	}

	return nil, retAdded
}
