// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for CertificateNextBatchRequest

// register flags to command
func registerModelCertificateNextBatchRequestFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCertificateNextBatchRequestPropScrollToken(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateNextBatchRequestPropScrollToken(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagScrollTokenDescription := `Required. `

	var flagScrollTokenName string
	if cmdPrefix == "" {
		flagScrollTokenName = "scroll_token"
	} else {
		flagScrollTokenName = fmt.Sprintf("%v.scroll_token", cmdPrefix)
	}

	var flagScrollTokenDefault string

	_ = cmd.PersistentFlags().String(flagScrollTokenName, flagScrollTokenDefault, flagScrollTokenDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCertificateNextBatchRequestFlags(depth int, m *models.CertificateNextBatchRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, ScrollTokenAdded := retrieveCertificateNextBatchRequestPropScrollTokenFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ScrollTokenAdded

	return nil, retAdded
}

func retrieveCertificateNextBatchRequestPropScrollTokenFlags(depth int, m *models.CertificateNextBatchRequest, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagScrollTokenName := fmt.Sprintf("%v.scroll_token", cmdPrefix)
	if cmd.Flags().Changed(flagScrollTokenName) {

		var flagScrollTokenName string
		if cmdPrefix == "" {
			flagScrollTokenName = "scroll_token"
		} else {
			flagScrollTokenName = fmt.Sprintf("%v.scroll_token", cmdPrefix)
		}

		flagScrollTokenValue, err := cmd.Flags().GetString(flagScrollTokenName)
		if err != nil {
			return err, false
		}
		m.ScrollToken = &flagScrollTokenValue

		retAdded = true
	}

	return nil, retAdded
}
