// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for IpservicesIPSummaryData

// register flags to command
func registerModelIpservicesIPSummaryDataFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerIpservicesIPSummaryDataPropAsn(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPSummaryDataPropAsnUpdatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPSummaryDataPropBanner(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPSummaryDataPropDomains(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPSummaryDataPropHostnames(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPSummaryDataPropIP(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPSummaryDataPropIsIPV4(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPSummaryDataPropIsIPV6(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPSummaryDataPropIsVuln(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPSummaryDataPropLastUpdatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPSummaryDataPropLocation(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPSummaryDataPropLocationUpdatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPSummaryDataPropScanID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPSummaryDataPropServices(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPSummaryDataPropServicesHash(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPSummaryDataPropTags(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPSummaryDataPropWhois(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerIpservicesIPSummaryDataPropWhoisUpdatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerIpservicesIPSummaryDataPropAsn(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagAsnName string
	if cmdPrefix == "" {
		flagAsnName = "asn"
	} else {
		flagAsnName = fmt.Sprintf("%v.asn", cmdPrefix)
	}

	if err := registerModelIPASNFlags(depth+1, flagAsnName, cmd); err != nil {
		return err
	}

	return nil
}

func registerIpservicesIPSummaryDataPropAsnUpdatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagAsnUpdatedAtDescription := ``

	var flagAsnUpdatedAtName string
	if cmdPrefix == "" {
		flagAsnUpdatedAtName = "asn_updated_at"
	} else {
		flagAsnUpdatedAtName = fmt.Sprintf("%v.asn_updated_at", cmdPrefix)
	}

	var flagAsnUpdatedAtDefault string

	_ = cmd.PersistentFlags().String(flagAsnUpdatedAtName, flagAsnUpdatedAtDefault, flagAsnUpdatedAtDescription)

	return nil
}

func registerIpservicesIPSummaryDataPropBanner(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: banner []string array type is not supported by go-swagger cli yet

	return nil
}

func registerIpservicesIPSummaryDataPropDomains(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: domains []*IPDomain array type is not supported by go-swagger cli yet

	return nil
}

func registerIpservicesIPSummaryDataPropHostnames(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: hostnames []*IPHostname array type is not supported by go-swagger cli yet

	return nil
}

func registerIpservicesIPSummaryDataPropIP(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIPDescription := ``

	var flagIPName string
	if cmdPrefix == "" {
		flagIPName = "ip"
	} else {
		flagIPName = fmt.Sprintf("%v.ip", cmdPrefix)
	}

	var flagIPDefault string

	_ = cmd.PersistentFlags().String(flagIPName, flagIPDefault, flagIPDescription)

	return nil
}

func registerIpservicesIPSummaryDataPropIsIPV4(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIsIPV4Description := ``

	var flagIsIPV4Name string
	if cmdPrefix == "" {
		flagIsIPV4Name = "is_ipv4"
	} else {
		flagIsIPV4Name = fmt.Sprintf("%v.is_ipv4", cmdPrefix)
	}

	var flagIsIPV4Default bool

	_ = cmd.PersistentFlags().Bool(flagIsIPV4Name, flagIsIPV4Default, flagIsIPV4Description)

	return nil
}

func registerIpservicesIPSummaryDataPropIsIPV6(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIsIPV6Description := ``

	var flagIsIPV6Name string
	if cmdPrefix == "" {
		flagIsIPV6Name = "is_ipv6"
	} else {
		flagIsIPV6Name = fmt.Sprintf("%v.is_ipv6", cmdPrefix)
	}

	var flagIsIPV6Default bool

	_ = cmd.PersistentFlags().Bool(flagIsIPV6Name, flagIsIPV6Default, flagIsIPV6Description)

	return nil
}

func registerIpservicesIPSummaryDataPropIsVuln(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIsVulnDescription := ``

	var flagIsVulnName string
	if cmdPrefix == "" {
		flagIsVulnName = "is_vuln"
	} else {
		flagIsVulnName = fmt.Sprintf("%v.is_vuln", cmdPrefix)
	}

	var flagIsVulnDefault bool

	_ = cmd.PersistentFlags().Bool(flagIsVulnName, flagIsVulnDefault, flagIsVulnDescription)

	return nil
}

func registerIpservicesIPSummaryDataPropLastUpdatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLastUpdatedAtDescription := ``

	var flagLastUpdatedAtName string
	if cmdPrefix == "" {
		flagLastUpdatedAtName = "last_updated_at"
	} else {
		flagLastUpdatedAtName = fmt.Sprintf("%v.last_updated_at", cmdPrefix)
	}

	var flagLastUpdatedAtDefault string

	_ = cmd.PersistentFlags().String(flagLastUpdatedAtName, flagLastUpdatedAtDefault, flagLastUpdatedAtDescription)

	return nil
}

func registerIpservicesIPSummaryDataPropLocation(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagLocationName string
	if cmdPrefix == "" {
		flagLocationName = "location"
	} else {
		flagLocationName = fmt.Sprintf("%v.location", cmdPrefix)
	}

	if err := registerModelIPLocationFlags(depth+1, flagLocationName, cmd); err != nil {
		return err
	}

	return nil
}

func registerIpservicesIPSummaryDataPropLocationUpdatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLocationUpdatedAtDescription := ``

	var flagLocationUpdatedAtName string
	if cmdPrefix == "" {
		flagLocationUpdatedAtName = "location_updated_at"
	} else {
		flagLocationUpdatedAtName = fmt.Sprintf("%v.location_updated_at", cmdPrefix)
	}

	var flagLocationUpdatedAtDefault string

	_ = cmd.PersistentFlags().String(flagLocationUpdatedAtName, flagLocationUpdatedAtDefault, flagLocationUpdatedAtDescription)

	return nil
}

func registerIpservicesIPSummaryDataPropScanID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagScanIDDescription := ``

	var flagScanIDName string
	if cmdPrefix == "" {
		flagScanIDName = "scan_id"
	} else {
		flagScanIDName = fmt.Sprintf("%v.scan_id", cmdPrefix)
	}

	var flagScanIDDefault int64

	_ = cmd.PersistentFlags().Int64(flagScanIDName, flagScanIDDefault, flagScanIDDescription)

	return nil
}

func registerIpservicesIPSummaryDataPropServices(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: services []*IPService array type is not supported by go-swagger cli yet

	return nil
}

func registerIpservicesIPSummaryDataPropServicesHash(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagServicesHashDescription := ``

	var flagServicesHashName string
	if cmdPrefix == "" {
		flagServicesHashName = "services_hash"
	} else {
		flagServicesHashName = fmt.Sprintf("%v.services_hash", cmdPrefix)
	}

	var flagServicesHashDefault string

	_ = cmd.PersistentFlags().String(flagServicesHashName, flagServicesHashDefault, flagServicesHashDescription)

	return nil
}

func registerIpservicesIPSummaryDataPropTags(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: tags []*IPTag array type is not supported by go-swagger cli yet

	return nil
}

func registerIpservicesIPSummaryDataPropWhois(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagWhoisName string
	if cmdPrefix == "" {
		flagWhoisName = "whois"
	} else {
		flagWhoisName = fmt.Sprintf("%v.whois", cmdPrefix)
	}

	if err := registerModelIPWhoisFlags(depth+1, flagWhoisName, cmd); err != nil {
		return err
	}

	return nil
}

func registerIpservicesIPSummaryDataPropWhoisUpdatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagWhoisUpdatedAtDescription := ``

	var flagWhoisUpdatedAtName string
	if cmdPrefix == "" {
		flagWhoisUpdatedAtName = "whois_updated_at"
	} else {
		flagWhoisUpdatedAtName = fmt.Sprintf("%v.whois_updated_at", cmdPrefix)
	}

	var flagWhoisUpdatedAtDefault string

	_ = cmd.PersistentFlags().String(flagWhoisUpdatedAtName, flagWhoisUpdatedAtDefault, flagWhoisUpdatedAtDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelIpservicesIPSummaryDataFlags(depth int, m *models.IpservicesIPSummaryData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, AsnAdded := retrieveIpservicesIPSummaryDataPropAsnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AsnAdded

	err, AsnUpdatedAtAdded := retrieveIpservicesIPSummaryDataPropAsnUpdatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AsnUpdatedAtAdded

	err, BannerAdded := retrieveIpservicesIPSummaryDataPropBannerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || BannerAdded

	err, DomainsAdded := retrieveIpservicesIPSummaryDataPropDomainsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DomainsAdded

	err, HostnamesAdded := retrieveIpservicesIPSummaryDataPropHostnamesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || HostnamesAdded

	err, IPAdded := retrieveIpservicesIPSummaryDataPropIPFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IPAdded

	err, IsIPV4Added := retrieveIpservicesIPSummaryDataPropIsIPV4Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IsIPV4Added

	err, IsIPV6Added := retrieveIpservicesIPSummaryDataPropIsIPV6Flags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IsIPV6Added

	err, IsVulnAdded := retrieveIpservicesIPSummaryDataPropIsVulnFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IsVulnAdded

	err, LastUpdatedAtAdded := retrieveIpservicesIPSummaryDataPropLastUpdatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LastUpdatedAtAdded

	err, LocationAdded := retrieveIpservicesIPSummaryDataPropLocationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LocationAdded

	err, LocationUpdatedAtAdded := retrieveIpservicesIPSummaryDataPropLocationUpdatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LocationUpdatedAtAdded

	err, ScanIDAdded := retrieveIpservicesIPSummaryDataPropScanIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ScanIDAdded

	err, ServicesAdded := retrieveIpservicesIPSummaryDataPropServicesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ServicesAdded

	err, ServicesHashAdded := retrieveIpservicesIPSummaryDataPropServicesHashFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ServicesHashAdded

	err, TagsAdded := retrieveIpservicesIPSummaryDataPropTagsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TagsAdded

	err, WhoisAdded := retrieveIpservicesIPSummaryDataPropWhoisFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WhoisAdded

	err, WhoisUpdatedAtAdded := retrieveIpservicesIPSummaryDataPropWhoisUpdatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WhoisUpdatedAtAdded

	return nil, retAdded
}

func retrieveIpservicesIPSummaryDataPropAsnFlags(depth int, m *models.IpservicesIPSummaryData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAsnName := fmt.Sprintf("%v.asn", cmdPrefix)
	if cmd.Flags().Changed(flagAsnName) {
		// info: complex object asn IPASN is retrieved outside this Changed() block
	}
	flagAsnValue := m.Asn
	if swag.IsZero(flagAsnValue) {
		flagAsnValue = &models.IPASN{}
	}

	err, AsnAdded := retrieveModelIPASNFlags(depth+1, flagAsnValue, flagAsnName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || AsnAdded
	if AsnAdded {
		m.Asn = flagAsnValue
	}

	return nil, retAdded
}

func retrieveIpservicesIPSummaryDataPropAsnUpdatedAtFlags(depth int, m *models.IpservicesIPSummaryData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagAsnUpdatedAtName := fmt.Sprintf("%v.asn_updated_at", cmdPrefix)
	if cmd.Flags().Changed(flagAsnUpdatedAtName) {

		var flagAsnUpdatedAtName string
		if cmdPrefix == "" {
			flagAsnUpdatedAtName = "asn_updated_at"
		} else {
			flagAsnUpdatedAtName = fmt.Sprintf("%v.asn_updated_at", cmdPrefix)
		}

		flagAsnUpdatedAtValue, err := cmd.Flags().GetString(flagAsnUpdatedAtName)
		if err != nil {
			return err, false
		}
		m.AsnUpdatedAt = flagAsnUpdatedAtValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIpservicesIPSummaryDataPropBannerFlags(depth int, m *models.IpservicesIPSummaryData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagBannerName := fmt.Sprintf("%v.banner", cmdPrefix)
	if cmd.Flags().Changed(flagBannerName) {
		// warning: banner array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIpservicesIPSummaryDataPropDomainsFlags(depth int, m *models.IpservicesIPSummaryData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDomainsName := fmt.Sprintf("%v.domains", cmdPrefix)
	if cmd.Flags().Changed(flagDomainsName) {
		// warning: domains array type []*IPDomain is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIpservicesIPSummaryDataPropHostnamesFlags(depth int, m *models.IpservicesIPSummaryData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagHostnamesName := fmt.Sprintf("%v.hostnames", cmdPrefix)
	if cmd.Flags().Changed(flagHostnamesName) {
		// warning: hostnames array type []*IPHostname is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIpservicesIPSummaryDataPropIPFlags(depth int, m *models.IpservicesIPSummaryData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIPName := fmt.Sprintf("%v.ip", cmdPrefix)
	if cmd.Flags().Changed(flagIPName) {

		var flagIPName string
		if cmdPrefix == "" {
			flagIPName = "ip"
		} else {
			flagIPName = fmt.Sprintf("%v.ip", cmdPrefix)
		}

		flagIPValue, err := cmd.Flags().GetString(flagIPName)
		if err != nil {
			return err, false
		}
		m.IP = flagIPValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIpservicesIPSummaryDataPropIsIPV4Flags(depth int, m *models.IpservicesIPSummaryData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIsIPV4Name := fmt.Sprintf("%v.is_ipv4", cmdPrefix)
	if cmd.Flags().Changed(flagIsIPV4Name) {

		var flagIsIPV4Name string
		if cmdPrefix == "" {
			flagIsIPV4Name = "is_ipv4"
		} else {
			flagIsIPV4Name = fmt.Sprintf("%v.is_ipv4", cmdPrefix)
		}

		flagIsIPV4Value, err := cmd.Flags().GetBool(flagIsIPV4Name)
		if err != nil {
			return err, false
		}
		m.IsIPV4 = flagIsIPV4Value

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIpservicesIPSummaryDataPropIsIPV6Flags(depth int, m *models.IpservicesIPSummaryData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIsIPV6Name := fmt.Sprintf("%v.is_ipv6", cmdPrefix)
	if cmd.Flags().Changed(flagIsIPV6Name) {

		var flagIsIPV6Name string
		if cmdPrefix == "" {
			flagIsIPV6Name = "is_ipv6"
		} else {
			flagIsIPV6Name = fmt.Sprintf("%v.is_ipv6", cmdPrefix)
		}

		flagIsIPV6Value, err := cmd.Flags().GetBool(flagIsIPV6Name)
		if err != nil {
			return err, false
		}
		m.IsIPV6 = flagIsIPV6Value

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIpservicesIPSummaryDataPropIsVulnFlags(depth int, m *models.IpservicesIPSummaryData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIsVulnName := fmt.Sprintf("%v.is_vuln", cmdPrefix)
	if cmd.Flags().Changed(flagIsVulnName) {

		var flagIsVulnName string
		if cmdPrefix == "" {
			flagIsVulnName = "is_vuln"
		} else {
			flagIsVulnName = fmt.Sprintf("%v.is_vuln", cmdPrefix)
		}

		flagIsVulnValue, err := cmd.Flags().GetBool(flagIsVulnName)
		if err != nil {
			return err, false
		}
		m.IsVuln = flagIsVulnValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIpservicesIPSummaryDataPropLastUpdatedAtFlags(depth int, m *models.IpservicesIPSummaryData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLastUpdatedAtName := fmt.Sprintf("%v.last_updated_at", cmdPrefix)
	if cmd.Flags().Changed(flagLastUpdatedAtName) {

		var flagLastUpdatedAtName string
		if cmdPrefix == "" {
			flagLastUpdatedAtName = "last_updated_at"
		} else {
			flagLastUpdatedAtName = fmt.Sprintf("%v.last_updated_at", cmdPrefix)
		}

		flagLastUpdatedAtValue, err := cmd.Flags().GetString(flagLastUpdatedAtName)
		if err != nil {
			return err, false
		}
		m.LastUpdatedAt = flagLastUpdatedAtValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIpservicesIPSummaryDataPropLocationFlags(depth int, m *models.IpservicesIPSummaryData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLocationName := fmt.Sprintf("%v.location", cmdPrefix)
	if cmd.Flags().Changed(flagLocationName) {
		// info: complex object location IPLocation is retrieved outside this Changed() block
	}
	flagLocationValue := m.Location
	if swag.IsZero(flagLocationValue) {
		flagLocationValue = &models.IPLocation{}
	}

	err, LocationAdded := retrieveModelIPLocationFlags(depth+1, flagLocationValue, flagLocationName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LocationAdded
	if LocationAdded {
		m.Location = flagLocationValue
	}

	return nil, retAdded
}

func retrieveIpservicesIPSummaryDataPropLocationUpdatedAtFlags(depth int, m *models.IpservicesIPSummaryData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLocationUpdatedAtName := fmt.Sprintf("%v.location_updated_at", cmdPrefix)
	if cmd.Flags().Changed(flagLocationUpdatedAtName) {

		var flagLocationUpdatedAtName string
		if cmdPrefix == "" {
			flagLocationUpdatedAtName = "location_updated_at"
		} else {
			flagLocationUpdatedAtName = fmt.Sprintf("%v.location_updated_at", cmdPrefix)
		}

		flagLocationUpdatedAtValue, err := cmd.Flags().GetString(flagLocationUpdatedAtName)
		if err != nil {
			return err, false
		}
		m.LocationUpdatedAt = flagLocationUpdatedAtValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIpservicesIPSummaryDataPropScanIDFlags(depth int, m *models.IpservicesIPSummaryData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagScanIDName := fmt.Sprintf("%v.scan_id", cmdPrefix)
	if cmd.Flags().Changed(flagScanIDName) {

		var flagScanIDName string
		if cmdPrefix == "" {
			flagScanIDName = "scan_id"
		} else {
			flagScanIDName = fmt.Sprintf("%v.scan_id", cmdPrefix)
		}

		flagScanIDValue, err := cmd.Flags().GetInt64(flagScanIDName)
		if err != nil {
			return err, false
		}
		m.ScanID = flagScanIDValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIpservicesIPSummaryDataPropServicesFlags(depth int, m *models.IpservicesIPSummaryData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagServicesName := fmt.Sprintf("%v.services", cmdPrefix)
	if cmd.Flags().Changed(flagServicesName) {
		// warning: services array type []*IPService is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIpservicesIPSummaryDataPropServicesHashFlags(depth int, m *models.IpservicesIPSummaryData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagServicesHashName := fmt.Sprintf("%v.services_hash", cmdPrefix)
	if cmd.Flags().Changed(flagServicesHashName) {

		var flagServicesHashName string
		if cmdPrefix == "" {
			flagServicesHashName = "services_hash"
		} else {
			flagServicesHashName = fmt.Sprintf("%v.services_hash", cmdPrefix)
		}

		flagServicesHashValue, err := cmd.Flags().GetString(flagServicesHashName)
		if err != nil {
			return err, false
		}
		m.ServicesHash = flagServicesHashValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveIpservicesIPSummaryDataPropTagsFlags(depth int, m *models.IpservicesIPSummaryData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTagsName := fmt.Sprintf("%v.tags", cmdPrefix)
	if cmd.Flags().Changed(flagTagsName) {
		// warning: tags array type []*IPTag is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveIpservicesIPSummaryDataPropWhoisFlags(depth int, m *models.IpservicesIPSummaryData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagWhoisName := fmt.Sprintf("%v.whois", cmdPrefix)
	if cmd.Flags().Changed(flagWhoisName) {
		// info: complex object whois IPWhois is retrieved outside this Changed() block
	}
	flagWhoisValue := m.Whois
	if swag.IsZero(flagWhoisValue) {
		flagWhoisValue = &models.IPWhois{}
	}

	err, WhoisAdded := retrieveModelIPWhoisFlags(depth+1, flagWhoisValue, flagWhoisName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WhoisAdded
	if WhoisAdded {
		m.Whois = flagWhoisValue
	}

	return nil, retAdded
}

func retrieveIpservicesIPSummaryDataPropWhoisUpdatedAtFlags(depth int, m *models.IpservicesIPSummaryData, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagWhoisUpdatedAtName := fmt.Sprintf("%v.whois_updated_at", cmdPrefix)
	if cmd.Flags().Changed(flagWhoisUpdatedAtName) {

		var flagWhoisUpdatedAtName string
		if cmdPrefix == "" {
			flagWhoisUpdatedAtName = "whois_updated_at"
		} else {
			flagWhoisUpdatedAtName = fmt.Sprintf("%v.whois_updated_at", cmdPrefix)
		}

		flagWhoisUpdatedAtValue, err := cmd.Flags().GetString(flagWhoisUpdatedAtName)
		if err != nil {
			return err, false
		}
		m.WhoisUpdatedAt = flagWhoisUpdatedAtValue

		retAdded = true
	}

	return nil, retAdded
}
