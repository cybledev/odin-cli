// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for CybleComOdinAPIControllersV2FieldsField

// register flags to command
func registerModelCybleComOdinAPIControllersV2FieldsFieldFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCybleComOdinAPIControllersV2FieldsFieldPropCategory(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCybleComOdinAPIControllersV2FieldsFieldPropDisplayCategory(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCybleComOdinAPIControllersV2FieldsFieldPropIsLocked(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCybleComOdinAPIControllersV2FieldsFieldPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCybleComOdinAPIControllersV2FieldsFieldPropCategory(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCategoryDescription := ``

	var flagCategoryName string
	if cmdPrefix == "" {
		flagCategoryName = "category"
	} else {
		flagCategoryName = fmt.Sprintf("%v.category", cmdPrefix)
	}

	var flagCategoryDefault string

	_ = cmd.PersistentFlags().String(flagCategoryName, flagCategoryDefault, flagCategoryDescription)

	return nil
}

func registerCybleComOdinAPIControllersV2FieldsFieldPropDisplayCategory(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagDisplayCategoryDescription := ``

	var flagDisplayCategoryName string
	if cmdPrefix == "" {
		flagDisplayCategoryName = "display_category"
	} else {
		flagDisplayCategoryName = fmt.Sprintf("%v.display_category", cmdPrefix)
	}

	var flagDisplayCategoryDefault string

	_ = cmd.PersistentFlags().String(flagDisplayCategoryName, flagDisplayCategoryDefault, flagDisplayCategoryDescription)

	return nil
}

func registerCybleComOdinAPIControllersV2FieldsFieldPropIsLocked(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIsLockedDescription := `requires user subscription upgrade to access`

	var flagIsLockedName string
	if cmdPrefix == "" {
		flagIsLockedName = "is_locked"
	} else {
		flagIsLockedName = fmt.Sprintf("%v.is_locked", cmdPrefix)
	}

	var flagIsLockedDefault bool

	_ = cmd.PersistentFlags().Bool(flagIsLockedName, flagIsLockedDefault, flagIsLockedDescription)

	return nil
}

func registerCybleComOdinAPIControllersV2FieldsFieldPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := ``

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCybleComOdinAPIControllersV2FieldsFieldFlags(depth int, m *models.CybleComOdinAPIControllersV2FieldsField, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CategoryAdded := retrieveCybleComOdinAPIControllersV2FieldsFieldPropCategoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CategoryAdded

	err, DisplayCategoryAdded := retrieveCybleComOdinAPIControllersV2FieldsFieldPropDisplayCategoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DisplayCategoryAdded

	err, IsLockedAdded := retrieveCybleComOdinAPIControllersV2FieldsFieldPropIsLockedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IsLockedAdded

	err, NameAdded := retrieveCybleComOdinAPIControllersV2FieldsFieldPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	return nil, retAdded
}

func retrieveCybleComOdinAPIControllersV2FieldsFieldPropCategoryFlags(depth int, m *models.CybleComOdinAPIControllersV2FieldsField, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCategoryName := fmt.Sprintf("%v.category", cmdPrefix)
	if cmd.Flags().Changed(flagCategoryName) {

		var flagCategoryName string
		if cmdPrefix == "" {
			flagCategoryName = "category"
		} else {
			flagCategoryName = fmt.Sprintf("%v.category", cmdPrefix)
		}

		flagCategoryValue, err := cmd.Flags().GetString(flagCategoryName)
		if err != nil {
			return err, false
		}
		m.Category = flagCategoryValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCybleComOdinAPIControllersV2FieldsFieldPropDisplayCategoryFlags(depth int, m *models.CybleComOdinAPIControllersV2FieldsField, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDisplayCategoryName := fmt.Sprintf("%v.display_category", cmdPrefix)
	if cmd.Flags().Changed(flagDisplayCategoryName) {

		var flagDisplayCategoryName string
		if cmdPrefix == "" {
			flagDisplayCategoryName = "display_category"
		} else {
			flagDisplayCategoryName = fmt.Sprintf("%v.display_category", cmdPrefix)
		}

		flagDisplayCategoryValue, err := cmd.Flags().GetString(flagDisplayCategoryName)
		if err != nil {
			return err, false
		}
		m.DisplayCategory = flagDisplayCategoryValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCybleComOdinAPIControllersV2FieldsFieldPropIsLockedFlags(depth int, m *models.CybleComOdinAPIControllersV2FieldsField, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIsLockedName := fmt.Sprintf("%v.is_locked", cmdPrefix)
	if cmd.Flags().Changed(flagIsLockedName) {

		var flagIsLockedName string
		if cmdPrefix == "" {
			flagIsLockedName = "is_locked"
		} else {
			flagIsLockedName = fmt.Sprintf("%v.is_locked", cmdPrefix)
		}

		flagIsLockedValue, err := cmd.Flags().GetBool(flagIsLockedName)
		if err != nil {
			return err, false
		}
		m.IsLocked = flagIsLockedValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCybleComOdinAPIControllersV2FieldsFieldPropNameFlags(depth int, m *models.CybleComOdinAPIControllersV2FieldsField, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = flagNameValue

		retAdded = true
	}

	return nil, retAdded
}
