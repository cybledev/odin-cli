// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// Schema cli for CertificateCertificateSearchResponse

// register flags to command
func registerModelCertificateCertificateSearchResponseFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCertificateCertificateSearchResponsePropData(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateSearchResponsePropMessage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateSearchResponsePropPagination(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateSearchResponsePropSuccess(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateSearchResponsePropData(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: data []*CertificateCertificateSearchData array type is not supported by go-swagger cli yet

	return nil
}

func registerCertificateCertificateSearchResponsePropMessage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagMessageDescription := ``

	var flagMessageName string
	if cmdPrefix == "" {
		flagMessageName = "message"
	} else {
		flagMessageName = fmt.Sprintf("%v.message", cmdPrefix)
	}

	var flagMessageDefault string

	_ = cmd.PersistentFlags().String(flagMessageName, flagMessageDefault, flagMessageDescription)

	return nil
}

func registerCertificateCertificateSearchResponsePropPagination(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var flagPaginationName string
	if cmdPrefix == "" {
		flagPaginationName = "pagination"
	} else {
		flagPaginationName = fmt.Sprintf("%v.pagination", cmdPrefix)
	}

	if err := registerModelCertificateCertificateSearchResponsePaginationFlags(depth+1, flagPaginationName, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateSearchResponsePropSuccess(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagSuccessDescription := ``

	var flagSuccessName string
	if cmdPrefix == "" {
		flagSuccessName = "success"
	} else {
		flagSuccessName = fmt.Sprintf("%v.success", cmdPrefix)
	}

	var flagSuccessDefault bool

	_ = cmd.PersistentFlags().Bool(flagSuccessName, flagSuccessDefault, flagSuccessDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCertificateCertificateSearchResponseFlags(depth int, m *models.CertificateCertificateSearchResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, DataAdded := retrieveCertificateCertificateSearchResponsePropDataFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || DataAdded

	err, MessageAdded := retrieveCertificateCertificateSearchResponsePropMessageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || MessageAdded

	err, PaginationAdded := retrieveCertificateCertificateSearchResponsePropPaginationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PaginationAdded

	err, SuccessAdded := retrieveCertificateCertificateSearchResponsePropSuccessFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || SuccessAdded

	return nil, retAdded
}

func retrieveCertificateCertificateSearchResponsePropDataFlags(depth int, m *models.CertificateCertificateSearchResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagDataName := fmt.Sprintf("%v.data", cmdPrefix)
	if cmd.Flags().Changed(flagDataName) {
		// warning: data array type []*CertificateCertificateSearchData is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveCertificateCertificateSearchResponsePropMessageFlags(depth int, m *models.CertificateCertificateSearchResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagMessageName := fmt.Sprintf("%v.message", cmdPrefix)
	if cmd.Flags().Changed(flagMessageName) {

		var flagMessageName string
		if cmdPrefix == "" {
			flagMessageName = "message"
		} else {
			flagMessageName = fmt.Sprintf("%v.message", cmdPrefix)
		}

		flagMessageValue, err := cmd.Flags().GetString(flagMessageName)
		if err != nil {
			return err, false
		}
		m.Message = flagMessageValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateCertificateSearchResponsePropPaginationFlags(depth int, m *models.CertificateCertificateSearchResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPaginationName := fmt.Sprintf("%v.pagination", cmdPrefix)
	if cmd.Flags().Changed(flagPaginationName) {
		// info: complex object pagination CertificateCertificateSearchResponsePagination is retrieved outside this Changed() block
	}
	flagPaginationValue := m.Pagination
	if swag.IsZero(flagPaginationValue) {
		flagPaginationValue = &models.CertificateCertificateSearchResponsePagination{}
	}

	err, PaginationAdded := retrieveModelCertificateCertificateSearchResponsePaginationFlags(depth+1, flagPaginationValue, flagPaginationName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PaginationAdded
	if PaginationAdded {
		m.Pagination = flagPaginationValue
	}

	return nil, retAdded
}

func retrieveCertificateCertificateSearchResponsePropSuccessFlags(depth int, m *models.CertificateCertificateSearchResponse, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagSuccessName := fmt.Sprintf("%v.success", cmdPrefix)
	if cmd.Flags().Changed(flagSuccessName) {

		var flagSuccessName string
		if cmdPrefix == "" {
			flagSuccessName = "success"
		} else {
			flagSuccessName = fmt.Sprintf("%v.success", cmdPrefix)
		}

		flagSuccessValue, err := cmd.Flags().GetBool(flagSuccessName)
		if err != nil {
			return err, false
		}
		m.Success = flagSuccessValue

		retAdded = true
	}

	return nil, retAdded
}

// Extra schema cli for CertificateCertificateSearchResponsePagination

// register flags to command
func registerModelCertificateCertificateSearchResponsePaginationFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerCertificateCertificateSearchResponsePaginationPropLast(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateSearchResponsePaginationPropLimit(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateSearchResponsePaginationPropStart(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerCertificateCertificateSearchResponsePaginationPropTotal(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerCertificateCertificateSearchResponsePaginationPropLast(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: last []float64 array type is not supported by go-swagger cli yet

	return nil
}

func registerCertificateCertificateSearchResponsePaginationPropLimit(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagLimitDescription := ``

	var flagLimitName string
	if cmdPrefix == "" {
		flagLimitName = "limit"
	} else {
		flagLimitName = fmt.Sprintf("%v.limit", cmdPrefix)
	}

	var flagLimitDefault int64

	_ = cmd.PersistentFlags().Int64(flagLimitName, flagLimitDefault, flagLimitDescription)

	return nil
}

func registerCertificateCertificateSearchResponsePaginationPropStart(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: start []float64 array type is not supported by go-swagger cli yet

	return nil
}

func registerCertificateCertificateSearchResponsePaginationPropTotal(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagTotalDescription := ``

	var flagTotalName string
	if cmdPrefix == "" {
		flagTotalName = "total"
	} else {
		flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
	}

	var flagTotalDefault int64

	_ = cmd.PersistentFlags().Int64(flagTotalName, flagTotalDefault, flagTotalDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelCertificateCertificateSearchResponsePaginationFlags(depth int, m *models.CertificateCertificateSearchResponsePagination, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, LastAdded := retrieveCertificateCertificateSearchResponsePaginationPropLastFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LastAdded

	err, LimitAdded := retrieveCertificateCertificateSearchResponsePaginationPropLimitFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LimitAdded

	err, StartAdded := retrieveCertificateCertificateSearchResponsePaginationPropStartFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || StartAdded

	err, TotalAdded := retrieveCertificateCertificateSearchResponsePaginationPropTotalFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || TotalAdded

	return nil, retAdded
}

func retrieveCertificateCertificateSearchResponsePaginationPropLastFlags(depth int, m *models.CertificateCertificateSearchResponsePagination, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLastName := fmt.Sprintf("%v.last", cmdPrefix)
	if cmd.Flags().Changed(flagLastName) {
		// warning: last array type []float64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveCertificateCertificateSearchResponsePaginationPropLimitFlags(depth int, m *models.CertificateCertificateSearchResponsePagination, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLimitName := fmt.Sprintf("%v.limit", cmdPrefix)
	if cmd.Flags().Changed(flagLimitName) {

		var flagLimitName string
		if cmdPrefix == "" {
			flagLimitName = "limit"
		} else {
			flagLimitName = fmt.Sprintf("%v.limit", cmdPrefix)
		}

		flagLimitValue, err := cmd.Flags().GetInt64(flagLimitName)
		if err != nil {
			return err, false
		}
		m.Limit = flagLimitValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveCertificateCertificateSearchResponsePaginationPropStartFlags(depth int, m *models.CertificateCertificateSearchResponsePagination, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagStartName := fmt.Sprintf("%v.start", cmdPrefix)
	if cmd.Flags().Changed(flagStartName) {
		// warning: start array type []float64 is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveCertificateCertificateSearchResponsePaginationPropTotalFlags(depth int, m *models.CertificateCertificateSearchResponsePagination, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagTotalName := fmt.Sprintf("%v.total", cmdPrefix)
	if cmd.Flags().Changed(flagTotalName) {

		var flagTotalName string
		if cmdPrefix == "" {
			flagTotalName = "total"
		} else {
			flagTotalName = fmt.Sprintf("%v.total", cmdPrefix)
		}

		flagTotalValue, err := cmd.Flags().GetInt64(flagTotalName)
		if err != nil {
			return err, false
		}
		m.Total = flagTotalValue

		retAdded = true
	}

	return nil, retAdded
}
