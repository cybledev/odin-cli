// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for SchemaRegistrar

// register flags to command
func registerModelSchemaRegistrarFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSchemaRegistrarPropID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaRegistrarPropName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaRegistrarPropURL(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaRegistrarPropWhois(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSchemaRegistrarPropID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIDDescription := `Adjusted field name for clarity`

	var flagIDName string
	if cmdPrefix == "" {
		flagIDName = "id"
	} else {
		flagIDName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var flagIDDefault string

	_ = cmd.PersistentFlags().String(flagIDName, flagIDDefault, flagIDDescription)

	return nil
}

func registerSchemaRegistrarPropName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagNameDescription := ``

	var flagNameName string
	if cmdPrefix == "" {
		flagNameName = "name"
	} else {
		flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var flagNameDefault string

	_ = cmd.PersistentFlags().String(flagNameName, flagNameDefault, flagNameDescription)

	return nil
}

func registerSchemaRegistrarPropURL(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagURLDescription := ``

	var flagURLName string
	if cmdPrefix == "" {
		flagURLName = "url"
	} else {
		flagURLName = fmt.Sprintf("%v.url", cmdPrefix)
	}

	var flagURLDefault string

	_ = cmd.PersistentFlags().String(flagURLName, flagURLDefault, flagURLDescription)

	return nil
}

func registerSchemaRegistrarPropWhois(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagWhoisDescription := ``

	var flagWhoisName string
	if cmdPrefix == "" {
		flagWhoisName = "whois"
	} else {
		flagWhoisName = fmt.Sprintf("%v.whois", cmdPrefix)
	}

	var flagWhoisDefault string

	_ = cmd.PersistentFlags().String(flagWhoisName, flagWhoisDefault, flagWhoisDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSchemaRegistrarFlags(depth int, m *models.SchemaRegistrar, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, IDAdded := retrieveSchemaRegistrarPropIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IDAdded

	err, NameAdded := retrieveSchemaRegistrarPropNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || NameAdded

	err, URLAdded := retrieveSchemaRegistrarPropURLFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || URLAdded

	err, WhoisAdded := retrieveSchemaRegistrarPropWhoisFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || WhoisAdded

	return nil, retAdded
}

func retrieveSchemaRegistrarPropIDFlags(depth int, m *models.SchemaRegistrar, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIDName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(flagIDName) {

		var flagIDName string
		if cmdPrefix == "" {
			flagIDName = "id"
		} else {
			flagIDName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		flagIDValue, err := cmd.Flags().GetString(flagIDName)
		if err != nil {
			return err, false
		}
		m.ID = flagIDValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSchemaRegistrarPropNameFlags(depth int, m *models.SchemaRegistrar, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagNameName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(flagNameName) {

		var flagNameName string
		if cmdPrefix == "" {
			flagNameName = "name"
		} else {
			flagNameName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		flagNameValue, err := cmd.Flags().GetString(flagNameName)
		if err != nil {
			return err, false
		}
		m.Name = flagNameValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSchemaRegistrarPropURLFlags(depth int, m *models.SchemaRegistrar, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagURLName := fmt.Sprintf("%v.url", cmdPrefix)
	if cmd.Flags().Changed(flagURLName) {

		var flagURLName string
		if cmdPrefix == "" {
			flagURLName = "url"
		} else {
			flagURLName = fmt.Sprintf("%v.url", cmdPrefix)
		}

		flagURLValue, err := cmd.Flags().GetString(flagURLName)
		if err != nil {
			return err, false
		}
		m.URL = flagURLValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSchemaRegistrarPropWhoisFlags(depth int, m *models.SchemaRegistrar, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagWhoisName := fmt.Sprintf("%v.whois", cmdPrefix)
	if cmd.Flags().Changed(flagWhoisName) {

		var flagWhoisName string
		if cmdPrefix == "" {
			flagWhoisName = "whois"
		} else {
			flagWhoisName = fmt.Sprintf("%v.whois", cmdPrefix)
		}

		flagWhoisValue, err := cmd.Flags().GetString(flagWhoisName)
		if err != nil {
			return err, false
		}
		m.Whois = flagWhoisValue

		retAdded = true
	}

	return nil, retAdded
}
