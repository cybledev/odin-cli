// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for ServiceIPServiceSoftware

// register flags to command
func registerModelServiceIPServiceSoftwareFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerServiceIPServiceSoftwarePropEdition(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceIPServiceSoftwarePropLanguage(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceIPServiceSoftwarePropPart(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceIPServiceSoftwarePropProduct(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceIPServiceSoftwarePropUpdate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceIPServiceSoftwarePropURI(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceIPServiceSoftwarePropVendor(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerServiceIPServiceSoftwarePropVersion(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerServiceIPServiceSoftwarePropEdition(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: edition interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerServiceIPServiceSoftwarePropLanguage(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: language interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerServiceIPServiceSoftwarePropPart(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: part interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerServiceIPServiceSoftwarePropProduct(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: product interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerServiceIPServiceSoftwarePropUpdate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: update interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerServiceIPServiceSoftwarePropURI(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagURIDescription := ``

	var flagURIName string
	if cmdPrefix == "" {
		flagURIName = "uri"
	} else {
		flagURIName = fmt.Sprintf("%v.uri", cmdPrefix)
	}

	var flagURIDefault string

	_ = cmd.PersistentFlags().String(flagURIName, flagURIDefault, flagURIDescription)

	return nil
}

func registerServiceIPServiceSoftwarePropVendor(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: vendor interface{} map type is not supported by go-swagger cli yet

	return nil
}

func registerServiceIPServiceSoftwarePropVersion(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: version interface{} map type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelServiceIPServiceSoftwareFlags(depth int, m *models.ServiceIPServiceSoftware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, EditionAdded := retrieveServiceIPServiceSoftwarePropEditionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || EditionAdded

	err, LanguageAdded := retrieveServiceIPServiceSoftwarePropLanguageFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || LanguageAdded

	err, PartAdded := retrieveServiceIPServiceSoftwarePropPartFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || PartAdded

	err, ProductAdded := retrieveServiceIPServiceSoftwarePropProductFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ProductAdded

	err, UpdateAdded := retrieveServiceIPServiceSoftwarePropUpdateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UpdateAdded

	err, URIAdded := retrieveServiceIPServiceSoftwarePropURIFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || URIAdded

	err, VendorAdded := retrieveServiceIPServiceSoftwarePropVendorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VendorAdded

	err, VersionAdded := retrieveServiceIPServiceSoftwarePropVersionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || VersionAdded

	return nil, retAdded
}

func retrieveServiceIPServiceSoftwarePropEditionFlags(depth int, m *models.ServiceIPServiceSoftware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagEditionName := fmt.Sprintf("%v.edition", cmdPrefix)
	if cmd.Flags().Changed(flagEditionName) {
		// warning: edition map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveServiceIPServiceSoftwarePropLanguageFlags(depth int, m *models.ServiceIPServiceSoftware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagLanguageName := fmt.Sprintf("%v.language", cmdPrefix)
	if cmd.Flags().Changed(flagLanguageName) {
		// warning: language map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveServiceIPServiceSoftwarePropPartFlags(depth int, m *models.ServiceIPServiceSoftware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagPartName := fmt.Sprintf("%v.part", cmdPrefix)
	if cmd.Flags().Changed(flagPartName) {
		// warning: part map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveServiceIPServiceSoftwarePropProductFlags(depth int, m *models.ServiceIPServiceSoftware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagProductName := fmt.Sprintf("%v.product", cmdPrefix)
	if cmd.Flags().Changed(flagProductName) {
		// warning: product map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveServiceIPServiceSoftwarePropUpdateFlags(depth int, m *models.ServiceIPServiceSoftware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUpdateName := fmt.Sprintf("%v.update", cmdPrefix)
	if cmd.Flags().Changed(flagUpdateName) {
		// warning: update map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveServiceIPServiceSoftwarePropURIFlags(depth int, m *models.ServiceIPServiceSoftware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagURIName := fmt.Sprintf("%v.uri", cmdPrefix)
	if cmd.Flags().Changed(flagURIName) {

		var flagURIName string
		if cmdPrefix == "" {
			flagURIName = "uri"
		} else {
			flagURIName = fmt.Sprintf("%v.uri", cmdPrefix)
		}

		flagURIValue, err := cmd.Flags().GetString(flagURIName)
		if err != nil {
			return err, false
		}
		m.URI = flagURIValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveServiceIPServiceSoftwarePropVendorFlags(depth int, m *models.ServiceIPServiceSoftware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVendorName := fmt.Sprintf("%v.vendor", cmdPrefix)
	if cmd.Flags().Changed(flagVendorName) {
		// warning: vendor map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveServiceIPServiceSoftwarePropVersionFlags(depth int, m *models.ServiceIPServiceSoftware, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagVersionName := fmt.Sprintf("%v.version", cmdPrefix)
	if cmd.Flags().Changed(flagVersionName) {
		// warning: version map type interface{} is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
