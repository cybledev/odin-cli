// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/cybledev/odin-cli/models"
	"github.com/spf13/cobra"
)

// Schema cli for SchemaAudit

// register flags to command
func registerModelSchemaAuditFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerSchemaAuditPropCreatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaAuditPropExpiresDate(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaAuditPropIsModified(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerSchemaAuditPropUpdatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerSchemaAuditPropCreatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagCreatedAtDescription := ``

	var flagCreatedAtName string
	if cmdPrefix == "" {
		flagCreatedAtName = "created_at"
	} else {
		flagCreatedAtName = fmt.Sprintf("%v.created_at", cmdPrefix)
	}

	var flagCreatedAtDefault string

	_ = cmd.PersistentFlags().String(flagCreatedAtName, flagCreatedAtDefault, flagCreatedAtDescription)

	return nil
}

func registerSchemaAuditPropExpiresDate(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagExpiresDateDescription := ``

	var flagExpiresDateName string
	if cmdPrefix == "" {
		flagExpiresDateName = "expires_date"
	} else {
		flagExpiresDateName = fmt.Sprintf("%v.expires_date", cmdPrefix)
	}

	var flagExpiresDateDefault string

	_ = cmd.PersistentFlags().String(flagExpiresDateName, flagExpiresDateDefault, flagExpiresDateDescription)

	return nil
}

func registerSchemaAuditPropIsModified(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagIsModifiedDescription := `is audit logic applied (update in dates to fix invalid values)`

	var flagIsModifiedName string
	if cmdPrefix == "" {
		flagIsModifiedName = "is_modified"
	} else {
		flagIsModifiedName = fmt.Sprintf("%v.is_modified", cmdPrefix)
	}

	var flagIsModifiedDefault bool

	_ = cmd.PersistentFlags().Bool(flagIsModifiedName, flagIsModifiedDefault, flagIsModifiedDescription)

	return nil
}

func registerSchemaAuditPropUpdatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	flagUpdatedAtDescription := ``

	var flagUpdatedAtName string
	if cmdPrefix == "" {
		flagUpdatedAtName = "updated_at"
	} else {
		flagUpdatedAtName = fmt.Sprintf("%v.updated_at", cmdPrefix)
	}

	var flagUpdatedAtDefault string

	_ = cmd.PersistentFlags().String(flagUpdatedAtName, flagUpdatedAtDefault, flagUpdatedAtDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelSchemaAuditFlags(depth int, m *models.SchemaAudit, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, CreatedAtAdded := retrieveSchemaAuditPropCreatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || CreatedAtAdded

	err, ExpiresDateAdded := retrieveSchemaAuditPropExpiresDateFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ExpiresDateAdded

	err, IsModifiedAdded := retrieveSchemaAuditPropIsModifiedFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || IsModifiedAdded

	err, UpdatedAtAdded := retrieveSchemaAuditPropUpdatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || UpdatedAtAdded

	return nil, retAdded
}

func retrieveSchemaAuditPropCreatedAtFlags(depth int, m *models.SchemaAudit, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagCreatedAtName := fmt.Sprintf("%v.created_at", cmdPrefix)
	if cmd.Flags().Changed(flagCreatedAtName) {

		var flagCreatedAtName string
		if cmdPrefix == "" {
			flagCreatedAtName = "created_at"
		} else {
			flagCreatedAtName = fmt.Sprintf("%v.created_at", cmdPrefix)
		}

		flagCreatedAtValue, err := cmd.Flags().GetString(flagCreatedAtName)
		if err != nil {
			return err, false
		}
		m.CreatedAt = flagCreatedAtValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSchemaAuditPropExpiresDateFlags(depth int, m *models.SchemaAudit, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagExpiresDateName := fmt.Sprintf("%v.expires_date", cmdPrefix)
	if cmd.Flags().Changed(flagExpiresDateName) {

		var flagExpiresDateName string
		if cmdPrefix == "" {
			flagExpiresDateName = "expires_date"
		} else {
			flagExpiresDateName = fmt.Sprintf("%v.expires_date", cmdPrefix)
		}

		flagExpiresDateValue, err := cmd.Flags().GetString(flagExpiresDateName)
		if err != nil {
			return err, false
		}
		m.ExpiresDate = flagExpiresDateValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSchemaAuditPropIsModifiedFlags(depth int, m *models.SchemaAudit, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagIsModifiedName := fmt.Sprintf("%v.is_modified", cmdPrefix)
	if cmd.Flags().Changed(flagIsModifiedName) {

		var flagIsModifiedName string
		if cmdPrefix == "" {
			flagIsModifiedName = "is_modified"
		} else {
			flagIsModifiedName = fmt.Sprintf("%v.is_modified", cmdPrefix)
		}

		flagIsModifiedValue, err := cmd.Flags().GetBool(flagIsModifiedName)
		if err != nil {
			return err, false
		}
		m.IsModified = flagIsModifiedValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveSchemaAuditPropUpdatedAtFlags(depth int, m *models.SchemaAudit, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	flagUpdatedAtName := fmt.Sprintf("%v.updated_at", cmdPrefix)
	if cmd.Flags().Changed(flagUpdatedAtName) {

		var flagUpdatedAtName string
		if cmdPrefix == "" {
			flagUpdatedAtName = "updated_at"
		} else {
			flagUpdatedAtName = fmt.Sprintf("%v.updated_at", cmdPrefix)
		}

		flagUpdatedAtValue, err := cmd.Flags().GetString(flagUpdatedAtName)
		if err != nil {
			return err, false
		}
		m.UpdatedAt = flagUpdatedAtValue

		retAdded = true
	}

	return nil, retAdded
}
