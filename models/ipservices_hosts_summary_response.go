// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IpservicesHostsSummaryResponse ipservices hosts summary response
//
// swagger:model ipservices.HostsSummaryResponse
type IpservicesHostsSummaryResponse struct {

	// data
	Data *IpservicesHostsSummaryResponseData `json:"data,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// success
	Success bool `json:"success,omitempty"`
}

// Validate validates this ipservices hosts summary response
func (m *IpservicesHostsSummaryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpservicesHostsSummaryResponse) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ipservices hosts summary response based on the context it is used
func (m *IpservicesHostsSummaryResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpservicesHostsSummaryResponse) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {

		if swag.IsZero(m.Data) { // not required
			return nil
		}

		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IpservicesHostsSummaryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpservicesHostsSummaryResponse) UnmarshalBinary(b []byte) error {
	var res IpservicesHostsSummaryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IpservicesHostsSummaryResponseData ipservices hosts summary response data
//
// swagger:model IpservicesHostsSummaryResponseData
type IpservicesHostsSummaryResponseData struct {

	// buckets
	Buckets []*IpservicesHostsSummaryResponseDataBucketsItems0 `json:"buckets"`

	// doc count error upper bound
	DocCountErrorUpperBound int64 `json:"doc_count_error_upper_bound,omitempty"`

	// sum other doc count
	SumOtherDocCount int64 `json:"sum_other_doc_count,omitempty"`
}

// Validate validates this ipservices hosts summary response data
func (m *IpservicesHostsSummaryResponseData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuckets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpservicesHostsSummaryResponseData) validateBuckets(formats strfmt.Registry) error {
	if swag.IsZero(m.Buckets) { // not required
		return nil
	}

	for i := 0; i < len(m.Buckets); i++ {
		if swag.IsZero(m.Buckets[i]) { // not required
			continue
		}

		if m.Buckets[i] != nil {
			if err := m.Buckets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + "buckets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + "buckets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this ipservices hosts summary response data based on the context it is used
func (m *IpservicesHostsSummaryResponseData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBuckets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpservicesHostsSummaryResponseData) contextValidateBuckets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Buckets); i++ {

		if m.Buckets[i] != nil {

			if swag.IsZero(m.Buckets[i]) { // not required
				return nil
			}

			if err := m.Buckets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + "buckets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + "buckets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IpservicesHostsSummaryResponseData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpservicesHostsSummaryResponseData) UnmarshalBinary(b []byte) error {
	var res IpservicesHostsSummaryResponseData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IpservicesHostsSummaryResponseDataBucketsItems0 ipservices hosts summary response data buckets items0
//
// swagger:model IpservicesHostsSummaryResponseDataBucketsItems0
type IpservicesHostsSummaryResponseDataBucketsItems0 struct {

	// doc count
	DocCount int64 `json:"doc_count,omitempty"`

	// key
	Key interface{} `json:"key,omitempty"`
}

// Validate validates this ipservices hosts summary response data buckets items0
func (m *IpservicesHostsSummaryResponseDataBucketsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this ipservices hosts summary response data buckets items0 based on context it is used
func (m *IpservicesHostsSummaryResponseDataBucketsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IpservicesHostsSummaryResponseDataBucketsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpservicesHostsSummaryResponseDataBucketsItems0) UnmarshalBinary(b []byte) error {
	var res IpservicesHostsSummaryResponseDataBucketsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
