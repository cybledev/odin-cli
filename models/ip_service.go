// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IPService IP service
//
// swagger:model IPService
type IPService struct {

	// meta
	Meta *IPServiceMeta `json:"_meta,omitempty"`

	// cve
	Cve []*IPCVE `json:"cve"`

	// extra info
	ExtraInfo string `json:"extra_info,omitempty"`

	// last updated at
	LastUpdatedAt string `json:"last_updated_at,omitempty"`

	// modules
	Modules interface{} `json:"modules,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// port
	Port int64 `json:"port,omitempty"`

	// product
	Product string `json:"product,omitempty"`

	// protocol
	Protocol string `json:"protocol,omitempty"`

	// softwares
	Softwares []*IPServiceSoftware `json:"softwares"`

	// tunnel
	Tunnel string `json:"tunnel,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this IP service
func (m *IPService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCve(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftwares(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPService) validateMeta(formats strfmt.Registry) error {
	if swag.IsZero(m.Meta) { // not required
		return nil
	}

	if m.Meta != nil {
		if err := m.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_meta")
			}
			return err
		}
	}

	return nil
}

func (m *IPService) validateCve(formats strfmt.Registry) error {
	if swag.IsZero(m.Cve) { // not required
		return nil
	}

	for i := 0; i < len(m.Cve); i++ {
		if swag.IsZero(m.Cve[i]) { // not required
			continue
		}

		if m.Cve[i] != nil {
			if err := m.Cve[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cve" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cve" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IPService) validateSoftwares(formats strfmt.Registry) error {
	if swag.IsZero(m.Softwares) { // not required
		return nil
	}

	for i := 0; i < len(m.Softwares); i++ {
		if swag.IsZero(m.Softwares[i]) { // not required
			continue
		}

		if m.Softwares[i] != nil {
			if err := m.Softwares[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("softwares" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("softwares" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this IP service based on the context it is used
func (m *IPService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCve(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSoftwares(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IPService) contextValidateMeta(ctx context.Context, formats strfmt.Registry) error {

	if m.Meta != nil {

		if swag.IsZero(m.Meta) { // not required
			return nil
		}

		if err := m.Meta.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_meta")
			}
			return err
		}
	}

	return nil
}

func (m *IPService) contextValidateCve(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Cve); i++ {

		if m.Cve[i] != nil {

			if swag.IsZero(m.Cve[i]) { // not required
				return nil
			}

			if err := m.Cve[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cve" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cve" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IPService) contextValidateSoftwares(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Softwares); i++ {

		if m.Softwares[i] != nil {

			if swag.IsZero(m.Softwares[i]) { // not required
				return nil
			}

			if err := m.Softwares[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("softwares" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("softwares" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IPService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPService) UnmarshalBinary(b []byte) error {
	var res IPService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
