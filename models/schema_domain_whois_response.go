// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SchemaDomainWhoisResponse schema domain whois response
//
// swagger:model schema.DomainWhoisResponse
type SchemaDomainWhoisResponse struct {

	// administrative contact
	AdministrativeContact *SchemaContact `json:"administrative_contact,omitempty"`

	// audited fields
	AuditedFields *SchemaAudit `json:"audited_fields,omitempty"`

	// billing contact
	BillingContact *SchemaContact `json:"billing_contact,omitempty"`

	// created date
	CreatedDate string `json:"created_date,omitempty"`

	// domain name
	DomainName string `json:"domain_name,omitempty"`

	// domain status
	DomainStatus []string `json:"domain_status"`

	// expires date
	ExpiresDate string `json:"expires_date,omitempty"`

	// name servers
	NameServers []string `json:"name_servers"`

	// IngestedAt            time.Time  `json:"ingested_at"`
	RawData string `json:"raw_data,omitempty"`

	// registrant contact
	RegistrantContact *SchemaContact `json:"registrant_contact,omitempty"`

	// registrar
	Registrar *SchemaRegistrar `json:"registrar,omitempty"`

	// technical contact
	TechnicalContact *SchemaContact `json:"technical_contact,omitempty"`

	// tld
	Tld string `json:"tld,omitempty"`

	// updated date
	UpdatedDate string `json:"updated_date,omitempty"`
}

// Validate validates this schema domain whois response
func (m *SchemaDomainWhoisResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdministrativeContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuditedFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillingContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrantContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegistrar(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTechnicalContact(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchemaDomainWhoisResponse) validateAdministrativeContact(formats strfmt.Registry) error {
	if swag.IsZero(m.AdministrativeContact) { // not required
		return nil
	}

	if m.AdministrativeContact != nil {
		if err := m.AdministrativeContact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("administrative_contact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("administrative_contact")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaDomainWhoisResponse) validateAuditedFields(formats strfmt.Registry) error {
	if swag.IsZero(m.AuditedFields) { // not required
		return nil
	}

	if m.AuditedFields != nil {
		if err := m.AuditedFields.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("audited_fields")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("audited_fields")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaDomainWhoisResponse) validateBillingContact(formats strfmt.Registry) error {
	if swag.IsZero(m.BillingContact) { // not required
		return nil
	}

	if m.BillingContact != nil {
		if err := m.BillingContact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billing_contact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billing_contact")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaDomainWhoisResponse) validateRegistrantContact(formats strfmt.Registry) error {
	if swag.IsZero(m.RegistrantContact) { // not required
		return nil
	}

	if m.RegistrantContact != nil {
		if err := m.RegistrantContact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registrant_contact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registrant_contact")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaDomainWhoisResponse) validateRegistrar(formats strfmt.Registry) error {
	if swag.IsZero(m.Registrar) { // not required
		return nil
	}

	if m.Registrar != nil {
		if err := m.Registrar.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registrar")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registrar")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaDomainWhoisResponse) validateTechnicalContact(formats strfmt.Registry) error {
	if swag.IsZero(m.TechnicalContact) { // not required
		return nil
	}

	if m.TechnicalContact != nil {
		if err := m.TechnicalContact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("technical_contact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("technical_contact")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this schema domain whois response based on the context it is used
func (m *SchemaDomainWhoisResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdministrativeContact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAuditedFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBillingContact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegistrantContact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegistrar(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTechnicalContact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchemaDomainWhoisResponse) contextValidateAdministrativeContact(ctx context.Context, formats strfmt.Registry) error {

	if m.AdministrativeContact != nil {

		if swag.IsZero(m.AdministrativeContact) { // not required
			return nil
		}

		if err := m.AdministrativeContact.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("administrative_contact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("administrative_contact")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaDomainWhoisResponse) contextValidateAuditedFields(ctx context.Context, formats strfmt.Registry) error {

	if m.AuditedFields != nil {

		if swag.IsZero(m.AuditedFields) { // not required
			return nil
		}

		if err := m.AuditedFields.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("audited_fields")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("audited_fields")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaDomainWhoisResponse) contextValidateBillingContact(ctx context.Context, formats strfmt.Registry) error {

	if m.BillingContact != nil {

		if swag.IsZero(m.BillingContact) { // not required
			return nil
		}

		if err := m.BillingContact.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billing_contact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billing_contact")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaDomainWhoisResponse) contextValidateRegistrantContact(ctx context.Context, formats strfmt.Registry) error {

	if m.RegistrantContact != nil {

		if swag.IsZero(m.RegistrantContact) { // not required
			return nil
		}

		if err := m.RegistrantContact.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registrant_contact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registrant_contact")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaDomainWhoisResponse) contextValidateRegistrar(ctx context.Context, formats strfmt.Registry) error {

	if m.Registrar != nil {

		if swag.IsZero(m.Registrar) { // not required
			return nil
		}

		if err := m.Registrar.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registrar")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registrar")
			}
			return err
		}
	}

	return nil
}

func (m *SchemaDomainWhoisResponse) contextValidateTechnicalContact(ctx context.Context, formats strfmt.Registry) error {

	if m.TechnicalContact != nil {

		if swag.IsZero(m.TechnicalContact) { // not required
			return nil
		}

		if err := m.TechnicalContact.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("technical_contact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("technical_contact")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SchemaDomainWhoisResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SchemaDomainWhoisResponse) UnmarshalBinary(b []byte) error {
	var res SchemaDomainWhoisResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
