// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CertificateCertificateSearchData certificate certificate search data
//
// swagger:model certificate.CertificateSearchData
type CertificateCertificateSearchData struct {

	// fingerprint md5
	FingerprintMd5 string `json:"fingerprint_md5,omitempty"`

	// fingerprint sha1
	FingerprintSha1 string `json:"fingerprint_sha1,omitempty"`

	// fingerprint sha256
	FingerprintSha256 string `json:"fingerprint_sha256,omitempty"`

	// issuer
	Issuer *CertificateCertificateSearchDataIssuer `json:"issuer,omitempty"`

	// subject
	Subject *CertificateCertificateSearchDataSubject `json:"subject,omitempty"`

	// subject alt name
	SubjectAltName *CertificateCertificateSearchDataSubjectAltName `json:"subject_alt_name,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// validity
	Validity *CertificateCertificateSearchDataValidity `json:"validity,omitempty"`
}

// Validate validates this certificate certificate search data
func (m *CertificateCertificateSearchData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIssuer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubjectAltName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateCertificateSearchData) validateIssuer(formats strfmt.Registry) error {
	if swag.IsZero(m.Issuer) { // not required
		return nil
	}

	if m.Issuer != nil {
		if err := m.Issuer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issuer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("issuer")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateCertificateSearchData) validateSubject(formats strfmt.Registry) error {
	if swag.IsZero(m.Subject) { // not required
		return nil
	}

	if m.Subject != nil {
		if err := m.Subject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subject")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateCertificateSearchData) validateSubjectAltName(formats strfmt.Registry) error {
	if swag.IsZero(m.SubjectAltName) { // not required
		return nil
	}

	if m.SubjectAltName != nil {
		if err := m.SubjectAltName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subject_alt_name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subject_alt_name")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateCertificateSearchData) validateValidity(formats strfmt.Registry) error {
	if swag.IsZero(m.Validity) { // not required
		return nil
	}

	if m.Validity != nil {
		if err := m.Validity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("validity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this certificate certificate search data based on the context it is used
func (m *CertificateCertificateSearchData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIssuer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubjectAltName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValidity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateCertificateSearchData) contextValidateIssuer(ctx context.Context, formats strfmt.Registry) error {

	if m.Issuer != nil {

		if swag.IsZero(m.Issuer) { // not required
			return nil
		}

		if err := m.Issuer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issuer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("issuer")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateCertificateSearchData) contextValidateSubject(ctx context.Context, formats strfmt.Registry) error {

	if m.Subject != nil {

		if swag.IsZero(m.Subject) { // not required
			return nil
		}

		if err := m.Subject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subject")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateCertificateSearchData) contextValidateSubjectAltName(ctx context.Context, formats strfmt.Registry) error {

	if m.SubjectAltName != nil {

		if swag.IsZero(m.SubjectAltName) { // not required
			return nil
		}

		if err := m.SubjectAltName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subject_alt_name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subject_alt_name")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateCertificateSearchData) contextValidateValidity(ctx context.Context, formats strfmt.Registry) error {

	if m.Validity != nil {

		if swag.IsZero(m.Validity) { // not required
			return nil
		}

		if err := m.Validity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("validity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CertificateCertificateSearchData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateCertificateSearchData) UnmarshalBinary(b []byte) error {
	var res CertificateCertificateSearchData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CertificateCertificateSearchDataIssuer certificate certificate search data issuer
//
// swagger:model CertificateCertificateSearchDataIssuer
type CertificateCertificateSearchDataIssuer struct {

	// common name
	CommonName []string `json:"common_name"`

	// country
	Country []string `json:"country"`

	// organization
	Organization []string `json:"organization"`
}

// Validate validates this certificate certificate search data issuer
func (m *CertificateCertificateSearchDataIssuer) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this certificate certificate search data issuer based on context it is used
func (m *CertificateCertificateSearchDataIssuer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CertificateCertificateSearchDataIssuer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateCertificateSearchDataIssuer) UnmarshalBinary(b []byte) error {
	var res CertificateCertificateSearchDataIssuer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CertificateCertificateSearchDataSubject certificate certificate search data subject
//
// swagger:model CertificateCertificateSearchDataSubject
type CertificateCertificateSearchDataSubject struct {

	// common name
	CommonName []string `json:"common_name"`
}

// Validate validates this certificate certificate search data subject
func (m *CertificateCertificateSearchDataSubject) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this certificate certificate search data subject based on context it is used
func (m *CertificateCertificateSearchDataSubject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CertificateCertificateSearchDataSubject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateCertificateSearchDataSubject) UnmarshalBinary(b []byte) error {
	var res CertificateCertificateSearchDataSubject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CertificateCertificateSearchDataSubjectAltName certificate certificate search data subject alt name
//
// swagger:model CertificateCertificateSearchDataSubjectAltName
type CertificateCertificateSearchDataSubjectAltName struct {

	// dns names
	DNSNames []string `json:"dns_names"`
}

// Validate validates this certificate certificate search data subject alt name
func (m *CertificateCertificateSearchDataSubjectAltName) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this certificate certificate search data subject alt name based on context it is used
func (m *CertificateCertificateSearchDataSubjectAltName) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CertificateCertificateSearchDataSubjectAltName) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateCertificateSearchDataSubjectAltName) UnmarshalBinary(b []byte) error {
	var res CertificateCertificateSearchDataSubjectAltName
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CertificateCertificateSearchDataValidity certificate certificate search data validity
//
// swagger:model CertificateCertificateSearchDataValidity
type CertificateCertificateSearchDataValidity struct {

	// end
	End string `json:"end,omitempty"`

	// length
	Length int64 `json:"length,omitempty"`

	// start
	Start string `json:"start,omitempty"`
}

// Validate validates this certificate certificate search data validity
func (m *CertificateCertificateSearchDataValidity) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this certificate certificate search data validity based on context it is used
func (m *CertificateCertificateSearchDataValidity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CertificateCertificateSearchDataValidity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateCertificateSearchDataValidity) UnmarshalBinary(b []byte) error {
	var res CertificateCertificateSearchDataValidity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
