// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CertificateCertificateHashResponse certificate certificate hash response
//
// swagger:model certificate.CertificateHashResponse
type CertificateCertificateHashResponse struct {

	// data
	Data *CertificateCertificateHashResponseData `json:"data,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// success
	Success bool `json:"success,omitempty"`
}

// Validate validates this certificate certificate hash response
func (m *CertificateCertificateHashResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateCertificateHashResponse) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this certificate certificate hash response based on the context it is used
func (m *CertificateCertificateHashResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateCertificateHashResponse) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {

		if swag.IsZero(m.Data) { // not required
			return nil
		}

		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CertificateCertificateHashResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateCertificateHashResponse) UnmarshalBinary(b []byte) error {
	var res CertificateCertificateHashResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CertificateCertificateHashResponseData certificate certificate hash response data
//
// swagger:model CertificateCertificateHashResponseData
type CertificateCertificateHashResponseData struct {

	// certificate
	Certificate *CertificateCertificateHashResponseDataCertificate `json:"certificate,omitempty"`

	// tags
	Tags []string `json:"tags"`
}

// Validate validates this certificate certificate hash response data
func (m *CertificateCertificateHashResponseData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertificate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateCertificateHashResponseData) validateCertificate(formats strfmt.Registry) error {
	if swag.IsZero(m.Certificate) { // not required
		return nil
	}

	if m.Certificate != nil {
		if err := m.Certificate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this certificate certificate hash response data based on the context it is used
func (m *CertificateCertificateHashResponseData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCertificate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateCertificateHashResponseData) contextValidateCertificate(ctx context.Context, formats strfmt.Registry) error {

	if m.Certificate != nil {

		if swag.IsZero(m.Certificate) { // not required
			return nil
		}

		if err := m.Certificate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CertificateCertificateHashResponseData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateCertificateHashResponseData) UnmarshalBinary(b []byte) error {
	var res CertificateCertificateHashResponseData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CertificateCertificateHashResponseDataCertificate certificate certificate hash response data certificate
//
// swagger:model CertificateCertificateHashResponseDataCertificate
type CertificateCertificateHashResponseDataCertificate struct {

	// extensions
	Extensions *CertificateCertificateHashResponseDataCertificateExtensions `json:"extensions,omitempty"`

	// fingerprint md5
	FingerprintMd5 string `json:"fingerprint_md5,omitempty"`

	// fingerprint sha1
	FingerprintSha1 string `json:"fingerprint_sha1,omitempty"`

	// fingerprint sha256
	FingerprintSha256 string `json:"fingerprint_sha256,omitempty"`

	// issuer
	Issuer *CertificateCertificateHashResponseDataCertificateIssuer `json:"issuer,omitempty"`

	// redacted
	Redacted bool `json:"redacted,omitempty"`

	// serial number
	SerialNumber string `json:"serial_number,omitempty"`

	// signature
	Signature *CertificateCertificateHashResponseDataCertificateSignature `json:"signature,omitempty"`

	// subject
	Subject *CertificateCertificateHashResponseDataCertificateSubject `json:"subject,omitempty"`

	// subject alt name
	SubjectAltName *CertificateCertificateHashResponseDataCertificateSubjectAltName `json:"subject_alt_name,omitempty"`

	// subject key info
	SubjectKeyInfo *CertificateCertificateHashResponseDataCertificateSubjectKeyInfo `json:"subject_key_info,omitempty"`

	// tbs fingerprint
	TbsFingerprint string `json:"tbs_fingerprint,omitempty"`

	// validation level
	ValidationLevel string `json:"validation_level,omitempty"`

	// validity
	Validity *CertificateCertificateHashResponseDataCertificateValidity `json:"validity,omitempty"`

	// version
	Version int64 `json:"version,omitempty"`
}

// Validate validates this certificate certificate hash response data certificate
func (m *CertificateCertificateHashResponseDataCertificate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExtensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubjectAltName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubjectKeyInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateCertificateHashResponseDataCertificate) validateExtensions(formats strfmt.Registry) error {
	if swag.IsZero(m.Extensions) { // not required
		return nil
	}

	if m.Extensions != nil {
		if err := m.Extensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate" + "." + "extensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate" + "." + "extensions")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateCertificateHashResponseDataCertificate) validateIssuer(formats strfmt.Registry) error {
	if swag.IsZero(m.Issuer) { // not required
		return nil
	}

	if m.Issuer != nil {
		if err := m.Issuer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate" + "." + "issuer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate" + "." + "issuer")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateCertificateHashResponseDataCertificate) validateSignature(formats strfmt.Registry) error {
	if swag.IsZero(m.Signature) { // not required
		return nil
	}

	if m.Signature != nil {
		if err := m.Signature.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate" + "." + "signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate" + "." + "signature")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateCertificateHashResponseDataCertificate) validateSubject(formats strfmt.Registry) error {
	if swag.IsZero(m.Subject) { // not required
		return nil
	}

	if m.Subject != nil {
		if err := m.Subject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate" + "." + "subject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate" + "." + "subject")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateCertificateHashResponseDataCertificate) validateSubjectAltName(formats strfmt.Registry) error {
	if swag.IsZero(m.SubjectAltName) { // not required
		return nil
	}

	if m.SubjectAltName != nil {
		if err := m.SubjectAltName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate" + "." + "subject_alt_name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate" + "." + "subject_alt_name")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateCertificateHashResponseDataCertificate) validateSubjectKeyInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.SubjectKeyInfo) { // not required
		return nil
	}

	if m.SubjectKeyInfo != nil {
		if err := m.SubjectKeyInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate" + "." + "subject_key_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate" + "." + "subject_key_info")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateCertificateHashResponseDataCertificate) validateValidity(formats strfmt.Registry) error {
	if swag.IsZero(m.Validity) { // not required
		return nil
	}

	if m.Validity != nil {
		if err := m.Validity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate" + "." + "validity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate" + "." + "validity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this certificate certificate hash response data certificate based on the context it is used
func (m *CertificateCertificateHashResponseDataCertificate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExtensions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIssuer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSignature(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubjectAltName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubjectKeyInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValidity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateCertificateHashResponseDataCertificate) contextValidateExtensions(ctx context.Context, formats strfmt.Registry) error {

	if m.Extensions != nil {

		if swag.IsZero(m.Extensions) { // not required
			return nil
		}

		if err := m.Extensions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate" + "." + "extensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate" + "." + "extensions")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateCertificateHashResponseDataCertificate) contextValidateIssuer(ctx context.Context, formats strfmt.Registry) error {

	if m.Issuer != nil {

		if swag.IsZero(m.Issuer) { // not required
			return nil
		}

		if err := m.Issuer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate" + "." + "issuer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate" + "." + "issuer")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateCertificateHashResponseDataCertificate) contextValidateSignature(ctx context.Context, formats strfmt.Registry) error {

	if m.Signature != nil {

		if swag.IsZero(m.Signature) { // not required
			return nil
		}

		if err := m.Signature.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate" + "." + "signature")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate" + "." + "signature")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateCertificateHashResponseDataCertificate) contextValidateSubject(ctx context.Context, formats strfmt.Registry) error {

	if m.Subject != nil {

		if swag.IsZero(m.Subject) { // not required
			return nil
		}

		if err := m.Subject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate" + "." + "subject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate" + "." + "subject")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateCertificateHashResponseDataCertificate) contextValidateSubjectAltName(ctx context.Context, formats strfmt.Registry) error {

	if m.SubjectAltName != nil {

		if swag.IsZero(m.SubjectAltName) { // not required
			return nil
		}

		if err := m.SubjectAltName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate" + "." + "subject_alt_name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate" + "." + "subject_alt_name")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateCertificateHashResponseDataCertificate) contextValidateSubjectKeyInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.SubjectKeyInfo != nil {

		if swag.IsZero(m.SubjectKeyInfo) { // not required
			return nil
		}

		if err := m.SubjectKeyInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate" + "." + "subject_key_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate" + "." + "subject_key_info")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateCertificateHashResponseDataCertificate) contextValidateValidity(ctx context.Context, formats strfmt.Registry) error {

	if m.Validity != nil {

		if swag.IsZero(m.Validity) { // not required
			return nil
		}

		if err := m.Validity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate" + "." + "validity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate" + "." + "validity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificate) UnmarshalBinary(b []byte) error {
	var res CertificateCertificateHashResponseDataCertificate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CertificateCertificateHashResponseDataCertificateExtensions certificate certificate hash response data certificate extensions
//
// swagger:model CertificateCertificateHashResponseDataCertificateExtensions
type CertificateCertificateHashResponseDataCertificateExtensions struct {

	// authority info access
	AuthorityInfoAccess *CertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccess `json:"authority_info_access,omitempty"`

	// authority key id
	AuthorityKeyID string `json:"authority_key_id,omitempty"`

	// basic constraints
	BasicConstraints *CertificateCertificateHashResponseDataCertificateExtensionsBasicConstraints `json:"basic_constraints,omitempty"`

	// certificate policies
	CertificatePolicies []*CertificateCertificateHashResponseDataCertificateExtensionsCertificatePoliciesItems0 `json:"certificate_policies"`

	// ct poison
	CtPoison bool `json:"ct_poison,omitempty"`

	// extended key usage
	ExtendedKeyUsage *CertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsage `json:"extended_key_usage,omitempty"`

	// key usage
	KeyUsage *CertificateCertificateHashResponseDataCertificateExtensionsKeyUsage `json:"key_usage,omitempty"`

	// subject alt name
	SubjectAltName *CertificateCertificateHashResponseDataCertificateExtensionsSubjectAltName `json:"subject_alt_name,omitempty"`

	// subject key id
	SubjectKeyID string `json:"subject_key_id,omitempty"`
}

// Validate validates this certificate certificate hash response data certificate extensions
func (m *CertificateCertificateHashResponseDataCertificateExtensions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorityInfoAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBasicConstraints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificatePolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtendedKeyUsage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeyUsage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubjectAltName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateCertificateHashResponseDataCertificateExtensions) validateAuthorityInfoAccess(formats strfmt.Registry) error {
	if swag.IsZero(m.AuthorityInfoAccess) { // not required
		return nil
	}

	if m.AuthorityInfoAccess != nil {
		if err := m.AuthorityInfoAccess.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate" + "." + "extensions" + "." + "authority_info_access")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate" + "." + "extensions" + "." + "authority_info_access")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateCertificateHashResponseDataCertificateExtensions) validateBasicConstraints(formats strfmt.Registry) error {
	if swag.IsZero(m.BasicConstraints) { // not required
		return nil
	}

	if m.BasicConstraints != nil {
		if err := m.BasicConstraints.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate" + "." + "extensions" + "." + "basic_constraints")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate" + "." + "extensions" + "." + "basic_constraints")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateCertificateHashResponseDataCertificateExtensions) validateCertificatePolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.CertificatePolicies) { // not required
		return nil
	}

	for i := 0; i < len(m.CertificatePolicies); i++ {
		if swag.IsZero(m.CertificatePolicies[i]) { // not required
			continue
		}

		if m.CertificatePolicies[i] != nil {
			if err := m.CertificatePolicies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + "certificate" + "." + "extensions" + "." + "certificate_policies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + "certificate" + "." + "extensions" + "." + "certificate_policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CertificateCertificateHashResponseDataCertificateExtensions) validateExtendedKeyUsage(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtendedKeyUsage) { // not required
		return nil
	}

	if m.ExtendedKeyUsage != nil {
		if err := m.ExtendedKeyUsage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate" + "." + "extensions" + "." + "extended_key_usage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate" + "." + "extensions" + "." + "extended_key_usage")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateCertificateHashResponseDataCertificateExtensions) validateKeyUsage(formats strfmt.Registry) error {
	if swag.IsZero(m.KeyUsage) { // not required
		return nil
	}

	if m.KeyUsage != nil {
		if err := m.KeyUsage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate" + "." + "extensions" + "." + "key_usage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate" + "." + "extensions" + "." + "key_usage")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateCertificateHashResponseDataCertificateExtensions) validateSubjectAltName(formats strfmt.Registry) error {
	if swag.IsZero(m.SubjectAltName) { // not required
		return nil
	}

	if m.SubjectAltName != nil {
		if err := m.SubjectAltName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate" + "." + "extensions" + "." + "subject_alt_name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate" + "." + "extensions" + "." + "subject_alt_name")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this certificate certificate hash response data certificate extensions based on the context it is used
func (m *CertificateCertificateHashResponseDataCertificateExtensions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthorityInfoAccess(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBasicConstraints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCertificatePolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtendedKeyUsage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeyUsage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubjectAltName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateCertificateHashResponseDataCertificateExtensions) contextValidateAuthorityInfoAccess(ctx context.Context, formats strfmt.Registry) error {

	if m.AuthorityInfoAccess != nil {

		if swag.IsZero(m.AuthorityInfoAccess) { // not required
			return nil
		}

		if err := m.AuthorityInfoAccess.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate" + "." + "extensions" + "." + "authority_info_access")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate" + "." + "extensions" + "." + "authority_info_access")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateCertificateHashResponseDataCertificateExtensions) contextValidateBasicConstraints(ctx context.Context, formats strfmt.Registry) error {

	if m.BasicConstraints != nil {

		if swag.IsZero(m.BasicConstraints) { // not required
			return nil
		}

		if err := m.BasicConstraints.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate" + "." + "extensions" + "." + "basic_constraints")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate" + "." + "extensions" + "." + "basic_constraints")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateCertificateHashResponseDataCertificateExtensions) contextValidateCertificatePolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CertificatePolicies); i++ {

		if m.CertificatePolicies[i] != nil {

			if swag.IsZero(m.CertificatePolicies[i]) { // not required
				return nil
			}

			if err := m.CertificatePolicies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + "certificate" + "." + "extensions" + "." + "certificate_policies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + "certificate" + "." + "extensions" + "." + "certificate_policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CertificateCertificateHashResponseDataCertificateExtensions) contextValidateExtendedKeyUsage(ctx context.Context, formats strfmt.Registry) error {

	if m.ExtendedKeyUsage != nil {

		if swag.IsZero(m.ExtendedKeyUsage) { // not required
			return nil
		}

		if err := m.ExtendedKeyUsage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate" + "." + "extensions" + "." + "extended_key_usage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate" + "." + "extensions" + "." + "extended_key_usage")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateCertificateHashResponseDataCertificateExtensions) contextValidateKeyUsage(ctx context.Context, formats strfmt.Registry) error {

	if m.KeyUsage != nil {

		if swag.IsZero(m.KeyUsage) { // not required
			return nil
		}

		if err := m.KeyUsage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate" + "." + "extensions" + "." + "key_usage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate" + "." + "extensions" + "." + "key_usage")
			}
			return err
		}
	}

	return nil
}

func (m *CertificateCertificateHashResponseDataCertificateExtensions) contextValidateSubjectAltName(ctx context.Context, formats strfmt.Registry) error {

	if m.SubjectAltName != nil {

		if swag.IsZero(m.SubjectAltName) { // not required
			return nil
		}

		if err := m.SubjectAltName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate" + "." + "extensions" + "." + "subject_alt_name")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate" + "." + "extensions" + "." + "subject_alt_name")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateExtensions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateExtensions) UnmarshalBinary(b []byte) error {
	var res CertificateCertificateHashResponseDataCertificateExtensions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccess certificate certificate hash response data certificate extensions authority info access
//
// swagger:model CertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccess
type CertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccess struct {

	// issuer urls
	IssuerUrls []string `json:"issuer_urls"`

	// ocsp urls
	OcspUrls []string `json:"ocsp_urls"`
}

// Validate validates this certificate certificate hash response data certificate extensions authority info access
func (m *CertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccess) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this certificate certificate hash response data certificate extensions authority info access based on context it is used
func (m *CertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccess) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccess) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccess) UnmarshalBinary(b []byte) error {
	var res CertificateCertificateHashResponseDataCertificateExtensionsAuthorityInfoAccess
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CertificateCertificateHashResponseDataCertificateExtensionsBasicConstraints certificate certificate hash response data certificate extensions basic constraints
//
// swagger:model CertificateCertificateHashResponseDataCertificateExtensionsBasicConstraints
type CertificateCertificateHashResponseDataCertificateExtensionsBasicConstraints struct {

	// is ca
	IsCa bool `json:"is_ca,omitempty"`
}

// Validate validates this certificate certificate hash response data certificate extensions basic constraints
func (m *CertificateCertificateHashResponseDataCertificateExtensionsBasicConstraints) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this certificate certificate hash response data certificate extensions basic constraints based on context it is used
func (m *CertificateCertificateHashResponseDataCertificateExtensionsBasicConstraints) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateExtensionsBasicConstraints) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateExtensionsBasicConstraints) UnmarshalBinary(b []byte) error {
	var res CertificateCertificateHashResponseDataCertificateExtensionsBasicConstraints
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CertificateCertificateHashResponseDataCertificateExtensionsCertificatePoliciesItems0 certificate certificate hash response data certificate extensions certificate policies items0
//
// swagger:model CertificateCertificateHashResponseDataCertificateExtensionsCertificatePoliciesItems0
type CertificateCertificateHashResponseDataCertificateExtensionsCertificatePoliciesItems0 struct {

	// cps
	Cps []string `json:"cps"`

	// id
	ID string `json:"id,omitempty"`
}

// Validate validates this certificate certificate hash response data certificate extensions certificate policies items0
func (m *CertificateCertificateHashResponseDataCertificateExtensionsCertificatePoliciesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this certificate certificate hash response data certificate extensions certificate policies items0 based on context it is used
func (m *CertificateCertificateHashResponseDataCertificateExtensionsCertificatePoliciesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateExtensionsCertificatePoliciesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateExtensionsCertificatePoliciesItems0) UnmarshalBinary(b []byte) error {
	var res CertificateCertificateHashResponseDataCertificateExtensionsCertificatePoliciesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsage certificate certificate hash response data certificate extensions extended key usage
//
// swagger:model CertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsage
type CertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsage struct {

	// client auth
	ClientAuth bool `json:"client_auth,omitempty"`

	// server auth
	ServerAuth bool `json:"server_auth,omitempty"`
}

// Validate validates this certificate certificate hash response data certificate extensions extended key usage
func (m *CertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsage) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this certificate certificate hash response data certificate extensions extended key usage based on context it is used
func (m *CertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsage) UnmarshalBinary(b []byte) error {
	var res CertificateCertificateHashResponseDataCertificateExtensionsExtendedKeyUsage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CertificateCertificateHashResponseDataCertificateExtensionsKeyUsage certificate certificate hash response data certificate extensions key usage
//
// swagger:model CertificateCertificateHashResponseDataCertificateExtensionsKeyUsage
type CertificateCertificateHashResponseDataCertificateExtensionsKeyUsage struct {

	// digital signature
	DigitalSignature bool `json:"digital_signature,omitempty"`
}

// Validate validates this certificate certificate hash response data certificate extensions key usage
func (m *CertificateCertificateHashResponseDataCertificateExtensionsKeyUsage) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this certificate certificate hash response data certificate extensions key usage based on context it is used
func (m *CertificateCertificateHashResponseDataCertificateExtensionsKeyUsage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateExtensionsKeyUsage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateExtensionsKeyUsage) UnmarshalBinary(b []byte) error {
	var res CertificateCertificateHashResponseDataCertificateExtensionsKeyUsage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CertificateCertificateHashResponseDataCertificateExtensionsSubjectAltName certificate certificate hash response data certificate extensions subject alt name
//
// swagger:model CertificateCertificateHashResponseDataCertificateExtensionsSubjectAltName
type CertificateCertificateHashResponseDataCertificateExtensionsSubjectAltName struct {

	// dns names
	DNSNames []string `json:"dns_names"`
}

// Validate validates this certificate certificate hash response data certificate extensions subject alt name
func (m *CertificateCertificateHashResponseDataCertificateExtensionsSubjectAltName) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this certificate certificate hash response data certificate extensions subject alt name based on context it is used
func (m *CertificateCertificateHashResponseDataCertificateExtensionsSubjectAltName) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateExtensionsSubjectAltName) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateExtensionsSubjectAltName) UnmarshalBinary(b []byte) error {
	var res CertificateCertificateHashResponseDataCertificateExtensionsSubjectAltName
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CertificateCertificateHashResponseDataCertificateIssuer certificate certificate hash response data certificate issuer
//
// swagger:model CertificateCertificateHashResponseDataCertificateIssuer
type CertificateCertificateHashResponseDataCertificateIssuer struct {

	// common name
	CommonName []string `json:"common_name"`

	// country
	Country []string `json:"country"`

	// organization
	Organization []string `json:"organization"`
}

// Validate validates this certificate certificate hash response data certificate issuer
func (m *CertificateCertificateHashResponseDataCertificateIssuer) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this certificate certificate hash response data certificate issuer based on context it is used
func (m *CertificateCertificateHashResponseDataCertificateIssuer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateIssuer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateIssuer) UnmarshalBinary(b []byte) error {
	var res CertificateCertificateHashResponseDataCertificateIssuer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CertificateCertificateHashResponseDataCertificateSignature certificate certificate hash response data certificate signature
//
// swagger:model CertificateCertificateHashResponseDataCertificateSignature
type CertificateCertificateHashResponseDataCertificateSignature struct {

	// signature algorithm
	SignatureAlgorithm *CertificateCertificateHashResponseDataCertificateSignatureSignatureAlgorithm `json:"signature_algorithm,omitempty"`
}

// Validate validates this certificate certificate hash response data certificate signature
func (m *CertificateCertificateHashResponseDataCertificateSignature) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSignatureAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateCertificateHashResponseDataCertificateSignature) validateSignatureAlgorithm(formats strfmt.Registry) error {
	if swag.IsZero(m.SignatureAlgorithm) { // not required
		return nil
	}

	if m.SignatureAlgorithm != nil {
		if err := m.SignatureAlgorithm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate" + "." + "signature" + "." + "signature_algorithm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate" + "." + "signature" + "." + "signature_algorithm")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this certificate certificate hash response data certificate signature based on the context it is used
func (m *CertificateCertificateHashResponseDataCertificateSignature) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSignatureAlgorithm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateCertificateHashResponseDataCertificateSignature) contextValidateSignatureAlgorithm(ctx context.Context, formats strfmt.Registry) error {

	if m.SignatureAlgorithm != nil {

		if swag.IsZero(m.SignatureAlgorithm) { // not required
			return nil
		}

		if err := m.SignatureAlgorithm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate" + "." + "signature" + "." + "signature_algorithm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate" + "." + "signature" + "." + "signature_algorithm")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateSignature) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateSignature) UnmarshalBinary(b []byte) error {
	var res CertificateCertificateHashResponseDataCertificateSignature
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CertificateCertificateHashResponseDataCertificateSignatureSignatureAlgorithm certificate certificate hash response data certificate signature signature algorithm
//
// swagger:model CertificateCertificateHashResponseDataCertificateSignatureSignatureAlgorithm
type CertificateCertificateHashResponseDataCertificateSignatureSignatureAlgorithm struct {

	// name
	Name string `json:"name,omitempty"`

	// oid
	Oid string `json:"oid,omitempty"`
}

// Validate validates this certificate certificate hash response data certificate signature signature algorithm
func (m *CertificateCertificateHashResponseDataCertificateSignatureSignatureAlgorithm) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this certificate certificate hash response data certificate signature signature algorithm based on context it is used
func (m *CertificateCertificateHashResponseDataCertificateSignatureSignatureAlgorithm) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateSignatureSignatureAlgorithm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateSignatureSignatureAlgorithm) UnmarshalBinary(b []byte) error {
	var res CertificateCertificateHashResponseDataCertificateSignatureSignatureAlgorithm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CertificateCertificateHashResponseDataCertificateSubject certificate certificate hash response data certificate subject
//
// swagger:model CertificateCertificateHashResponseDataCertificateSubject
type CertificateCertificateHashResponseDataCertificateSubject struct {

	// common name
	CommonName []string `json:"common_name"`
}

// Validate validates this certificate certificate hash response data certificate subject
func (m *CertificateCertificateHashResponseDataCertificateSubject) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this certificate certificate hash response data certificate subject based on context it is used
func (m *CertificateCertificateHashResponseDataCertificateSubject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateSubject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateSubject) UnmarshalBinary(b []byte) error {
	var res CertificateCertificateHashResponseDataCertificateSubject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CertificateCertificateHashResponseDataCertificateSubjectAltName certificate certificate hash response data certificate subject alt name
//
// swagger:model CertificateCertificateHashResponseDataCertificateSubjectAltName
type CertificateCertificateHashResponseDataCertificateSubjectAltName struct {

	// dns names
	DNSNames []string `json:"dns_names"`

	// extended dns names
	ExtendedDNSNames []*CertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0 `json:"extended_dns_names"`
}

// Validate validates this certificate certificate hash response data certificate subject alt name
func (m *CertificateCertificateHashResponseDataCertificateSubjectAltName) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExtendedDNSNames(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateCertificateHashResponseDataCertificateSubjectAltName) validateExtendedDNSNames(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtendedDNSNames) { // not required
		return nil
	}

	for i := 0; i < len(m.ExtendedDNSNames); i++ {
		if swag.IsZero(m.ExtendedDNSNames[i]) { // not required
			continue
		}

		if m.ExtendedDNSNames[i] != nil {
			if err := m.ExtendedDNSNames[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + "certificate" + "." + "subject_alt_name" + "." + "extended_dns_names" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + "certificate" + "." + "subject_alt_name" + "." + "extended_dns_names" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this certificate certificate hash response data certificate subject alt name based on the context it is used
func (m *CertificateCertificateHashResponseDataCertificateSubjectAltName) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExtendedDNSNames(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateCertificateHashResponseDataCertificateSubjectAltName) contextValidateExtendedDNSNames(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExtendedDNSNames); i++ {

		if m.ExtendedDNSNames[i] != nil {

			if swag.IsZero(m.ExtendedDNSNames[i]) { // not required
				return nil
			}

			if err := m.ExtendedDNSNames[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + "certificate" + "." + "subject_alt_name" + "." + "extended_dns_names" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("data" + "." + "certificate" + "." + "subject_alt_name" + "." + "extended_dns_names" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateSubjectAltName) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateSubjectAltName) UnmarshalBinary(b []byte) error {
	var res CertificateCertificateHashResponseDataCertificateSubjectAltName
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0 certificate certificate hash response data certificate subject alt name extended DNS names items0
//
// swagger:model CertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0
type CertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0 struct {

	// domain
	Domain string `json:"domain,omitempty"`

	// fld
	Fld string `json:"fld,omitempty"`

	// subdomain
	Subdomain string `json:"subdomain,omitempty"`

	// tld
	Tld string `json:"tld,omitempty"`
}

// Validate validates this certificate certificate hash response data certificate subject alt name extended DNS names items0
func (m *CertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this certificate certificate hash response data certificate subject alt name extended DNS names items0 based on context it is used
func (m *CertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0) UnmarshalBinary(b []byte) error {
	var res CertificateCertificateHashResponseDataCertificateSubjectAltNameExtendedDNSNamesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CertificateCertificateHashResponseDataCertificateSubjectKeyInfo certificate certificate hash response data certificate subject key info
//
// swagger:model CertificateCertificateHashResponseDataCertificateSubjectKeyInfo
type CertificateCertificateHashResponseDataCertificateSubjectKeyInfo struct {

	// fingerprint sha256
	FingerprintSha256 string `json:"fingerprint_sha256,omitempty"`

	// key algorithm
	KeyAlgorithm string `json:"key_algorithm,omitempty"`

	// public key
	PublicKey *CertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKey `json:"public_key,omitempty"`
}

// Validate validates this certificate certificate hash response data certificate subject key info
func (m *CertificateCertificateHashResponseDataCertificateSubjectKeyInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePublicKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateCertificateHashResponseDataCertificateSubjectKeyInfo) validatePublicKey(formats strfmt.Registry) error {
	if swag.IsZero(m.PublicKey) { // not required
		return nil
	}

	if m.PublicKey != nil {
		if err := m.PublicKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate" + "." + "subject_key_info" + "." + "public_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate" + "." + "subject_key_info" + "." + "public_key")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this certificate certificate hash response data certificate subject key info based on the context it is used
func (m *CertificateCertificateHashResponseDataCertificateSubjectKeyInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePublicKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateCertificateHashResponseDataCertificateSubjectKeyInfo) contextValidatePublicKey(ctx context.Context, formats strfmt.Registry) error {

	if m.PublicKey != nil {

		if swag.IsZero(m.PublicKey) { // not required
			return nil
		}

		if err := m.PublicKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + "certificate" + "." + "subject_key_info" + "." + "public_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data" + "." + "certificate" + "." + "subject_key_info" + "." + "public_key")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateSubjectKeyInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateSubjectKeyInfo) UnmarshalBinary(b []byte) error {
	var res CertificateCertificateHashResponseDataCertificateSubjectKeyInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKey certificate certificate hash response data certificate subject key info public key
//
// swagger:model CertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKey
type CertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKey struct {

	// b
	B string `json:"b,omitempty"`

	// curve
	Curve string `json:"curve,omitempty"`

	// gx
	Gx string `json:"gx,omitempty"`

	// gy
	Gy string `json:"gy,omitempty"`

	// length
	Length int64 `json:"length,omitempty"`

	// p
	P string `json:"p,omitempty"`

	// x
	X string `json:"x,omitempty"`

	// y
	Y string `json:"y,omitempty"`
}

// Validate validates this certificate certificate hash response data certificate subject key info public key
func (m *CertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKey) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this certificate certificate hash response data certificate subject key info public key based on context it is used
func (m *CertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKey) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKey) UnmarshalBinary(b []byte) error {
	var res CertificateCertificateHashResponseDataCertificateSubjectKeyInfoPublicKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CertificateCertificateHashResponseDataCertificateValidity certificate certificate hash response data certificate validity
//
// swagger:model CertificateCertificateHashResponseDataCertificateValidity
type CertificateCertificateHashResponseDataCertificateValidity struct {

	// end
	End string `json:"end,omitempty"`

	// length
	Length int64 `json:"length,omitempty"`

	// start
	Start string `json:"start,omitempty"`
}

// Validate validates this certificate certificate hash response data certificate validity
func (m *CertificateCertificateHashResponseDataCertificateValidity) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this certificate certificate hash response data certificate validity based on context it is used
func (m *CertificateCertificateHashResponseDataCertificateValidity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateValidity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateCertificateHashResponseDataCertificateValidity) UnmarshalBinary(b []byte) error {
	var res CertificateCertificateHashResponseDataCertificateValidity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
