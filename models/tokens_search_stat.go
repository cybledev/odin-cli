// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TokensSearchStat tokens search stat
//
// swagger:model tokens.SearchStat
type TokensSearchStat struct {

	// bucket file
	BucketFile *TokensFinalStats `json:"bucket_file,omitempty"`

	// data
	Data interface{} `json:"data,omitempty"`

	// host cert
	HostCert *TokensFinalStats `json:"host_cert,omitempty"`
}

// Validate validates this tokens search stat
func (m *TokensSearchStat) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBucketFile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostCert(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TokensSearchStat) validateBucketFile(formats strfmt.Registry) error {
	if swag.IsZero(m.BucketFile) { // not required
		return nil
	}

	if m.BucketFile != nil {
		if err := m.BucketFile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bucket_file")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bucket_file")
			}
			return err
		}
	}

	return nil
}

func (m *TokensSearchStat) validateHostCert(formats strfmt.Registry) error {
	if swag.IsZero(m.HostCert) { // not required
		return nil
	}

	if m.HostCert != nil {
		if err := m.HostCert.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host_cert")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host_cert")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tokens search stat based on the context it is used
func (m *TokensSearchStat) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBucketFile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostCert(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TokensSearchStat) contextValidateBucketFile(ctx context.Context, formats strfmt.Registry) error {

	if m.BucketFile != nil {

		if swag.IsZero(m.BucketFile) { // not required
			return nil
		}

		if err := m.BucketFile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bucket_file")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bucket_file")
			}
			return err
		}
	}

	return nil
}

func (m *TokensSearchStat) contextValidateHostCert(ctx context.Context, formats strfmt.Registry) error {

	if m.HostCert != nil {

		if swag.IsZero(m.HostCert) { // not required
			return nil
		}

		if err := m.HostCert.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("host_cert")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("host_cert")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TokensSearchStat) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TokensSearchStat) UnmarshalBinary(b []byte) error {
	var res TokensSearchStat
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
