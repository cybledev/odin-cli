// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ServiceService service service
//
// swagger:model service.Service
type ServiceService struct {

	// meta
	Meta *ServiceIPServiceMeta `json:"_meta,omitempty"`

	// asn
	Asn *ServiceIPASN `json:"asn,omitempty"`

	// asn updated at
	AsnUpdatedAt string `json:"asn_updated_at,omitempty"`

	// banners
	Banners []string `json:"banners"`

	// cve
	Cve []*ServiceFullCveData `json:"cve"`

	// domains
	Domains []*ServiceIPDomain `json:"domains"`

	// extra info
	ExtraInfo string `json:"extra_info,omitempty"`

	// hostnames
	Hostnames []*ServiceIPHostname `json:"hostnames"`

	// ip
	IP string `json:"ip,omitempty"`

	// is ipv4
	IsIPV4 bool `json:"is_ipv4,omitempty"`

	// is ipv6
	IsIPV6 bool `json:"is_ipv6,omitempty"`

	// is vuln
	IsVuln bool `json:"is_vuln,omitempty"`

	// last updated at
	LastUpdatedAt string `json:"last_updated_at,omitempty"`

	// location
	Location *ServiceIPLocation `json:"location,omitempty"`

	// location updated at
	LocationUpdatedAt string `json:"location_updated_at,omitempty"`

	// services.tls -> services.modules.tls
	// key names - if you mess up the key names
	Modules interface{} `json:"modules,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// port
	Port int64 `json:"port,omitempty"`

	// product
	Product string `json:"product,omitempty"`

	// protocol
	Protocol string `json:"protocol,omitempty"`

	// scan id
	ScanID int64 `json:"scan_id,omitempty"`

	// softwares
	Softwares []*ServiceIPServiceSoftware `json:"softwares"`

	// tags
	Tags []*ServiceIPTag `json:"tags"`

	// tunnel
	Tunnel string `json:"tunnel,omitempty"`

	// version
	Version string `json:"version,omitempty"`

	// whois
	Whois *ServiceIPWhois `json:"whois,omitempty"`

	// whois updated at
	WhoisUpdatedAt string `json:"whois_updated_at,omitempty"`
}

// Validate validates this service service
func (m *ServiceService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAsn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCve(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomains(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostnames(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftwares(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWhois(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceService) validateMeta(formats strfmt.Registry) error {
	if swag.IsZero(m.Meta) { // not required
		return nil
	}

	if m.Meta != nil {
		if err := m.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_meta")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceService) validateAsn(formats strfmt.Registry) error {
	if swag.IsZero(m.Asn) { // not required
		return nil
	}

	if m.Asn != nil {
		if err := m.Asn.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("asn")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("asn")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceService) validateCve(formats strfmt.Registry) error {
	if swag.IsZero(m.Cve) { // not required
		return nil
	}

	for i := 0; i < len(m.Cve); i++ {
		if swag.IsZero(m.Cve[i]) { // not required
			continue
		}

		if m.Cve[i] != nil {
			if err := m.Cve[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cve" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cve" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceService) validateDomains(formats strfmt.Registry) error {
	if swag.IsZero(m.Domains) { // not required
		return nil
	}

	for i := 0; i < len(m.Domains); i++ {
		if swag.IsZero(m.Domains[i]) { // not required
			continue
		}

		if m.Domains[i] != nil {
			if err := m.Domains[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("domains" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("domains" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceService) validateHostnames(formats strfmt.Registry) error {
	if swag.IsZero(m.Hostnames) { // not required
		return nil
	}

	for i := 0; i < len(m.Hostnames); i++ {
		if swag.IsZero(m.Hostnames[i]) { // not required
			continue
		}

		if m.Hostnames[i] != nil {
			if err := m.Hostnames[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostnames" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hostnames" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceService) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceService) validateSoftwares(formats strfmt.Registry) error {
	if swag.IsZero(m.Softwares) { // not required
		return nil
	}

	for i := 0; i < len(m.Softwares); i++ {
		if swag.IsZero(m.Softwares[i]) { // not required
			continue
		}

		if m.Softwares[i] != nil {
			if err := m.Softwares[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("softwares" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("softwares" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceService) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceService) validateWhois(formats strfmt.Registry) error {
	if swag.IsZero(m.Whois) { // not required
		return nil
	}

	if m.Whois != nil {
		if err := m.Whois.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("whois")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("whois")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this service service based on the context it is used
func (m *ServiceService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAsn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCve(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDomains(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostnames(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSoftwares(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWhois(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceService) contextValidateMeta(ctx context.Context, formats strfmt.Registry) error {

	if m.Meta != nil {

		if swag.IsZero(m.Meta) { // not required
			return nil
		}

		if err := m.Meta.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_meta")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceService) contextValidateAsn(ctx context.Context, formats strfmt.Registry) error {

	if m.Asn != nil {

		if swag.IsZero(m.Asn) { // not required
			return nil
		}

		if err := m.Asn.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("asn")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("asn")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceService) contextValidateCve(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Cve); i++ {

		if m.Cve[i] != nil {

			if swag.IsZero(m.Cve[i]) { // not required
				return nil
			}

			if err := m.Cve[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cve" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cve" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceService) contextValidateDomains(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Domains); i++ {

		if m.Domains[i] != nil {

			if swag.IsZero(m.Domains[i]) { // not required
				return nil
			}

			if err := m.Domains[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("domains" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("domains" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceService) contextValidateHostnames(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Hostnames); i++ {

		if m.Hostnames[i] != nil {

			if swag.IsZero(m.Hostnames[i]) { // not required
				return nil
			}

			if err := m.Hostnames[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostnames" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("hostnames" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceService) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.Location != nil {

		if swag.IsZero(m.Location) { // not required
			return nil
		}

		if err := m.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceService) contextValidateSoftwares(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Softwares); i++ {

		if m.Softwares[i] != nil {

			if swag.IsZero(m.Softwares[i]) { // not required
				return nil
			}

			if err := m.Softwares[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("softwares" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("softwares" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceService) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {

			if swag.IsZero(m.Tags[i]) { // not required
				return nil
			}

			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceService) contextValidateWhois(ctx context.Context, formats strfmt.Registry) error {

	if m.Whois != nil {

		if swag.IsZero(m.Whois) { // not required
			return nil
		}

		if err := m.Whois.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("whois")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("whois")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceService) UnmarshalBinary(b []byte) error {
	var res ServiceService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
